   1               		.file	"usb_serial.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.usb_wait_in_ready,"ax",@progbits
  12               	usb_wait_in_ready:
  13               	.LFB17:
  14               		.file 1 "usb_serial.c"
   1:usb_serial.c  **** /* USB Serial Example for Teensy USB Development Board
   2:usb_serial.c  ****  * http://www.pjrc.com/teensy/usb_serial.html
   3:usb_serial.c  ****  * Copyright (c) 2008,2010,2011 PJRC.COM, LLC
   4:usb_serial.c  ****  * 
   5:usb_serial.c  ****  * Permission is hereby granted, free of charge, to any person obtaining a copy
   6:usb_serial.c  ****  * of this software and associated documentation files (the "Software"), to deal
   7:usb_serial.c  ****  * in the Software without restriction, including without limitation the rights
   8:usb_serial.c  ****  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:usb_serial.c  ****  * copies of the Software, and to permit persons to whom the Software is
  10:usb_serial.c  ****  * furnished to do so, subject to the following conditions:
  11:usb_serial.c  ****  * 
  12:usb_serial.c  ****  * The above copyright notice and this permission notice shall be included in
  13:usb_serial.c  ****  * all copies or substantial portions of the Software.
  14:usb_serial.c  ****  * 
  15:usb_serial.c  ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:usb_serial.c  ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:usb_serial.c  ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:usb_serial.c  ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:usb_serial.c  ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:usb_serial.c  ****  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:usb_serial.c  ****  * THE SOFTWARE.
  22:usb_serial.c  ****  */
  23:usb_serial.c  **** 
  24:usb_serial.c  **** // Version 1.0: Initial Release
  25:usb_serial.c  **** // Version 1.1: support Teensy++
  26:usb_serial.c  **** // Version 1.2: fixed usb_serial_available
  27:usb_serial.c  **** // Version 1.3: added transmit bandwidth test
  28:usb_serial.c  **** // Version 1.4: added usb_serial_write
  29:usb_serial.c  **** // Version 1.5: add support for Teensy 2.0
  30:usb_serial.c  **** // Version 1.6: fix zero length packet bug
  31:usb_serial.c  **** // Version 1.7: fix usb_serial_set_control
  32:usb_serial.c  **** 
  33:usb_serial.c  **** #define USB_SERIAL_PRIVATE_INCLUDE
  34:usb_serial.c  **** #include "usb_serial.h"
  35:usb_serial.c  **** 
  36:usb_serial.c  **** 
  37:usb_serial.c  **** /**************************************************************************
  38:usb_serial.c  ****  *
  39:usb_serial.c  ****  *  Configurable Options
  40:usb_serial.c  ****  *
  41:usb_serial.c  ****  **************************************************************************/
  42:usb_serial.c  **** 
  43:usb_serial.c  **** // You can change these to give your code its own name.  On Windows,
  44:usb_serial.c  **** // these are only used before an INF file (driver install) is loaded.
  45:usb_serial.c  **** #define STR_MANUFACTURER	L"Your Name"
  46:usb_serial.c  **** #define STR_PRODUCT		L"USB Serial"
  47:usb_serial.c  **** 
  48:usb_serial.c  **** // All USB serial devices are supposed to have a serial number
  49:usb_serial.c  **** // (according to Microsoft).  On windows, a new COM port is created
  50:usb_serial.c  **** // for every unique serial/vendor/product number combination.  If
  51:usb_serial.c  **** // you program 2 identical boards with 2 different serial numbers
  52:usb_serial.c  **** // and they are assigned COM7 and COM8, each will always get the
  53:usb_serial.c  **** // same COM port number because Windows remembers serial numbers.
  54:usb_serial.c  **** //
  55:usb_serial.c  **** // On Mac OS-X, a device file is created automatically which
  56:usb_serial.c  **** // incorperates the serial number, eg, /dev/cu-usbmodem12341
  57:usb_serial.c  **** //
  58:usb_serial.c  **** // Linux by default ignores the serial number, and creates device
  59:usb_serial.c  **** // files named /dev/ttyACM0, /dev/ttyACM1... in the order connected.
  60:usb_serial.c  **** // Udev rules (in /etc/udev/rules.d) can define persistent device
  61:usb_serial.c  **** // names linked to this serial number, as well as permissions, owner
  62:usb_serial.c  **** // and group settings.
  63:usb_serial.c  **** #define STR_SERIAL_NUMBER	L"12345"
  64:usb_serial.c  **** 
  65:usb_serial.c  **** // Mac OS-X and Linux automatically load the correct drivers.  On
  66:usb_serial.c  **** // Windows, even though the driver is supplied by Microsoft, an
  67:usb_serial.c  **** // INF file is needed to load the driver.  These numbers need to
  68:usb_serial.c  **** // match the INF file.
  69:usb_serial.c  **** #define VENDOR_ID		0x16C0
  70:usb_serial.c  **** #define PRODUCT_ID		0x047A
  71:usb_serial.c  **** 
  72:usb_serial.c  **** // When you write data, it goes into a USB endpoint buffer, which
  73:usb_serial.c  **** // is transmitted to the PC when it becomes full, or after a timeout
  74:usb_serial.c  **** // with no more writes.  Even if you write in exactly packet-size
  75:usb_serial.c  **** // increments, this timeout is used to send a "zero length packet"
  76:usb_serial.c  **** // that tells the PC no more data is expected and it should pass
  77:usb_serial.c  **** // any buffered data to the application that may be waiting.  If
  78:usb_serial.c  **** // you want data sent immediately, call usb_serial_flush_output().
  79:usb_serial.c  **** #define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */
  80:usb_serial.c  **** 
  81:usb_serial.c  **** // If the PC is connected but not "listening", this is the length
  82:usb_serial.c  **** // of time before usb_serial_getchar() returns with an error.  This
  83:usb_serial.c  **** // is roughly equivilant to a real UART simply transmitting the
  84:usb_serial.c  **** // bits on a wire where nobody is listening, except you get an error
  85:usb_serial.c  **** // code which you can ignore for serial-like discard of data, or
  86:usb_serial.c  **** // use to know your data wasn't sent.
  87:usb_serial.c  **** #define TRANSMIT_TIMEOUT	25   /* in milliseconds */
  88:usb_serial.c  **** 
  89:usb_serial.c  **** // USB devices are supposed to implment a halt feature, which is
  90:usb_serial.c  **** // rarely (if ever) used.  If you comment this line out, the halt
  91:usb_serial.c  **** // code will be removed, saving 116 bytes of space (gcc 4.3.0).
  92:usb_serial.c  **** // This is not strictly USB compliant, but works with all major
  93:usb_serial.c  **** // operating systems.
  94:usb_serial.c  **** #define SUPPORT_ENDPOINT_HALT
  95:usb_serial.c  **** 
  96:usb_serial.c  **** 
  97:usb_serial.c  **** 
  98:usb_serial.c  **** /**************************************************************************
  99:usb_serial.c  ****  *
 100:usb_serial.c  ****  *  Endpoint Buffer Configuration
 101:usb_serial.c  ****  *
 102:usb_serial.c  ****  **************************************************************************/
 103:usb_serial.c  **** 
 104:usb_serial.c  **** // These buffer sizes are best for most applications, but perhaps if you
 105:usb_serial.c  **** // want more buffering on some endpoint at the expense of others, this
 106:usb_serial.c  **** // is where you can make such changes.  The AT90USB162 has only 176 bytes
 107:usb_serial.c  **** // of DPRAM (USB buffers) and only endpoints 3 & 4 can double buffer.
 108:usb_serial.c  **** 
 109:usb_serial.c  **** #define ENDPOINT0_SIZE		16
 110:usb_serial.c  **** #define CDC_ACM_ENDPOINT	2
 111:usb_serial.c  **** #define CDC_RX_ENDPOINT		3
 112:usb_serial.c  **** #define CDC_TX_ENDPOINT		4
 113:usb_serial.c  **** #if defined(__AVR_AT90USB162__)
 114:usb_serial.c  **** #define CDC_ACM_SIZE		16
 115:usb_serial.c  **** #define CDC_ACM_BUFFER		EP_SINGLE_BUFFER
 116:usb_serial.c  **** #define CDC_RX_SIZE		32
 117:usb_serial.c  **** #define CDC_RX_BUFFER 		EP_DOUBLE_BUFFER
 118:usb_serial.c  **** #define CDC_TX_SIZE		32
 119:usb_serial.c  **** #define CDC_TX_BUFFER		EP_DOUBLE_BUFFER
 120:usb_serial.c  **** #else
 121:usb_serial.c  **** #define CDC_ACM_SIZE		16
 122:usb_serial.c  **** #define CDC_ACM_BUFFER		EP_SINGLE_BUFFER
 123:usb_serial.c  **** #define CDC_RX_SIZE		64
 124:usb_serial.c  **** #define CDC_RX_BUFFER 		EP_DOUBLE_BUFFER
 125:usb_serial.c  **** #define CDC_TX_SIZE		64
 126:usb_serial.c  **** #define CDC_TX_BUFFER		EP_DOUBLE_BUFFER
 127:usb_serial.c  **** #endif
 128:usb_serial.c  **** 
 129:usb_serial.c  **** static const uint8_t PROGMEM endpoint_config_table[] = {
 130:usb_serial.c  **** 	0,
 131:usb_serial.c  **** 	1, EP_TYPE_INTERRUPT_IN,  EP_SIZE(CDC_ACM_SIZE) | CDC_ACM_BUFFER,
 132:usb_serial.c  **** 	1, EP_TYPE_BULK_OUT,      EP_SIZE(CDC_RX_SIZE) | CDC_RX_BUFFER,
 133:usb_serial.c  **** 	1, EP_TYPE_BULK_IN,       EP_SIZE(CDC_TX_SIZE) | CDC_TX_BUFFER
 134:usb_serial.c  **** };
 135:usb_serial.c  **** 
 136:usb_serial.c  **** 
 137:usb_serial.c  **** /**************************************************************************
 138:usb_serial.c  ****  *
 139:usb_serial.c  ****  *  Descriptor Data
 140:usb_serial.c  ****  *
 141:usb_serial.c  ****  **************************************************************************/
 142:usb_serial.c  **** 
 143:usb_serial.c  **** // Descriptors are the data that your computer reads when it auto-detects
 144:usb_serial.c  **** // this USB device (called "enumeration" in USB lingo).  The most commonly
 145:usb_serial.c  **** // changed items are editable at the top of this file.  Changing things
 146:usb_serial.c  **** // in here should only be done by those who've read chapter 9 of the USB
 147:usb_serial.c  **** // spec and relevant portions of any USB class specifications!
 148:usb_serial.c  **** 
 149:usb_serial.c  **** static const uint8_t PROGMEM device_descriptor[] = {
 150:usb_serial.c  **** 	18,					// bLength
 151:usb_serial.c  **** 	1,					// bDescriptorType
 152:usb_serial.c  **** 	0x00, 0x02,				// bcdUSB
 153:usb_serial.c  **** 	2,					// bDeviceClass
 154:usb_serial.c  **** 	0,					// bDeviceSubClass
 155:usb_serial.c  **** 	0,					// bDeviceProtocol
 156:usb_serial.c  **** 	ENDPOINT0_SIZE,				// bMaxPacketSize0
 157:usb_serial.c  **** 	LSB(VENDOR_ID), MSB(VENDOR_ID),		// idVendor
 158:usb_serial.c  **** 	LSB(PRODUCT_ID), MSB(PRODUCT_ID),	// idProduct
 159:usb_serial.c  **** 	0x00, 0x01,				// bcdDevice
 160:usb_serial.c  **** 	1,					// iManufacturer
 161:usb_serial.c  **** 	2,					// iProduct
 162:usb_serial.c  **** 	3,					// iSerialNumber
 163:usb_serial.c  **** 	1					// bNumConfigurations
 164:usb_serial.c  **** };
 165:usb_serial.c  **** 
 166:usb_serial.c  **** #define CONFIG1_DESC_SIZE (9+9+5+5+4+5+7+9+7+7)
 167:usb_serial.c  **** static const uint8_t PROGMEM config1_descriptor[CONFIG1_DESC_SIZE] = {
 168:usb_serial.c  **** 	// configuration descriptor, USB spec 9.6.3, page 264-266, Table 9-10
 169:usb_serial.c  **** 	9, 					// bLength;
 170:usb_serial.c  **** 	2,					// bDescriptorType;
 171:usb_serial.c  **** 	LSB(CONFIG1_DESC_SIZE),			// wTotalLength
 172:usb_serial.c  **** 	MSB(CONFIG1_DESC_SIZE),
 173:usb_serial.c  **** 	2,					// bNumInterfaces
 174:usb_serial.c  **** 	1,					// bConfigurationValue
 175:usb_serial.c  **** 	0,					// iConfiguration
 176:usb_serial.c  **** 	0xC0,					// bmAttributes
 177:usb_serial.c  **** 	50,					// bMaxPower
 178:usb_serial.c  **** 	// interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
 179:usb_serial.c  **** 	9,					// bLength
 180:usb_serial.c  **** 	4,					// bDescriptorType
 181:usb_serial.c  **** 	0,					// bInterfaceNumber
 182:usb_serial.c  **** 	0,					// bAlternateSetting
 183:usb_serial.c  **** 	1,					// bNumEndpoints
 184:usb_serial.c  **** 	0x02,					// bInterfaceClass
 185:usb_serial.c  **** 	0x02,					// bInterfaceSubClass
 186:usb_serial.c  **** 	0x01,					// bInterfaceProtocol
 187:usb_serial.c  **** 	0,					// iInterface
 188:usb_serial.c  **** 	// CDC Header Functional Descriptor, CDC Spec 5.2.3.1, Table 26
 189:usb_serial.c  **** 	5,					// bFunctionLength
 190:usb_serial.c  **** 	0x24,					// bDescriptorType
 191:usb_serial.c  **** 	0x00,					// bDescriptorSubtype
 192:usb_serial.c  **** 	0x10, 0x01,				// bcdCDC
 193:usb_serial.c  **** 	// Call Management Functional Descriptor, CDC Spec 5.2.3.2, Table 27
 194:usb_serial.c  **** 	5,					// bFunctionLength
 195:usb_serial.c  **** 	0x24,					// bDescriptorType
 196:usb_serial.c  **** 	0x01,					// bDescriptorSubtype
 197:usb_serial.c  **** 	0x01,					// bmCapabilities
 198:usb_serial.c  **** 	1,					// bDataInterface
 199:usb_serial.c  **** 	// Abstract Control Management Functional Descriptor, CDC Spec 5.2.3.3, Table 28
 200:usb_serial.c  **** 	4,					// bFunctionLength
 201:usb_serial.c  **** 	0x24,					// bDescriptorType
 202:usb_serial.c  **** 	0x02,					// bDescriptorSubtype
 203:usb_serial.c  **** 	0x06,					// bmCapabilities
 204:usb_serial.c  **** 	// Union Functional Descriptor, CDC Spec 5.2.3.8, Table 33
 205:usb_serial.c  **** 	5,					// bFunctionLength
 206:usb_serial.c  **** 	0x24,					// bDescriptorType
 207:usb_serial.c  **** 	0x06,					// bDescriptorSubtype
 208:usb_serial.c  **** 	0,					// bMasterInterface
 209:usb_serial.c  **** 	1,					// bSlaveInterface0
 210:usb_serial.c  **** 	// endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
 211:usb_serial.c  **** 	7,					// bLength
 212:usb_serial.c  **** 	5,					// bDescriptorType
 213:usb_serial.c  **** 	CDC_ACM_ENDPOINT | 0x80,		// bEndpointAddress
 214:usb_serial.c  **** 	0x03,					// bmAttributes (0x03=intr)
 215:usb_serial.c  **** 	CDC_ACM_SIZE, 0,			// wMaxPacketSize
 216:usb_serial.c  **** 	64,					// bInterval
 217:usb_serial.c  **** 	// interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
 218:usb_serial.c  **** 	9,					// bLength
 219:usb_serial.c  **** 	4,					// bDescriptorType
 220:usb_serial.c  **** 	1,					// bInterfaceNumber
 221:usb_serial.c  **** 	0,					// bAlternateSetting
 222:usb_serial.c  **** 	2,					// bNumEndpoints
 223:usb_serial.c  **** 	0x0A,					// bInterfaceClass
 224:usb_serial.c  **** 	0x00,					// bInterfaceSubClass
 225:usb_serial.c  **** 	0x00,					// bInterfaceProtocol
 226:usb_serial.c  **** 	0,					// iInterface
 227:usb_serial.c  **** 	// endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
 228:usb_serial.c  **** 	7,					// bLength
 229:usb_serial.c  **** 	5,					// bDescriptorType
 230:usb_serial.c  **** 	CDC_RX_ENDPOINT,			// bEndpointAddress
 231:usb_serial.c  **** 	0x02,					// bmAttributes (0x02=bulk)
 232:usb_serial.c  **** 	CDC_RX_SIZE, 0,				// wMaxPacketSize
 233:usb_serial.c  **** 	0,					// bInterval
 234:usb_serial.c  **** 	// endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
 235:usb_serial.c  **** 	7,					// bLength
 236:usb_serial.c  **** 	5,					// bDescriptorType
 237:usb_serial.c  **** 	CDC_TX_ENDPOINT | 0x80,			// bEndpointAddress
 238:usb_serial.c  **** 	0x02,					// bmAttributes (0x02=bulk)
 239:usb_serial.c  **** 	CDC_TX_SIZE, 0,				// wMaxPacketSize
 240:usb_serial.c  **** 	0					// bInterval
 241:usb_serial.c  **** };
 242:usb_serial.c  **** 
 243:usb_serial.c  **** // If you're desperate for a little extra code memory, these strings
 244:usb_serial.c  **** // can be completely removed if iManufacturer, iProduct, iSerialNumber
 245:usb_serial.c  **** // in the device desciptor are changed to zeros.
 246:usb_serial.c  **** struct usb_string_descriptor_struct {
 247:usb_serial.c  **** 	uint8_t bLength;
 248:usb_serial.c  **** 	uint8_t bDescriptorType;
 249:usb_serial.c  **** 	int16_t wString[];
 250:usb_serial.c  **** };
 251:usb_serial.c  **** static const struct usb_string_descriptor_struct PROGMEM string0 = {
 252:usb_serial.c  **** 	4,
 253:usb_serial.c  **** 	3,
 254:usb_serial.c  **** 	{0x0409}
 255:usb_serial.c  **** };
 256:usb_serial.c  **** static const struct usb_string_descriptor_struct PROGMEM string1 = {
 257:usb_serial.c  **** 	sizeof(STR_MANUFACTURER),
 258:usb_serial.c  **** 	3,
 259:usb_serial.c  **** 	STR_MANUFACTURER
 260:usb_serial.c  **** };
 261:usb_serial.c  **** static const struct usb_string_descriptor_struct PROGMEM string2 = {
 262:usb_serial.c  **** 	sizeof(STR_PRODUCT),
 263:usb_serial.c  **** 	3,
 264:usb_serial.c  **** 	STR_PRODUCT
 265:usb_serial.c  **** };
 266:usb_serial.c  **** static const struct usb_string_descriptor_struct PROGMEM string3 = {
 267:usb_serial.c  **** 	sizeof(STR_SERIAL_NUMBER),
 268:usb_serial.c  **** 	3,
 269:usb_serial.c  **** 	STR_SERIAL_NUMBER
 270:usb_serial.c  **** };
 271:usb_serial.c  **** 
 272:usb_serial.c  **** // This table defines which descriptor data is sent for each specific
 273:usb_serial.c  **** // request from the host (in wValue and wIndex).
 274:usb_serial.c  **** static const struct descriptor_list_struct {
 275:usb_serial.c  **** 	uint16_t	wValue;
 276:usb_serial.c  **** 	uint16_t	wIndex;
 277:usb_serial.c  **** 	const uint8_t	*addr;
 278:usb_serial.c  **** 	uint8_t		length;
 279:usb_serial.c  **** } PROGMEM descriptor_list[] = {
 280:usb_serial.c  **** 	{0x0100, 0x0000, device_descriptor, sizeof(device_descriptor)},
 281:usb_serial.c  **** 	{0x0200, 0x0000, config1_descriptor, sizeof(config1_descriptor)},
 282:usb_serial.c  **** 	{0x0300, 0x0000, (const uint8_t *)&string0, 4},
 283:usb_serial.c  **** 	{0x0301, 0x0409, (const uint8_t *)&string1, sizeof(STR_MANUFACTURER)},
 284:usb_serial.c  **** 	{0x0302, 0x0409, (const uint8_t *)&string2, sizeof(STR_PRODUCT)},
 285:usb_serial.c  **** 	{0x0303, 0x0409, (const uint8_t *)&string3, sizeof(STR_SERIAL_NUMBER)}
 286:usb_serial.c  **** };
 287:usb_serial.c  **** #define NUM_DESC_LIST (sizeof(descriptor_list)/sizeof(struct descriptor_list_struct))
 288:usb_serial.c  **** 
 289:usb_serial.c  **** 
 290:usb_serial.c  **** /**************************************************************************
 291:usb_serial.c  ****  *
 292:usb_serial.c  ****  *  Variables - these are the only non-stack RAM usage
 293:usb_serial.c  ****  *
 294:usb_serial.c  ****  **************************************************************************/
 295:usb_serial.c  **** 
 296:usb_serial.c  **** // zero when we are not configured, non-zero when enumerated
 297:usb_serial.c  **** static volatile uint8_t usb_configuration=0;
 298:usb_serial.c  **** 
 299:usb_serial.c  **** // the time remaining before we transmit any partially full
 300:usb_serial.c  **** // packet, or send a zero length packet.
 301:usb_serial.c  **** static volatile uint8_t transmit_flush_timer=0;
 302:usb_serial.c  **** static uint8_t transmit_previous_timeout=0;
 303:usb_serial.c  **** 
 304:usb_serial.c  **** // serial port settings (baud rate, control signals, etc) set
 305:usb_serial.c  **** // by the PC.  These are ignored, but kept in RAM.
 306:usb_serial.c  **** static uint8_t cdc_line_coding[7]={0x00, 0xE1, 0x00, 0x00, 0x00, 0x00, 0x08};
 307:usb_serial.c  **** static uint8_t cdc_line_rtsdtr=0;
 308:usb_serial.c  **** 
 309:usb_serial.c  **** 
 310:usb_serial.c  **** /**************************************************************************
 311:usb_serial.c  ****  *
 312:usb_serial.c  ****  *  Public Functions - these are the API intended for the user
 313:usb_serial.c  ****  *
 314:usb_serial.c  ****  **************************************************************************/
 315:usb_serial.c  **** 
 316:usb_serial.c  **** // initialize USB serial
 317:usb_serial.c  **** void usb_init(void)
 318:usb_serial.c  **** {
 319:usb_serial.c  **** 	HW_CONFIG();
 320:usb_serial.c  ****         USB_FREEZE();				// enable USB
 321:usb_serial.c  ****         PLL_CONFIG();				// config PLL, 16 MHz xtal
 322:usb_serial.c  ****         while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 323:usb_serial.c  ****         USB_CONFIG();				// start USB clock
 324:usb_serial.c  ****         UDCON = 0;				// enable attach resistor
 325:usb_serial.c  **** 	usb_configuration = 0;
 326:usb_serial.c  **** 	cdc_line_rtsdtr = 0;
 327:usb_serial.c  ****         UDIEN = (1<<EORSTE)|(1<<SOFE);
 328:usb_serial.c  **** 	sei();
 329:usb_serial.c  **** }
 330:usb_serial.c  **** 
 331:usb_serial.c  **** // return 0 if the USB is not configured, or the configuration
 332:usb_serial.c  **** // number selected by the HOST
 333:usb_serial.c  **** uint8_t usb_configured(void)
 334:usb_serial.c  **** {
 335:usb_serial.c  **** 	return usb_configuration;
 336:usb_serial.c  **** }
 337:usb_serial.c  **** 
 338:usb_serial.c  **** // get the next character, or -1 if nothing received
 339:usb_serial.c  **** int16_t usb_serial_getchar(void)
 340:usb_serial.c  **** {
 341:usb_serial.c  **** 	uint8_t c, intr_state;
 342:usb_serial.c  **** 
 343:usb_serial.c  **** 	// interrupts are disabled so these functions can be
 344:usb_serial.c  **** 	// used from the main program or interrupt context,
 345:usb_serial.c  **** 	// even both in the same program!
 346:usb_serial.c  **** 	intr_state = SREG;
 347:usb_serial.c  **** 	cli();
 348:usb_serial.c  **** 	if (!usb_configuration) {
 349:usb_serial.c  **** 		SREG = intr_state;
 350:usb_serial.c  **** 		return -1;
 351:usb_serial.c  **** 	}
 352:usb_serial.c  **** 	UENUM = CDC_RX_ENDPOINT;
 353:usb_serial.c  **** 	retry:
 354:usb_serial.c  **** 	c = UEINTX;
 355:usb_serial.c  **** 	if (!(c & (1<<RWAL))) {
 356:usb_serial.c  **** 		// no data in buffer
 357:usb_serial.c  **** 		if (c & (1<<RXOUTI)) {
 358:usb_serial.c  **** 			UEINTX = 0x6B;
 359:usb_serial.c  **** 			goto retry;
 360:usb_serial.c  **** 		}	
 361:usb_serial.c  **** 		SREG = intr_state;
 362:usb_serial.c  **** 		return -1;
 363:usb_serial.c  **** 	}
 364:usb_serial.c  **** 	// take one byte out of the buffer
 365:usb_serial.c  **** 	c = UEDATX;
 366:usb_serial.c  **** 	// if buffer completely used, release it
 367:usb_serial.c  **** 	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
 368:usb_serial.c  **** 	SREG = intr_state;
 369:usb_serial.c  **** 	return c;
 370:usb_serial.c  **** }
 371:usb_serial.c  **** 
 372:usb_serial.c  **** // number of bytes available in the receive buffer
 373:usb_serial.c  **** uint8_t usb_serial_available(void)
 374:usb_serial.c  **** {
 375:usb_serial.c  **** 	uint8_t n=0, i, intr_state;
 376:usb_serial.c  **** 
 377:usb_serial.c  **** 	intr_state = SREG;
 378:usb_serial.c  **** 	cli();
 379:usb_serial.c  **** 	if (usb_configuration) {
 380:usb_serial.c  **** 		UENUM = CDC_RX_ENDPOINT;
 381:usb_serial.c  **** 		n = UEBCLX;
 382:usb_serial.c  **** 		if (!n) {
 383:usb_serial.c  **** 			i = UEINTX;
 384:usb_serial.c  **** 			if (i & (1<<RXOUTI) && !(i & (1<<RWAL))) UEINTX = 0x6B;
 385:usb_serial.c  **** 		}
 386:usb_serial.c  **** 	}
 387:usb_serial.c  **** 	SREG = intr_state;
 388:usb_serial.c  **** 	return n;
 389:usb_serial.c  **** }
 390:usb_serial.c  **** 
 391:usb_serial.c  **** // discard any buffered input
 392:usb_serial.c  **** void usb_serial_flush_input(void)
 393:usb_serial.c  **** {
 394:usb_serial.c  **** 	uint8_t intr_state;
 395:usb_serial.c  **** 
 396:usb_serial.c  **** 	if (usb_configuration) {
 397:usb_serial.c  **** 		intr_state = SREG;
 398:usb_serial.c  **** 		cli();
 399:usb_serial.c  **** 		UENUM = CDC_RX_ENDPOINT;
 400:usb_serial.c  **** 		while ((UEINTX & (1<<RWAL))) {
 401:usb_serial.c  **** 			UEINTX = 0x6B; 
 402:usb_serial.c  **** 		}
 403:usb_serial.c  **** 		SREG = intr_state;
 404:usb_serial.c  **** 	}
 405:usb_serial.c  **** }
 406:usb_serial.c  **** 
 407:usb_serial.c  **** // transmit a character.  0 returned on success, -1 on error
 408:usb_serial.c  **** int8_t usb_serial_putchar(uint8_t c)
 409:usb_serial.c  **** {
 410:usb_serial.c  **** 	uint8_t timeout, intr_state;
 411:usb_serial.c  **** 
 412:usb_serial.c  **** 	// if we're not online (enumerated and configured), error
 413:usb_serial.c  **** 	if (!usb_configuration) return -1;
 414:usb_serial.c  **** 	// interrupts are disabled so these functions can be
 415:usb_serial.c  **** 	// used from the main program or interrupt context,
 416:usb_serial.c  **** 	// even both in the same program!
 417:usb_serial.c  **** 	intr_state = SREG;
 418:usb_serial.c  **** 	cli();
 419:usb_serial.c  **** 	UENUM = CDC_TX_ENDPOINT;
 420:usb_serial.c  **** 	// if we gave up due to timeout before, don't wait again
 421:usb_serial.c  **** 	if (transmit_previous_timeout) {
 422:usb_serial.c  **** 		if (!(UEINTX & (1<<RWAL))) {
 423:usb_serial.c  **** 			SREG = intr_state;
 424:usb_serial.c  **** 			return -1;
 425:usb_serial.c  **** 		}
 426:usb_serial.c  **** 		transmit_previous_timeout = 0;
 427:usb_serial.c  **** 	}
 428:usb_serial.c  **** 	// wait for the FIFO to be ready to accept data
 429:usb_serial.c  **** 	timeout = UDFNUML + TRANSMIT_TIMEOUT;
 430:usb_serial.c  **** 	while (1) {
 431:usb_serial.c  **** 		// are we ready to transmit?
 432:usb_serial.c  **** 		if (UEINTX & (1<<RWAL)) break;
 433:usb_serial.c  **** 		SREG = intr_state;
 434:usb_serial.c  **** 		// have we waited too long?  This happens if the user
 435:usb_serial.c  **** 		// is not running an application that is listening
 436:usb_serial.c  **** 		if (UDFNUML == timeout) {
 437:usb_serial.c  **** 			transmit_previous_timeout = 1;
 438:usb_serial.c  **** 			return -1;
 439:usb_serial.c  **** 		}
 440:usb_serial.c  **** 		// has the USB gone offline?
 441:usb_serial.c  **** 		if (!usb_configuration) return -1;
 442:usb_serial.c  **** 		// get ready to try checking again
 443:usb_serial.c  **** 		intr_state = SREG;
 444:usb_serial.c  **** 		cli();
 445:usb_serial.c  **** 		UENUM = CDC_TX_ENDPOINT;
 446:usb_serial.c  **** 	}
 447:usb_serial.c  **** 	// actually write the byte into the FIFO
 448:usb_serial.c  **** 	UEDATX = c;
 449:usb_serial.c  **** 	// if this completed a packet, transmit it now!
 450:usb_serial.c  **** 	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 451:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 452:usb_serial.c  **** 	SREG = intr_state;
 453:usb_serial.c  **** 	return 0;
 454:usb_serial.c  **** }
 455:usb_serial.c  **** 
 456:usb_serial.c  **** 
 457:usb_serial.c  **** // transmit a character, but do not wait if the buffer is full,
 458:usb_serial.c  **** //   0 returned on success, -1 on buffer full or error 
 459:usb_serial.c  **** int8_t usb_serial_putchar_nowait(uint8_t c)
 460:usb_serial.c  **** {
 461:usb_serial.c  **** 	uint8_t intr_state;
 462:usb_serial.c  **** 
 463:usb_serial.c  **** 	if (!usb_configuration) return -1;
 464:usb_serial.c  **** 	intr_state = SREG;
 465:usb_serial.c  **** 	cli();
 466:usb_serial.c  **** 	UENUM = CDC_TX_ENDPOINT;
 467:usb_serial.c  **** 	if (!(UEINTX & (1<<RWAL))) {
 468:usb_serial.c  **** 		// buffer is full
 469:usb_serial.c  **** 		SREG = intr_state;
 470:usb_serial.c  **** 		return -1;
 471:usb_serial.c  **** 	}
 472:usb_serial.c  **** 	// actually write the byte into the FIFO
 473:usb_serial.c  **** 	UEDATX = c;
 474:usb_serial.c  **** 		// if this completed a packet, transmit it now!
 475:usb_serial.c  **** 	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 476:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 477:usb_serial.c  **** 	SREG = intr_state;
 478:usb_serial.c  **** 	return 0;
 479:usb_serial.c  **** }
 480:usb_serial.c  **** 
 481:usb_serial.c  **** // transmit a buffer.
 482:usb_serial.c  **** //  0 returned on success, -1 on error
 483:usb_serial.c  **** // This function is optimized for speed!  Each call takes approx 6.1 us overhead
 484:usb_serial.c  **** // plus 0.25 us per byte.  12 Mbit/sec USB has 8.67 us per-packet overhead and
 485:usb_serial.c  **** // takes 0.67 us per byte.  If called with 64 byte packet-size blocks, this function
 486:usb_serial.c  **** // can transmit at full USB speed using 43% CPU time.  The maximum theoretical speed
 487:usb_serial.c  **** // is 19 packets per USB frame, or 1216 kbytes/sec.  However, bulk endpoints have the
 488:usb_serial.c  **** // lowest priority, so any other USB devices will likely reduce the speed.  Speed
 489:usb_serial.c  **** // can also be limited by how quickly the PC-based software reads data, as the host
 490:usb_serial.c  **** // controller in the PC will not allocate bandwitdh without a pending read request.
 491:usb_serial.c  **** // (thanks to Victor Suarez for testing and feedback and initial code)
 492:usb_serial.c  **** 
 493:usb_serial.c  **** int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
 494:usb_serial.c  **** {
 495:usb_serial.c  **** 	uint8_t timeout, intr_state, write_size;
 496:usb_serial.c  **** 
 497:usb_serial.c  **** 	// if we're not online (enumerated and configured), error
 498:usb_serial.c  **** 	if (!usb_configuration) return -1;
 499:usb_serial.c  **** 	// interrupts are disabled so these functions can be
 500:usb_serial.c  **** 	// used from the main program or interrupt context,
 501:usb_serial.c  **** 	// even both in the same program!
 502:usb_serial.c  **** 	intr_state = SREG;
 503:usb_serial.c  **** 	cli();
 504:usb_serial.c  **** 	UENUM = CDC_TX_ENDPOINT;
 505:usb_serial.c  **** 	// if we gave up due to timeout before, don't wait again
 506:usb_serial.c  **** 	if (transmit_previous_timeout) {
 507:usb_serial.c  **** 		if (!(UEINTX & (1<<RWAL))) {
 508:usb_serial.c  **** 			SREG = intr_state;
 509:usb_serial.c  **** 			return -1;
 510:usb_serial.c  **** 		}
 511:usb_serial.c  **** 		transmit_previous_timeout = 0;
 512:usb_serial.c  **** 	}
 513:usb_serial.c  **** 	// each iteration of this loop transmits a packet
 514:usb_serial.c  **** 	while (size) {
 515:usb_serial.c  **** 		// wait for the FIFO to be ready to accept data
 516:usb_serial.c  **** 		timeout = UDFNUML + TRANSMIT_TIMEOUT;
 517:usb_serial.c  **** 		while (1) {
 518:usb_serial.c  **** 			// are we ready to transmit?
 519:usb_serial.c  **** 			if (UEINTX & (1<<RWAL)) break;
 520:usb_serial.c  **** 			SREG = intr_state;
 521:usb_serial.c  **** 			// have we waited too long?  This happens if the user
 522:usb_serial.c  **** 			// is not running an application that is listening
 523:usb_serial.c  **** 			if (UDFNUML == timeout) {
 524:usb_serial.c  **** 				transmit_previous_timeout = 1;
 525:usb_serial.c  **** 				return -1;
 526:usb_serial.c  **** 			}
 527:usb_serial.c  **** 			// has the USB gone offline?
 528:usb_serial.c  **** 			if (!usb_configuration) return -1;
 529:usb_serial.c  **** 			// get ready to try checking again
 530:usb_serial.c  **** 			intr_state = SREG;
 531:usb_serial.c  **** 			cli();
 532:usb_serial.c  **** 			UENUM = CDC_TX_ENDPOINT;
 533:usb_serial.c  **** 		}
 534:usb_serial.c  **** 
 535:usb_serial.c  **** 		// compute how many bytes will fit into the next packet
 536:usb_serial.c  **** 		write_size = CDC_TX_SIZE - UEBCLX;
 537:usb_serial.c  **** 		if (write_size > size) write_size = size;
 538:usb_serial.c  **** 		size -= write_size;
 539:usb_serial.c  **** 
 540:usb_serial.c  **** 		// write the packet
 541:usb_serial.c  **** 		switch (write_size) {
 542:usb_serial.c  **** 			#if (CDC_TX_SIZE == 64)
 543:usb_serial.c  **** 			case 64: UEDATX = *buffer++;
 544:usb_serial.c  **** 			case 63: UEDATX = *buffer++;
 545:usb_serial.c  **** 			case 62: UEDATX = *buffer++;
 546:usb_serial.c  **** 			case 61: UEDATX = *buffer++;
 547:usb_serial.c  **** 			case 60: UEDATX = *buffer++;
 548:usb_serial.c  **** 			case 59: UEDATX = *buffer++;
 549:usb_serial.c  **** 			case 58: UEDATX = *buffer++;
 550:usb_serial.c  **** 			case 57: UEDATX = *buffer++;
 551:usb_serial.c  **** 			case 56: UEDATX = *buffer++;
 552:usb_serial.c  **** 			case 55: UEDATX = *buffer++;
 553:usb_serial.c  **** 			case 54: UEDATX = *buffer++;
 554:usb_serial.c  **** 			case 53: UEDATX = *buffer++;
 555:usb_serial.c  **** 			case 52: UEDATX = *buffer++;
 556:usb_serial.c  **** 			case 51: UEDATX = *buffer++;
 557:usb_serial.c  **** 			case 50: UEDATX = *buffer++;
 558:usb_serial.c  **** 			case 49: UEDATX = *buffer++;
 559:usb_serial.c  **** 			case 48: UEDATX = *buffer++;
 560:usb_serial.c  **** 			case 47: UEDATX = *buffer++;
 561:usb_serial.c  **** 			case 46: UEDATX = *buffer++;
 562:usb_serial.c  **** 			case 45: UEDATX = *buffer++;
 563:usb_serial.c  **** 			case 44: UEDATX = *buffer++;
 564:usb_serial.c  **** 			case 43: UEDATX = *buffer++;
 565:usb_serial.c  **** 			case 42: UEDATX = *buffer++;
 566:usb_serial.c  **** 			case 41: UEDATX = *buffer++;
 567:usb_serial.c  **** 			case 40: UEDATX = *buffer++;
 568:usb_serial.c  **** 			case 39: UEDATX = *buffer++;
 569:usb_serial.c  **** 			case 38: UEDATX = *buffer++;
 570:usb_serial.c  **** 			case 37: UEDATX = *buffer++;
 571:usb_serial.c  **** 			case 36: UEDATX = *buffer++;
 572:usb_serial.c  **** 			case 35: UEDATX = *buffer++;
 573:usb_serial.c  **** 			case 34: UEDATX = *buffer++;
 574:usb_serial.c  **** 			case 33: UEDATX = *buffer++;
 575:usb_serial.c  **** 			#endif
 576:usb_serial.c  **** 			#if (CDC_TX_SIZE >= 32)
 577:usb_serial.c  **** 			case 32: UEDATX = *buffer++;
 578:usb_serial.c  **** 			case 31: UEDATX = *buffer++;
 579:usb_serial.c  **** 			case 30: UEDATX = *buffer++;
 580:usb_serial.c  **** 			case 29: UEDATX = *buffer++;
 581:usb_serial.c  **** 			case 28: UEDATX = *buffer++;
 582:usb_serial.c  **** 			case 27: UEDATX = *buffer++;
 583:usb_serial.c  **** 			case 26: UEDATX = *buffer++;
 584:usb_serial.c  **** 			case 25: UEDATX = *buffer++;
 585:usb_serial.c  **** 			case 24: UEDATX = *buffer++;
 586:usb_serial.c  **** 			case 23: UEDATX = *buffer++;
 587:usb_serial.c  **** 			case 22: UEDATX = *buffer++;
 588:usb_serial.c  **** 			case 21: UEDATX = *buffer++;
 589:usb_serial.c  **** 			case 20: UEDATX = *buffer++;
 590:usb_serial.c  **** 			case 19: UEDATX = *buffer++;
 591:usb_serial.c  **** 			case 18: UEDATX = *buffer++;
 592:usb_serial.c  **** 			case 17: UEDATX = *buffer++;
 593:usb_serial.c  **** 			#endif
 594:usb_serial.c  **** 			#if (CDC_TX_SIZE >= 16)
 595:usb_serial.c  **** 			case 16: UEDATX = *buffer++;
 596:usb_serial.c  **** 			case 15: UEDATX = *buffer++;
 597:usb_serial.c  **** 			case 14: UEDATX = *buffer++;
 598:usb_serial.c  **** 			case 13: UEDATX = *buffer++;
 599:usb_serial.c  **** 			case 12: UEDATX = *buffer++;
 600:usb_serial.c  **** 			case 11: UEDATX = *buffer++;
 601:usb_serial.c  **** 			case 10: UEDATX = *buffer++;
 602:usb_serial.c  **** 			case  9: UEDATX = *buffer++;
 603:usb_serial.c  **** 			#endif
 604:usb_serial.c  **** 			case  8: UEDATX = *buffer++;
 605:usb_serial.c  **** 			case  7: UEDATX = *buffer++;
 606:usb_serial.c  **** 			case  6: UEDATX = *buffer++;
 607:usb_serial.c  **** 			case  5: UEDATX = *buffer++;
 608:usb_serial.c  **** 			case  4: UEDATX = *buffer++;
 609:usb_serial.c  **** 			case  3: UEDATX = *buffer++;
 610:usb_serial.c  **** 			case  2: UEDATX = *buffer++;
 611:usb_serial.c  **** 			default:
 612:usb_serial.c  **** 			case  1: UEDATX = *buffer++;
 613:usb_serial.c  **** 			case  0: break;
 614:usb_serial.c  **** 		}
 615:usb_serial.c  **** 		// if this completed a packet, transmit it now!
 616:usb_serial.c  **** 		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 617:usb_serial.c  **** 		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 618:usb_serial.c  **** 		SREG = intr_state;
 619:usb_serial.c  **** 	}
 620:usb_serial.c  **** 	return 0;
 621:usb_serial.c  **** }
 622:usb_serial.c  **** 
 623:usb_serial.c  **** 
 624:usb_serial.c  **** // immediately transmit any buffered output.
 625:usb_serial.c  **** // This doesn't actually transmit the data - that is impossible!
 626:usb_serial.c  **** // USB devices only transmit when the host allows, so the best
 627:usb_serial.c  **** // we can do is release the FIFO buffer for when the host wants it
 628:usb_serial.c  **** void usb_serial_flush_output(void)
 629:usb_serial.c  **** {
 630:usb_serial.c  **** 	uint8_t intr_state;
 631:usb_serial.c  **** 
 632:usb_serial.c  **** 	intr_state = SREG;
 633:usb_serial.c  **** 	cli();
 634:usb_serial.c  **** 	if (transmit_flush_timer) {
 635:usb_serial.c  **** 		UENUM = CDC_TX_ENDPOINT;
 636:usb_serial.c  **** 		UEINTX = 0x3A;
 637:usb_serial.c  **** 		transmit_flush_timer = 0;
 638:usb_serial.c  **** 	}
 639:usb_serial.c  **** 	SREG = intr_state;
 640:usb_serial.c  **** }
 641:usb_serial.c  **** 
 642:usb_serial.c  **** // functions to read the various async serial settings.  These
 643:usb_serial.c  **** // aren't actually used by USB at all (communication is always
 644:usb_serial.c  **** // at full USB speed), but they are set by the host so we can
 645:usb_serial.c  **** // set them properly if we're converting the USB to a real serial
 646:usb_serial.c  **** // communication
 647:usb_serial.c  **** uint32_t usb_serial_get_baud(void)
 648:usb_serial.c  **** {
 649:usb_serial.c  **** 	return *(uint32_t *)cdc_line_coding;
 650:usb_serial.c  **** }
 651:usb_serial.c  **** uint8_t usb_serial_get_stopbits(void)
 652:usb_serial.c  **** {
 653:usb_serial.c  **** 	return cdc_line_coding[4];
 654:usb_serial.c  **** }
 655:usb_serial.c  **** uint8_t usb_serial_get_paritytype(void)
 656:usb_serial.c  **** {
 657:usb_serial.c  **** 	return cdc_line_coding[5];
 658:usb_serial.c  **** }
 659:usb_serial.c  **** uint8_t usb_serial_get_numbits(void)
 660:usb_serial.c  **** {
 661:usb_serial.c  **** 	return cdc_line_coding[6];
 662:usb_serial.c  **** }
 663:usb_serial.c  **** uint8_t usb_serial_get_control(void)
 664:usb_serial.c  **** {
 665:usb_serial.c  **** 	return cdc_line_rtsdtr;
 666:usb_serial.c  **** }
 667:usb_serial.c  **** // write the control signals, DCD, DSR, RI, etc
 668:usb_serial.c  **** // There is no CTS signal.  If software on the host has transmitted
 669:usb_serial.c  **** // data to you but you haven't been calling the getchar function,
 670:usb_serial.c  **** // it remains buffered (either here or on the host) and can not be
 671:usb_serial.c  **** // lost because you weren't listening at the right time, like it
 672:usb_serial.c  **** // would in real serial communication.
 673:usb_serial.c  **** int8_t usb_serial_set_control(uint8_t signals)
 674:usb_serial.c  **** {
 675:usb_serial.c  **** 	uint8_t intr_state;
 676:usb_serial.c  **** 
 677:usb_serial.c  **** 	intr_state = SREG;
 678:usb_serial.c  **** 	cli();
 679:usb_serial.c  **** 	if (!usb_configuration) {
 680:usb_serial.c  **** 		// we're not enumerated/configured
 681:usb_serial.c  **** 		SREG = intr_state;
 682:usb_serial.c  **** 		return -1;
 683:usb_serial.c  **** 	}
 684:usb_serial.c  **** 
 685:usb_serial.c  **** 	UENUM = CDC_ACM_ENDPOINT;
 686:usb_serial.c  **** 	if (!(UEINTX & (1<<RWAL))) {
 687:usb_serial.c  **** 		// unable to write
 688:usb_serial.c  **** 		// TODO; should this try to abort the previously
 689:usb_serial.c  **** 		// buffered message??
 690:usb_serial.c  **** 		SREG = intr_state;
 691:usb_serial.c  **** 		return -1;
 692:usb_serial.c  **** 	}
 693:usb_serial.c  **** 	UEDATX = 0xA1;
 694:usb_serial.c  **** 	UEDATX = 0x20;
 695:usb_serial.c  **** 	UEDATX = 0;
 696:usb_serial.c  **** 	UEDATX = 0;
 697:usb_serial.c  **** 	UEDATX = 0; // 0 seems to work nicely.  what if this is 1??
 698:usb_serial.c  **** 	UEDATX = 0;
 699:usb_serial.c  **** 	UEDATX = 1;
 700:usb_serial.c  **** 	UEDATX = 0;
 701:usb_serial.c  **** 	UEDATX = signals;
 702:usb_serial.c  **** 	UEINTX = 0x3A;
 703:usb_serial.c  **** 	SREG = intr_state;
 704:usb_serial.c  **** 	return 0;
 705:usb_serial.c  **** }
 706:usb_serial.c  **** 
 707:usb_serial.c  **** 
 708:usb_serial.c  **** 
 709:usb_serial.c  **** /**************************************************************************
 710:usb_serial.c  ****  *
 711:usb_serial.c  ****  *  Private Functions - not intended for general user consumption....
 712:usb_serial.c  ****  *
 713:usb_serial.c  ****  **************************************************************************/
 714:usb_serial.c  **** 
 715:usb_serial.c  **** 
 716:usb_serial.c  **** // USB Device Interrupt - handle all device-level events
 717:usb_serial.c  **** // the transmit buffer flushing is triggered by the start of frame
 718:usb_serial.c  **** //
 719:usb_serial.c  **** ISR(USB_GEN_vect)
 720:usb_serial.c  **** {
 721:usb_serial.c  **** 	uint8_t intbits, t;
 722:usb_serial.c  **** 
 723:usb_serial.c  ****         intbits = UDINT;
 724:usb_serial.c  ****         UDINT = 0;
 725:usb_serial.c  ****         if (intbits & (1<<EORSTI)) {
 726:usb_serial.c  **** 		UENUM = 0;
 727:usb_serial.c  **** 		UECONX = 1;
 728:usb_serial.c  **** 		UECFG0X = EP_TYPE_CONTROL;
 729:usb_serial.c  **** 		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 730:usb_serial.c  **** 		UEIENX = (1<<RXSTPE);
 731:usb_serial.c  **** 		usb_configuration = 0;
 732:usb_serial.c  **** 		cdc_line_rtsdtr = 0;
 733:usb_serial.c  ****         }
 734:usb_serial.c  **** 	if (intbits & (1<<SOFI)) {
 735:usb_serial.c  **** 		if (usb_configuration) {
 736:usb_serial.c  **** 			t = transmit_flush_timer;
 737:usb_serial.c  **** 			if (t) {
 738:usb_serial.c  **** 				transmit_flush_timer = --t;
 739:usb_serial.c  **** 				if (!t) {
 740:usb_serial.c  **** 					UENUM = CDC_TX_ENDPOINT;
 741:usb_serial.c  **** 					UEINTX = 0x3A;
 742:usb_serial.c  **** 				}
 743:usb_serial.c  **** 			}
 744:usb_serial.c  **** 		}
 745:usb_serial.c  **** 	}
 746:usb_serial.c  **** }
 747:usb_serial.c  **** 
 748:usb_serial.c  **** 
 749:usb_serial.c  **** // Misc functions to wait for ready and send/receive packets
 750:usb_serial.c  **** static inline void usb_wait_in_ready(void)
 751:usb_serial.c  **** {
  15               		.loc 1 751 1 view -0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  21               	.L2:
 752:usb_serial.c  **** 	while (!(UEINTX & (1<<TXINI))) ;
  22               		.loc 1 752 33 discriminator 1 view .LVU1
  23               		.loc 1 752 8 discriminator 1 view .LVU2
  24               		.loc 1 752 11 is_stmt 0 discriminator 1 view .LVU3
  25 0000 8091 E800 		lds r24,232
  26               		.loc 1 752 8 discriminator 1 view .LVU4
  27 0004 80FF      		sbrs r24,0
  28 0006 00C0      		rjmp .L2
  29               	/* epilogue start */
 753:usb_serial.c  **** }
  30               		.loc 1 753 1 view .LVU5
  31 0008 0895      		ret
  32               		.cfi_endproc
  33               	.LFE17:
  35               		.section	.text.usb_init,"ax",@progbits
  36               	.global	usb_init
  38               	usb_init:
  39               	.LFB1:
 318:usb_serial.c  **** 	HW_CONFIG();
  40               		.loc 1 318 1 is_stmt 1 view -0
  41               		.cfi_startproc
  42               	/* prologue: function */
  43               	/* frame size = 0 */
  44               	/* stack size = 0 */
  45               	.L__stack_usage = 0
 319:usb_serial.c  ****         USB_FREEZE();				// enable USB
  46               		.loc 1 319 2 view .LVU7
  47 0000 81E0      		ldi r24,lo8(1)
  48 0002 8093 D700 		sts 215,r24
 320:usb_serial.c  ****         PLL_CONFIG();				// config PLL, 16 MHz xtal
  49               		.loc 1 320 9 view .LVU8
  50 0006 80EA      		ldi r24,lo8(-96)
  51 0008 8093 D800 		sts 216,r24
 321:usb_serial.c  ****         while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
  52               		.loc 1 321 9 view .LVU9
  53 000c 82E1      		ldi r24,lo8(18)
  54 000e 89BD      		out 0x29,r24
 322:usb_serial.c  ****         USB_CONFIG();				// start USB clock
  55               		.loc 1 322 9 view .LVU10
  56               	.L6:
 322:usb_serial.c  ****         USB_CONFIG();				// start USB clock
  57               		.loc 1 322 40 discriminator 1 view .LVU11
 322:usb_serial.c  ****         USB_CONFIG();				// start USB clock
  58               		.loc 1 322 15 discriminator 1 view .LVU12
  59 0010 09B4      		in __tmp_reg__,0x29
  60 0012 00FE      		sbrs __tmp_reg__,0
  61 0014 00C0      		rjmp .L6
 323:usb_serial.c  ****         UDCON = 0;				// enable attach resistor
  62               		.loc 1 323 9 view .LVU13
  63 0016 80E9      		ldi r24,lo8(-112)
  64 0018 8093 D800 		sts 216,r24
 324:usb_serial.c  **** 	usb_configuration = 0;
  65               		.loc 1 324 9 view .LVU14
 324:usb_serial.c  **** 	usb_configuration = 0;
  66               		.loc 1 324 15 is_stmt 0 view .LVU15
  67 001c 1092 E000 		sts 224,__zero_reg__
 325:usb_serial.c  **** 	cdc_line_rtsdtr = 0;
  68               		.loc 1 325 2 is_stmt 1 view .LVU16
 325:usb_serial.c  **** 	cdc_line_rtsdtr = 0;
  69               		.loc 1 325 20 is_stmt 0 view .LVU17
  70 0020 1092 0000 		sts usb_configuration,__zero_reg__
 326:usb_serial.c  ****         UDIEN = (1<<EORSTE)|(1<<SOFE);
  71               		.loc 1 326 2 is_stmt 1 view .LVU18
 326:usb_serial.c  ****         UDIEN = (1<<EORSTE)|(1<<SOFE);
  72               		.loc 1 326 18 is_stmt 0 view .LVU19
  73 0024 1092 0000 		sts cdc_line_rtsdtr,__zero_reg__
 327:usb_serial.c  **** 	sei();
  74               		.loc 1 327 9 is_stmt 1 view .LVU20
 327:usb_serial.c  **** 	sei();
  75               		.loc 1 327 15 is_stmt 0 view .LVU21
  76 0028 8CE0      		ldi r24,lo8(12)
  77 002a 8093 E200 		sts 226,r24
 328:usb_serial.c  **** }
  78               		.loc 1 328 2 is_stmt 1 view .LVU22
  79               	/* #APP */
  80               	 ;  328 "usb_serial.c" 1
  81 002e 7894      		sei
  82               	 ;  0 "" 2
  83               	/* #NOAPP */
  84               	/* epilogue start */
 329:usb_serial.c  **** 
  85               		.loc 1 329 1 is_stmt 0 view .LVU23
  86 0030 0895      		ret
  87               		.cfi_endproc
  88               	.LFE1:
  90               		.section	.text.usb_configured,"ax",@progbits
  91               	.global	usb_configured
  93               	usb_configured:
  94               	.LFB2:
 334:usb_serial.c  **** 	return usb_configuration;
  95               		.loc 1 334 1 is_stmt 1 view -0
  96               		.cfi_startproc
  97               	/* prologue: function */
  98               	/* frame size = 0 */
  99               	/* stack size = 0 */
 100               	.L__stack_usage = 0
 335:usb_serial.c  **** }
 101               		.loc 1 335 2 view .LVU25
 335:usb_serial.c  **** }
 102               		.loc 1 335 9 is_stmt 0 view .LVU26
 103 0000 8091 0000 		lds r24,usb_configuration
 104               	/* epilogue start */
 336:usb_serial.c  **** 
 105               		.loc 1 336 1 view .LVU27
 106 0004 0895      		ret
 107               		.cfi_endproc
 108               	.LFE2:
 110               		.section	.text.usb_serial_getchar,"ax",@progbits
 111               	.global	usb_serial_getchar
 113               	usb_serial_getchar:
 114               	.LFB3:
 340:usb_serial.c  **** 	uint8_t c, intr_state;
 115               		.loc 1 340 1 is_stmt 1 view -0
 116               		.cfi_startproc
 117               	/* prologue: function */
 118               	/* frame size = 0 */
 119               	/* stack size = 0 */
 120               	.L__stack_usage = 0
 341:usb_serial.c  **** 
 121               		.loc 1 341 2 view .LVU29
 346:usb_serial.c  **** 	cli();
 122               		.loc 1 346 2 view .LVU30
 346:usb_serial.c  **** 	cli();
 123               		.loc 1 346 13 is_stmt 0 view .LVU31
 124 0000 9FB7      		in r25,__SREG__
 125               	.LVL0:
 347:usb_serial.c  **** 	if (!usb_configuration) {
 126               		.loc 1 347 2 is_stmt 1 view .LVU32
 127               	/* #APP */
 128               	 ;  347 "usb_serial.c" 1
 129 0002 F894      		cli
 130               	 ;  0 "" 2
 348:usb_serial.c  **** 		SREG = intr_state;
 131               		.loc 1 348 2 view .LVU33
 348:usb_serial.c  **** 		SREG = intr_state;
 132               		.loc 1 348 6 is_stmt 0 view .LVU34
 133               	/* #NOAPP */
 134 0004 8091 0000 		lds r24,usb_configuration
 348:usb_serial.c  **** 		SREG = intr_state;
 135               		.loc 1 348 5 view .LVU35
 136 0008 8111      		cpse r24,__zero_reg__
 137 000a 00C0      		rjmp .L11
 138               	.L15:
 361:usb_serial.c  **** 		return -1;
 139               		.loc 1 361 3 is_stmt 1 view .LVU36
 361:usb_serial.c  **** 		return -1;
 140               		.loc 1 361 8 is_stmt 0 view .LVU37
 141 000c 9FBF      		out __SREG__,r25
 362:usb_serial.c  **** 	}
 142               		.loc 1 362 3 is_stmt 1 view .LVU38
 362:usb_serial.c  **** 	}
 143               		.loc 1 362 10 is_stmt 0 view .LVU39
 144 000e 8FEF      		ldi r24,lo8(-1)
 145 0010 9FEF      		ldi r25,lo8(-1)
 146 0012 0895      		ret
 147               	.L11:
 352:usb_serial.c  **** 	retry:
 148               		.loc 1 352 2 is_stmt 1 view .LVU40
 352:usb_serial.c  **** 	retry:
 149               		.loc 1 352 8 is_stmt 0 view .LVU41
 150 0014 83E0      		ldi r24,lo8(3)
 151 0016 8093 E900 		sts 233,r24
 358:usb_serial.c  **** 			goto retry;
 152               		.loc 1 358 11 view .LVU42
 153 001a 2BE6      		ldi r18,lo8(107)
 154               	.L13:
 354:usb_serial.c  **** 	if (!(c & (1<<RWAL))) {
 155               		.loc 1 354 2 is_stmt 1 view .LVU43
 354:usb_serial.c  **** 	if (!(c & (1<<RWAL))) {
 156               		.loc 1 354 4 is_stmt 0 view .LVU44
 157 001c 8091 E800 		lds r24,232
 158               	.LVL1:
 355:usb_serial.c  **** 		// no data in buffer
 159               		.loc 1 355 2 is_stmt 1 view .LVU45
 355:usb_serial.c  **** 		// no data in buffer
 160               		.loc 1 355 5 is_stmt 0 view .LVU46
 161 0020 85FD      		sbrc r24,5
 162 0022 00C0      		rjmp .L14
 357:usb_serial.c  **** 			UEINTX = 0x6B;
 163               		.loc 1 357 3 is_stmt 1 view .LVU47
 357:usb_serial.c  **** 			UEINTX = 0x6B;
 164               		.loc 1 357 6 is_stmt 0 view .LVU48
 165 0024 82FF      		sbrs r24,2
 166 0026 00C0      		rjmp .L15
 358:usb_serial.c  **** 			goto retry;
 167               		.loc 1 358 4 is_stmt 1 view .LVU49
 358:usb_serial.c  **** 			goto retry;
 168               		.loc 1 358 11 is_stmt 0 view .LVU50
 169 0028 2093 E800 		sts 232,r18
 359:usb_serial.c  **** 		}	
 170               		.loc 1 359 4 is_stmt 1 view .LVU51
 171 002c 00C0      		rjmp .L13
 172               	.L14:
 365:usb_serial.c  **** 	// if buffer completely used, release it
 173               		.loc 1 365 2 view .LVU52
 365:usb_serial.c  **** 	// if buffer completely used, release it
 174               		.loc 1 365 4 is_stmt 0 view .LVU53
 175 002e 8091 F100 		lds r24,241
 176               	.LVL2:
 367:usb_serial.c  **** 	SREG = intr_state;
 177               		.loc 1 367 2 is_stmt 1 view .LVU54
 367:usb_serial.c  **** 	SREG = intr_state;
 178               		.loc 1 367 8 is_stmt 0 view .LVU55
 179 0032 2091 E800 		lds r18,232
 367:usb_serial.c  **** 	SREG = intr_state;
 180               		.loc 1 367 5 view .LVU56
 181 0036 25FD      		sbrc r18,5
 182 0038 00C0      		rjmp .L16
 367:usb_serial.c  **** 	SREG = intr_state;
 183               		.loc 1 367 29 is_stmt 1 discriminator 1 view .LVU57
 367:usb_serial.c  **** 	SREG = intr_state;
 184               		.loc 1 367 36 is_stmt 0 discriminator 1 view .LVU58
 185 003a 2BE6      		ldi r18,lo8(107)
 186 003c 2093 E800 		sts 232,r18
 187               	.L16:
 368:usb_serial.c  **** 	return c;
 188               		.loc 1 368 2 is_stmt 1 view .LVU59
 368:usb_serial.c  **** 	return c;
 189               		.loc 1 368 7 is_stmt 0 view .LVU60
 190 0040 9FBF      		out __SREG__,r25
 369:usb_serial.c  **** }
 191               		.loc 1 369 2 is_stmt 1 view .LVU61
 369:usb_serial.c  **** }
 192               		.loc 1 369 9 is_stmt 0 view .LVU62
 193 0042 90E0      		ldi r25,0
 194               	.LVL3:
 195               	/* epilogue start */
 370:usb_serial.c  **** 
 196               		.loc 1 370 1 view .LVU63
 197 0044 0895      		ret
 198               		.cfi_endproc
 199               	.LFE3:
 201               		.section	.text.usb_serial_available,"ax",@progbits
 202               	.global	usb_serial_available
 204               	usb_serial_available:
 205               	.LFB4:
 374:usb_serial.c  **** 	uint8_t n=0, i, intr_state;
 206               		.loc 1 374 1 is_stmt 1 view -0
 207               		.cfi_startproc
 208               	/* prologue: function */
 209               	/* frame size = 0 */
 210               	/* stack size = 0 */
 211               	.L__stack_usage = 0
 375:usb_serial.c  **** 
 212               		.loc 1 375 2 view .LVU65
 213               	.LVL4:
 377:usb_serial.c  **** 	cli();
 214               		.loc 1 377 2 view .LVU66
 377:usb_serial.c  **** 	cli();
 215               		.loc 1 377 13 is_stmt 0 view .LVU67
 216 0000 2FB7      		in r18,__SREG__
 217               	.LVL5:
 378:usb_serial.c  **** 	if (usb_configuration) {
 218               		.loc 1 378 2 is_stmt 1 view .LVU68
 219               	/* #APP */
 220               	 ;  378 "usb_serial.c" 1
 221 0002 F894      		cli
 222               	 ;  0 "" 2
 379:usb_serial.c  **** 		UENUM = CDC_RX_ENDPOINT;
 223               		.loc 1 379 2 view .LVU69
 379:usb_serial.c  **** 		UENUM = CDC_RX_ENDPOINT;
 224               		.loc 1 379 6 is_stmt 0 view .LVU70
 225               	/* #NOAPP */
 226 0004 8091 0000 		lds r24,usb_configuration
 379:usb_serial.c  **** 		UENUM = CDC_RX_ENDPOINT;
 227               		.loc 1 379 5 view .LVU71
 228 0008 8111      		cpse r24,__zero_reg__
 229 000a 00C0      		rjmp .L18
 230               	.LVL6:
 231               	.L20:
 375:usb_serial.c  **** 
 232               		.loc 1 375 10 view .LVU72
 233 000c 80E0      		ldi r24,0
 234               	.L19:
 235               	.LVL7:
 387:usb_serial.c  **** 	return n;
 236               		.loc 1 387 2 is_stmt 1 view .LVU73
 387:usb_serial.c  **** 	return n;
 237               		.loc 1 387 7 is_stmt 0 view .LVU74
 238 000e 2FBF      		out __SREG__,r18
 388:usb_serial.c  **** }
 239               		.loc 1 388 2 is_stmt 1 view .LVU75
 240               	/* epilogue start */
 389:usb_serial.c  **** 
 241               		.loc 1 389 1 is_stmt 0 view .LVU76
 242 0010 0895      		ret
 243               	.LVL8:
 244               	.L18:
 380:usb_serial.c  **** 		n = UEBCLX;
 245               		.loc 1 380 3 is_stmt 1 view .LVU77
 380:usb_serial.c  **** 		n = UEBCLX;
 246               		.loc 1 380 9 is_stmt 0 view .LVU78
 247 0012 83E0      		ldi r24,lo8(3)
 248 0014 8093 E900 		sts 233,r24
 381:usb_serial.c  **** 		if (!n) {
 249               		.loc 1 381 3 is_stmt 1 view .LVU79
 381:usb_serial.c  **** 		if (!n) {
 250               		.loc 1 381 5 is_stmt 0 view .LVU80
 251 0018 8091 F200 		lds r24,242
 252               	.LVL9:
 382:usb_serial.c  **** 			i = UEINTX;
 253               		.loc 1 382 3 is_stmt 1 view .LVU81
 382:usb_serial.c  **** 			i = UEINTX;
 254               		.loc 1 382 6 is_stmt 0 view .LVU82
 255 001c 8111      		cpse r24,__zero_reg__
 256 001e 00C0      		rjmp .L19
 383:usb_serial.c  **** 			if (i & (1<<RXOUTI) && !(i & (1<<RWAL))) UEINTX = 0x6B;
 257               		.loc 1 383 4 is_stmt 1 view .LVU83
 383:usb_serial.c  **** 			if (i & (1<<RXOUTI) && !(i & (1<<RWAL))) UEINTX = 0x6B;
 258               		.loc 1 383 6 is_stmt 0 view .LVU84
 259 0020 9091 E800 		lds r25,232
 260               	.LVL10:
 384:usb_serial.c  **** 		}
 261               		.loc 1 384 4 is_stmt 1 view .LVU85
 384:usb_serial.c  **** 		}
 262               		.loc 1 384 7 is_stmt 0 view .LVU86
 263 0024 92FF      		sbrs r25,2
 264 0026 00C0      		rjmp .L20
 384:usb_serial.c  **** 		}
 265               		.loc 1 384 24 discriminator 1 view .LVU87
 266 0028 892F      		mov r24,r25
 267               	.LVL11:
 384:usb_serial.c  **** 		}
 268               		.loc 1 384 24 discriminator 1 view .LVU88
 269 002a 8072      		andi r24,lo8(32)
 270 002c 95FD      		sbrc r25,5
 271 002e 00C0      		rjmp .L20
 384:usb_serial.c  **** 		}
 272               		.loc 1 384 45 is_stmt 1 discriminator 2 view .LVU89
 384:usb_serial.c  **** 		}
 273               		.loc 1 384 52 is_stmt 0 discriminator 2 view .LVU90
 274 0030 9BE6      		ldi r25,lo8(107)
 275               	.LVL12:
 384:usb_serial.c  **** 		}
 276               		.loc 1 384 52 discriminator 2 view .LVU91
 277 0032 9093 E800 		sts 232,r25
 278 0036 00C0      		rjmp .L19
 279               		.cfi_endproc
 280               	.LFE4:
 282               		.section	.text.usb_serial_flush_input,"ax",@progbits
 283               	.global	usb_serial_flush_input
 285               	usb_serial_flush_input:
 286               	.LFB5:
 393:usb_serial.c  **** 	uint8_t intr_state;
 287               		.loc 1 393 1 is_stmt 1 view -0
 288               		.cfi_startproc
 289               	/* prologue: function */
 290               	/* frame size = 0 */
 291               	/* stack size = 0 */
 292               	.L__stack_usage = 0
 394:usb_serial.c  **** 
 293               		.loc 1 394 2 view .LVU93
 396:usb_serial.c  **** 		intr_state = SREG;
 294               		.loc 1 396 2 view .LVU94
 396:usb_serial.c  **** 		intr_state = SREG;
 295               		.loc 1 396 6 is_stmt 0 view .LVU95
 296 0000 8091 0000 		lds r24,usb_configuration
 396:usb_serial.c  **** 		intr_state = SREG;
 297               		.loc 1 396 5 view .LVU96
 298 0004 8823      		tst r24
 299 0006 01F0      		breq .L24
 397:usb_serial.c  **** 		cli();
 300               		.loc 1 397 3 is_stmt 1 view .LVU97
 397:usb_serial.c  **** 		cli();
 301               		.loc 1 397 14 is_stmt 0 view .LVU98
 302 0008 8FB7      		in r24,__SREG__
 303               	.LVL13:
 398:usb_serial.c  **** 		UENUM = CDC_RX_ENDPOINT;
 304               		.loc 1 398 3 is_stmt 1 view .LVU99
 305               	/* #APP */
 306               	 ;  398 "usb_serial.c" 1
 307 000a F894      		cli
 308               	 ;  0 "" 2
 399:usb_serial.c  **** 		while ((UEINTX & (1<<RWAL))) {
 309               		.loc 1 399 3 view .LVU100
 399:usb_serial.c  **** 		while ((UEINTX & (1<<RWAL))) {
 310               		.loc 1 399 9 is_stmt 0 view .LVU101
 311               	/* #NOAPP */
 312 000c 93E0      		ldi r25,lo8(3)
 313 000e 9093 E900 		sts 233,r25
 400:usb_serial.c  **** 			UEINTX = 0x6B; 
 314               		.loc 1 400 3 is_stmt 1 view .LVU102
 401:usb_serial.c  **** 		}
 315               		.loc 1 401 11 is_stmt 0 view .LVU103
 316 0012 2BE6      		ldi r18,lo8(107)
 317               	.L26:
 400:usb_serial.c  **** 			UEINTX = 0x6B; 
 318               		.loc 1 400 9 is_stmt 1 view .LVU104
 400:usb_serial.c  **** 			UEINTX = 0x6B; 
 319               		.loc 1 400 11 is_stmt 0 view .LVU105
 320 0014 9091 E800 		lds r25,232
 400:usb_serial.c  **** 			UEINTX = 0x6B; 
 321               		.loc 1 400 9 view .LVU106
 322 0018 95FD      		sbrc r25,5
 323 001a 00C0      		rjmp .L27
 403:usb_serial.c  **** 	}
 324               		.loc 1 403 3 is_stmt 1 view .LVU107
 403:usb_serial.c  **** 	}
 325               		.loc 1 403 8 is_stmt 0 view .LVU108
 326 001c 8FBF      		out __SREG__,r24
 327               	.LVL14:
 328               	.L24:
 329               	/* epilogue start */
 405:usb_serial.c  **** 
 330               		.loc 1 405 1 view .LVU109
 331 001e 0895      		ret
 332               	.LVL15:
 333               	.L27:
 401:usb_serial.c  **** 		}
 334               		.loc 1 401 4 is_stmt 1 view .LVU110
 401:usb_serial.c  **** 		}
 335               		.loc 1 401 11 is_stmt 0 view .LVU111
 336 0020 2093 E800 		sts 232,r18
 337 0024 00C0      		rjmp .L26
 338               		.cfi_endproc
 339               	.LFE5:
 341               		.section	.text.usb_serial_putchar,"ax",@progbits
 342               	.global	usb_serial_putchar
 344               	usb_serial_putchar:
 345               	.LVL16:
 346               	.LFB6:
 409:usb_serial.c  **** 	uint8_t timeout, intr_state;
 347               		.loc 1 409 1 is_stmt 1 view -0
 348               		.cfi_startproc
 349               	/* prologue: function */
 350               	/* frame size = 0 */
 351               	/* stack size = 0 */
 352               	.L__stack_usage = 0
 410:usb_serial.c  **** 
 353               		.loc 1 410 2 view .LVU113
 413:usb_serial.c  **** 	// interrupts are disabled so these functions can be
 354               		.loc 1 413 2 view .LVU114
 413:usb_serial.c  **** 	// interrupts are disabled so these functions can be
 355               		.loc 1 413 6 is_stmt 0 view .LVU115
 356 0000 9091 0000 		lds r25,usb_configuration
 413:usb_serial.c  **** 	// interrupts are disabled so these functions can be
 357               		.loc 1 413 5 view .LVU116
 358 0004 9111      		cpse r25,__zero_reg__
 359 0006 00C0      		rjmp .L32
 360               	.LVL17:
 361               	.L47:
 424:usb_serial.c  **** 		}
 362               		.loc 1 424 4 is_stmt 1 view .LVU117
 424:usb_serial.c  **** 		}
 363               		.loc 1 424 11 is_stmt 0 view .LVU118
 364 0008 8FEF      		ldi r24,lo8(-1)
 365 000a 0895      		ret
 366               	.LVL18:
 367               	.L32:
 417:usb_serial.c  **** 	cli();
 368               		.loc 1 417 2 is_stmt 1 view .LVU119
 417:usb_serial.c  **** 	cli();
 369               		.loc 1 417 13 is_stmt 0 view .LVU120
 370 000c 9FB7      		in r25,__SREG__
 371               	.LVL19:
 418:usb_serial.c  **** 	UENUM = CDC_TX_ENDPOINT;
 372               		.loc 1 418 2 is_stmt 1 view .LVU121
 373               	/* #APP */
 374               	 ;  418 "usb_serial.c" 1
 375 000e F894      		cli
 376               	 ;  0 "" 2
 419:usb_serial.c  **** 	// if we gave up due to timeout before, don't wait again
 377               		.loc 1 419 2 view .LVU122
 419:usb_serial.c  **** 	// if we gave up due to timeout before, don't wait again
 378               		.loc 1 419 8 is_stmt 0 view .LVU123
 379               	/* #NOAPP */
 380 0010 24E0      		ldi r18,lo8(4)
 381 0012 2093 E900 		sts 233,r18
 421:usb_serial.c  **** 		if (!(UEINTX & (1<<RWAL))) {
 382               		.loc 1 421 2 is_stmt 1 view .LVU124
 421:usb_serial.c  **** 		if (!(UEINTX & (1<<RWAL))) {
 383               		.loc 1 421 5 is_stmt 0 view .LVU125
 384 0016 2091 0000 		lds r18,transmit_previous_timeout
 385 001a 2223      		tst r18
 386 001c 01F0      		breq .L34
 422:usb_serial.c  **** 			SREG = intr_state;
 387               		.loc 1 422 3 is_stmt 1 view .LVU126
 422:usb_serial.c  **** 			SREG = intr_state;
 388               		.loc 1 422 9 is_stmt 0 view .LVU127
 389 001e 2091 E800 		lds r18,232
 422:usb_serial.c  **** 			SREG = intr_state;
 390               		.loc 1 422 6 view .LVU128
 391 0022 25FD      		sbrc r18,5
 392 0024 00C0      		rjmp .L35
 423:usb_serial.c  **** 			return -1;
 393               		.loc 1 423 4 is_stmt 1 view .LVU129
 423:usb_serial.c  **** 			return -1;
 394               		.loc 1 423 9 is_stmt 0 view .LVU130
 395 0026 9FBF      		out __SREG__,r25
 396 0028 00C0      		rjmp .L47
 397               	.L35:
 426:usb_serial.c  **** 	}
 398               		.loc 1 426 3 is_stmt 1 view .LVU131
 426:usb_serial.c  **** 	}
 399               		.loc 1 426 29 is_stmt 0 view .LVU132
 400 002a 1092 0000 		sts transmit_previous_timeout,__zero_reg__
 401               	.L34:
 429:usb_serial.c  **** 	while (1) {
 402               		.loc 1 429 2 is_stmt 1 view .LVU133
 429:usb_serial.c  **** 	while (1) {
 403               		.loc 1 429 12 is_stmt 0 view .LVU134
 404 002e 2091 E400 		lds r18,228
 429:usb_serial.c  **** 	while (1) {
 405               		.loc 1 429 10 view .LVU135
 406 0032 275E      		subi r18,lo8(-(25))
 407               	.LVL20:
 445:usb_serial.c  **** 	}
 408               		.loc 1 445 9 view .LVU136
 409 0034 34E0      		ldi r19,lo8(4)
 410               	.L39:
 430:usb_serial.c  **** 		// are we ready to transmit?
 411               		.loc 1 430 2 is_stmt 1 view .LVU137
 432:usb_serial.c  **** 		SREG = intr_state;
 412               		.loc 1 432 3 view .LVU138
 432:usb_serial.c  **** 		SREG = intr_state;
 413               		.loc 1 432 7 is_stmt 0 view .LVU139
 414 0036 4091 E800 		lds r20,232
 432:usb_serial.c  **** 		SREG = intr_state;
 415               		.loc 1 432 6 view .LVU140
 416 003a 45FD      		sbrc r20,5
 417 003c 00C0      		rjmp .L36
 433:usb_serial.c  **** 		// have we waited too long?  This happens if the user
 418               		.loc 1 433 3 is_stmt 1 view .LVU141
 433:usb_serial.c  **** 		// have we waited too long?  This happens if the user
 419               		.loc 1 433 8 is_stmt 0 view .LVU142
 420 003e 9FBF      		out __SREG__,r25
 436:usb_serial.c  **** 			transmit_previous_timeout = 1;
 421               		.loc 1 436 3 is_stmt 1 view .LVU143
 436:usb_serial.c  **** 			transmit_previous_timeout = 1;
 422               		.loc 1 436 7 is_stmt 0 view .LVU144
 423 0040 9091 E400 		lds r25,228
 424               	.LVL21:
 436:usb_serial.c  **** 			transmit_previous_timeout = 1;
 425               		.loc 1 436 6 view .LVU145
 426 0044 9213      		cpse r25,r18
 427 0046 00C0      		rjmp .L37
 437:usb_serial.c  **** 			return -1;
 428               		.loc 1 437 4 is_stmt 1 view .LVU146
 437:usb_serial.c  **** 			return -1;
 429               		.loc 1 437 30 is_stmt 0 view .LVU147
 430 0048 81E0      		ldi r24,lo8(1)
 431               	.LVL22:
 437:usb_serial.c  **** 			return -1;
 432               		.loc 1 437 30 view .LVU148
 433 004a 8093 0000 		sts transmit_previous_timeout,r24
 434               	.LVL23:
 438:usb_serial.c  **** 		}
 435               		.loc 1 438 4 is_stmt 1 view .LVU149
 436 004e 00C0      		rjmp .L47
 437               	.LVL24:
 438               	.L37:
 441:usb_serial.c  **** 		// get ready to try checking again
 439               		.loc 1 441 3 view .LVU150
 441:usb_serial.c  **** 		// get ready to try checking again
 440               		.loc 1 441 7 is_stmt 0 view .LVU151
 441 0050 9091 0000 		lds r25,usb_configuration
 441:usb_serial.c  **** 		// get ready to try checking again
 442               		.loc 1 441 6 view .LVU152
 443 0054 9923      		tst r25
 444 0056 01F0      		breq .L47
 443:usb_serial.c  **** 		cli();
 445               		.loc 1 443 3 is_stmt 1 view .LVU153
 443:usb_serial.c  **** 		cli();
 446               		.loc 1 443 14 is_stmt 0 view .LVU154
 447 0058 9FB7      		in r25,__SREG__
 448               	.LVL25:
 444:usb_serial.c  **** 		UENUM = CDC_TX_ENDPOINT;
 449               		.loc 1 444 3 is_stmt 1 view .LVU155
 450               	/* #APP */
 451               	 ;  444 "usb_serial.c" 1
 452 005a F894      		cli
 453               	 ;  0 "" 2
 445:usb_serial.c  **** 	}
 454               		.loc 1 445 3 view .LVU156
 445:usb_serial.c  **** 	}
 455               		.loc 1 445 9 is_stmt 0 view .LVU157
 456               	/* #NOAPP */
 457 005c 3093 E900 		sts 233,r19
 430:usb_serial.c  **** 		// are we ready to transmit?
 458               		.loc 1 430 8 is_stmt 1 view .LVU158
 432:usb_serial.c  **** 		SREG = intr_state;
 459               		.loc 1 432 6 is_stmt 0 view .LVU159
 460 0060 00C0      		rjmp .L39
 461               	.L36:
 448:usb_serial.c  **** 	// if this completed a packet, transmit it now!
 462               		.loc 1 448 2 is_stmt 1 view .LVU160
 448:usb_serial.c  **** 	// if this completed a packet, transmit it now!
 463               		.loc 1 448 9 is_stmt 0 view .LVU161
 464 0062 8093 F100 		sts 241,r24
 450:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 465               		.loc 1 450 2 is_stmt 1 view .LVU162
 450:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 466               		.loc 1 450 8 is_stmt 0 view .LVU163
 467 0066 8091 E800 		lds r24,232
 468               	.LVL26:
 450:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 469               		.loc 1 450 5 view .LVU164
 470 006a 85FD      		sbrc r24,5
 471 006c 00C0      		rjmp .L40
 450:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 472               		.loc 1 450 29 is_stmt 1 discriminator 1 view .LVU165
 450:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 473               		.loc 1 450 36 is_stmt 0 discriminator 1 view .LVU166
 474 006e 8AE3      		ldi r24,lo8(58)
 475 0070 8093 E800 		sts 232,r24
 476               	.LVL27:
 477               	.L40:
 451:usb_serial.c  **** 	SREG = intr_state;
 478               		.loc 1 451 2 is_stmt 1 view .LVU167
 451:usb_serial.c  **** 	SREG = intr_state;
 479               		.loc 1 451 23 is_stmt 0 view .LVU168
 480 0074 85E0      		ldi r24,lo8(5)
 481 0076 8093 0000 		sts transmit_flush_timer,r24
 452:usb_serial.c  **** 	return 0;
 482               		.loc 1 452 2 is_stmt 1 view .LVU169
 452:usb_serial.c  **** 	return 0;
 483               		.loc 1 452 7 is_stmt 0 view .LVU170
 484 007a 9FBF      		out __SREG__,r25
 453:usb_serial.c  **** }
 485               		.loc 1 453 2 is_stmt 1 view .LVU171
 453:usb_serial.c  **** }
 486               		.loc 1 453 9 is_stmt 0 view .LVU172
 487 007c 80E0      		ldi r24,0
 488               	/* epilogue start */
 454:usb_serial.c  **** 
 489               		.loc 1 454 1 view .LVU173
 490 007e 0895      		ret
 491               		.cfi_endproc
 492               	.LFE6:
 494               		.section	.text.usb_serial_putchar_nowait,"ax",@progbits
 495               	.global	usb_serial_putchar_nowait
 497               	usb_serial_putchar_nowait:
 498               	.LVL28:
 499               	.LFB7:
 460:usb_serial.c  **** 	uint8_t intr_state;
 500               		.loc 1 460 1 is_stmt 1 view -0
 501               		.cfi_startproc
 502               	/* prologue: function */
 503               	/* frame size = 0 */
 504               	/* stack size = 0 */
 505               	.L__stack_usage = 0
 461:usb_serial.c  **** 
 506               		.loc 1 461 2 view .LVU175
 463:usb_serial.c  **** 	intr_state = SREG;
 507               		.loc 1 463 2 view .LVU176
 463:usb_serial.c  **** 	intr_state = SREG;
 508               		.loc 1 463 6 is_stmt 0 view .LVU177
 509 0000 9091 0000 		lds r25,usb_configuration
 463:usb_serial.c  **** 	intr_state = SREG;
 510               		.loc 1 463 5 view .LVU178
 511 0004 9923      		tst r25
 512 0006 01F0      		breq .L52
 464:usb_serial.c  **** 	cli();
 513               		.loc 1 464 2 is_stmt 1 view .LVU179
 464:usb_serial.c  **** 	cli();
 514               		.loc 1 464 13 is_stmt 0 view .LVU180
 515 0008 9FB7      		in r25,__SREG__
 516               	.LVL29:
 465:usb_serial.c  **** 	UENUM = CDC_TX_ENDPOINT;
 517               		.loc 1 465 2 is_stmt 1 view .LVU181
 518               	/* #APP */
 519               	 ;  465 "usb_serial.c" 1
 520 000a F894      		cli
 521               	 ;  0 "" 2
 466:usb_serial.c  **** 	if (!(UEINTX & (1<<RWAL))) {
 522               		.loc 1 466 2 view .LVU182
 466:usb_serial.c  **** 	if (!(UEINTX & (1<<RWAL))) {
 523               		.loc 1 466 8 is_stmt 0 view .LVU183
 524               	/* #NOAPP */
 525 000c 24E0      		ldi r18,lo8(4)
 526 000e 2093 E900 		sts 233,r18
 467:usb_serial.c  **** 		// buffer is full
 527               		.loc 1 467 2 is_stmt 1 view .LVU184
 467:usb_serial.c  **** 		// buffer is full
 528               		.loc 1 467 8 is_stmt 0 view .LVU185
 529 0012 2091 E800 		lds r18,232
 467:usb_serial.c  **** 		// buffer is full
 530               		.loc 1 467 5 view .LVU186
 531 0016 25FD      		sbrc r18,5
 532 0018 00C0      		rjmp .L50
 469:usb_serial.c  **** 		return -1;
 533               		.loc 1 469 3 is_stmt 1 view .LVU187
 469:usb_serial.c  **** 		return -1;
 534               		.loc 1 469 8 is_stmt 0 view .LVU188
 535 001a 9FBF      		out __SREG__,r25
 470:usb_serial.c  **** 	}
 536               		.loc 1 470 3 is_stmt 1 view .LVU189
 537               	.LVL30:
 538               	.L52:
 463:usb_serial.c  **** 	intr_state = SREG;
 539               		.loc 1 463 33 is_stmt 0 view .LVU190
 540 001c 8FEF      		ldi r24,lo8(-1)
 541               	.LVL31:
 542               	/* epilogue start */
 479:usb_serial.c  **** 
 543               		.loc 1 479 1 view .LVU191
 544 001e 0895      		ret
 545               	.LVL32:
 546               	.L50:
 473:usb_serial.c  **** 		// if this completed a packet, transmit it now!
 547               		.loc 1 473 2 is_stmt 1 view .LVU192
 473:usb_serial.c  **** 		// if this completed a packet, transmit it now!
 548               		.loc 1 473 9 is_stmt 0 view .LVU193
 549 0020 8093 F100 		sts 241,r24
 475:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 550               		.loc 1 475 2 is_stmt 1 view .LVU194
 475:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 551               		.loc 1 475 8 is_stmt 0 view .LVU195
 552 0024 8091 E800 		lds r24,232
 553               	.LVL33:
 475:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 554               		.loc 1 475 5 view .LVU196
 555 0028 85FD      		sbrc r24,5
 556 002a 00C0      		rjmp .L51
 475:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 557               		.loc 1 475 29 is_stmt 1 discriminator 1 view .LVU197
 475:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 558               		.loc 1 475 36 is_stmt 0 discriminator 1 view .LVU198
 559 002c 8AE3      		ldi r24,lo8(58)
 560 002e 8093 E800 		sts 232,r24
 561               	.LVL34:
 562               	.L51:
 476:usb_serial.c  **** 	SREG = intr_state;
 563               		.loc 1 476 2 is_stmt 1 view .LVU199
 476:usb_serial.c  **** 	SREG = intr_state;
 564               		.loc 1 476 23 is_stmt 0 view .LVU200
 565 0032 85E0      		ldi r24,lo8(5)
 566 0034 8093 0000 		sts transmit_flush_timer,r24
 477:usb_serial.c  **** 	return 0;
 567               		.loc 1 477 2 is_stmt 1 view .LVU201
 477:usb_serial.c  **** 	return 0;
 568               		.loc 1 477 7 is_stmt 0 view .LVU202
 569 0038 9FBF      		out __SREG__,r25
 478:usb_serial.c  **** }
 570               		.loc 1 478 2 is_stmt 1 view .LVU203
 478:usb_serial.c  **** }
 571               		.loc 1 478 9 is_stmt 0 view .LVU204
 572 003a 80E0      		ldi r24,0
 573 003c 0895      		ret
 574               		.cfi_endproc
 575               	.LFE7:
 577               		.section	.text.usb_serial_write,"ax",@progbits
 578               	.global	usb_serial_write
 580               	usb_serial_write:
 581               	.LVL35:
 582               	.LFB8:
 494:usb_serial.c  **** 	uint8_t timeout, intr_state, write_size;
 583               		.loc 1 494 1 is_stmt 1 view -0
 584               		.cfi_startproc
 585               	/* prologue: function */
 586               	/* frame size = 0 */
 587               	/* stack size = 0 */
 588               	.L__stack_usage = 0
 494:usb_serial.c  **** 	uint8_t timeout, intr_state, write_size;
 589               		.loc 1 494 1 is_stmt 0 view .LVU206
 590 0000 9B01      		movw r18,r22
 495:usb_serial.c  **** 
 591               		.loc 1 495 2 is_stmt 1 view .LVU207
 498:usb_serial.c  **** 	// interrupts are disabled so these functions can be
 592               		.loc 1 498 2 view .LVU208
 498:usb_serial.c  **** 	// interrupts are disabled so these functions can be
 593               		.loc 1 498 6 is_stmt 0 view .LVU209
 594 0002 4091 0000 		lds r20,usb_configuration
 498:usb_serial.c  **** 	// interrupts are disabled so these functions can be
 595               		.loc 1 498 5 view .LVU210
 596 0006 4111      		cpse r20,__zero_reg__
 597 0008 00C0      		rjmp .L54
 598               	.LVL36:
 599               	.L138:
 509:usb_serial.c  **** 		}
 600               		.loc 1 509 4 is_stmt 1 view .LVU211
 509:usb_serial.c  **** 		}
 601               		.loc 1 509 11 is_stmt 0 view .LVU212
 602 000a 8FEF      		ldi r24,lo8(-1)
 603 000c 0895      		ret
 604               	.LVL37:
 605               	.L54:
 502:usb_serial.c  **** 	cli();
 606               		.loc 1 502 2 is_stmt 1 view .LVU213
 502:usb_serial.c  **** 	cli();
 607               		.loc 1 502 13 is_stmt 0 view .LVU214
 608 000e 4FB7      		in r20,__SREG__
 609               	.LVL38:
 503:usb_serial.c  **** 	UENUM = CDC_TX_ENDPOINT;
 610               		.loc 1 503 2 is_stmt 1 view .LVU215
 611               	/* #APP */
 612               	 ;  503 "usb_serial.c" 1
 613 0010 F894      		cli
 614               	 ;  0 "" 2
 504:usb_serial.c  **** 	// if we gave up due to timeout before, don't wait again
 615               		.loc 1 504 2 view .LVU216
 504:usb_serial.c  **** 	// if we gave up due to timeout before, don't wait again
 616               		.loc 1 504 8 is_stmt 0 view .LVU217
 617               	/* #NOAPP */
 618 0012 54E0      		ldi r21,lo8(4)
 619 0014 5093 E900 		sts 233,r21
 506:usb_serial.c  **** 		if (!(UEINTX & (1<<RWAL))) {
 620               		.loc 1 506 2 is_stmt 1 view .LVU218
 506:usb_serial.c  **** 		if (!(UEINTX & (1<<RWAL))) {
 621               		.loc 1 506 5 is_stmt 0 view .LVU219
 622 0018 5091 0000 		lds r21,transmit_previous_timeout
 623 001c 5523      		tst r21
 624 001e 01F0      		breq .L56
 507:usb_serial.c  **** 			SREG = intr_state;
 625               		.loc 1 507 3 is_stmt 1 view .LVU220
 507:usb_serial.c  **** 			SREG = intr_state;
 626               		.loc 1 507 9 is_stmt 0 view .LVU221
 627 0020 5091 E800 		lds r21,232
 507:usb_serial.c  **** 			SREG = intr_state;
 628               		.loc 1 507 6 view .LVU222
 629 0024 55FD      		sbrc r21,5
 630 0026 00C0      		rjmp .L57
 508:usb_serial.c  **** 			return -1;
 631               		.loc 1 508 4 is_stmt 1 view .LVU223
 508:usb_serial.c  **** 			return -1;
 632               		.loc 1 508 9 is_stmt 0 view .LVU224
 633 0028 4FBF      		out __SREG__,r20
 634 002a 00C0      		rjmp .L138
 635               	.L57:
 511:usb_serial.c  **** 	}
 636               		.loc 1 511 3 is_stmt 1 view .LVU225
 511:usb_serial.c  **** 	}
 637               		.loc 1 511 29 is_stmt 0 view .LVU226
 638 002c 1092 0000 		sts transmit_previous_timeout,__zero_reg__
 639               	.L56:
 532:usb_serial.c  **** 		}
 640               		.loc 1 532 10 view .LVU227
 641 0030 54E0      		ldi r21,lo8(4)
 536:usb_serial.c  **** 		if (write_size > size) write_size = size;
 642               		.loc 1 536 14 view .LVU228
 643 0032 60E4      		ldi r22,lo8(64)
 616:usb_serial.c  **** 		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 644               		.loc 1 616 37 view .LVU229
 645 0034 7AE3      		ldi r23,lo8(58)
 617:usb_serial.c  **** 		SREG = intr_state;
 646               		.loc 1 617 24 view .LVU230
 647 0036 A5E0      		ldi r26,lo8(5)
 648               	.LVL39:
 649               	.L58:
 514:usb_serial.c  **** 		// wait for the FIFO to be ready to accept data
 650               		.loc 1 514 8 is_stmt 1 view .LVU231
 651 0038 2115      		cp r18,__zero_reg__
 652 003a 3105      		cpc r19,__zero_reg__
 653 003c 01F4      		brne .L131
 620:usb_serial.c  **** }
 654               		.loc 1 620 9 is_stmt 0 view .LVU232
 655 003e 80E0      		ldi r24,0
 656               	.LVL40:
 657               	/* epilogue start */
 621:usb_serial.c  **** 
 658               		.loc 1 621 1 view .LVU233
 659 0040 0895      		ret
 660               	.LVL41:
 661               	.L131:
 516:usb_serial.c  **** 		while (1) {
 662               		.loc 1 516 3 is_stmt 1 view .LVU234
 516:usb_serial.c  **** 		while (1) {
 663               		.loc 1 516 13 is_stmt 0 view .LVU235
 664 0042 E091 E400 		lds r30,228
 516:usb_serial.c  **** 		while (1) {
 665               		.loc 1 516 11 view .LVU236
 666 0046 E75E      		subi r30,lo8(-(25))
 667               	.LVL42:
 668               	.L62:
 517:usb_serial.c  **** 			// are we ready to transmit?
 669               		.loc 1 517 3 is_stmt 1 view .LVU237
 519:usb_serial.c  **** 			SREG = intr_state;
 670               		.loc 1 519 4 view .LVU238
 519:usb_serial.c  **** 			SREG = intr_state;
 671               		.loc 1 519 8 is_stmt 0 view .LVU239
 672 0048 F091 E800 		lds r31,232
 519:usb_serial.c  **** 			SREG = intr_state;
 673               		.loc 1 519 7 view .LVU240
 674 004c F5FD      		sbrc r31,5
 675 004e 00C0      		rjmp .L59
 520:usb_serial.c  **** 			// have we waited too long?  This happens if the user
 676               		.loc 1 520 4 is_stmt 1 view .LVU241
 520:usb_serial.c  **** 			// have we waited too long?  This happens if the user
 677               		.loc 1 520 9 is_stmt 0 view .LVU242
 678 0050 4FBF      		out __SREG__,r20
 523:usb_serial.c  **** 				transmit_previous_timeout = 1;
 679               		.loc 1 523 4 is_stmt 1 view .LVU243
 523:usb_serial.c  **** 				transmit_previous_timeout = 1;
 680               		.loc 1 523 8 is_stmt 0 view .LVU244
 681 0052 4091 E400 		lds r20,228
 682               	.LVL43:
 523:usb_serial.c  **** 				transmit_previous_timeout = 1;
 683               		.loc 1 523 7 view .LVU245
 684 0056 4E13      		cpse r20,r30
 685 0058 00C0      		rjmp .L60
 524:usb_serial.c  **** 				return -1;
 686               		.loc 1 524 5 is_stmt 1 view .LVU246
 524:usb_serial.c  **** 				return -1;
 687               		.loc 1 524 31 is_stmt 0 view .LVU247
 688 005a 81E0      		ldi r24,lo8(1)
 689               	.LVL44:
 524:usb_serial.c  **** 				return -1;
 690               		.loc 1 524 31 view .LVU248
 691 005c 8093 0000 		sts transmit_previous_timeout,r24
 692               	.LVL45:
 525:usb_serial.c  **** 			}
 693               		.loc 1 525 5 is_stmt 1 view .LVU249
 694 0060 00C0      		rjmp .L138
 695               	.LVL46:
 696               	.L60:
 528:usb_serial.c  **** 			// get ready to try checking again
 697               		.loc 1 528 4 view .LVU250
 528:usb_serial.c  **** 			// get ready to try checking again
 698               		.loc 1 528 8 is_stmt 0 view .LVU251
 699 0062 4091 0000 		lds r20,usb_configuration
 528:usb_serial.c  **** 			// get ready to try checking again
 700               		.loc 1 528 7 view .LVU252
 701 0066 4423      		tst r20
 702 0068 01F0      		breq .L138
 530:usb_serial.c  **** 			cli();
 703               		.loc 1 530 4 is_stmt 1 view .LVU253
 530:usb_serial.c  **** 			cli();
 704               		.loc 1 530 15 is_stmt 0 view .LVU254
 705 006a 4FB7      		in r20,__SREG__
 706               	.LVL47:
 531:usb_serial.c  **** 			UENUM = CDC_TX_ENDPOINT;
 707               		.loc 1 531 4 is_stmt 1 view .LVU255
 708               	/* #APP */
 709               	 ;  531 "usb_serial.c" 1
 710 006c F894      		cli
 711               	 ;  0 "" 2
 532:usb_serial.c  **** 		}
 712               		.loc 1 532 4 view .LVU256
 532:usb_serial.c  **** 		}
 713               		.loc 1 532 10 is_stmt 0 view .LVU257
 714               	/* #NOAPP */
 715 006e 5093 E900 		sts 233,r21
 517:usb_serial.c  **** 			// are we ready to transmit?
 716               		.loc 1 517 9 is_stmt 1 view .LVU258
 519:usb_serial.c  **** 			SREG = intr_state;
 717               		.loc 1 519 7 is_stmt 0 view .LVU259
 718 0072 00C0      		rjmp .L62
 719               	.L59:
 536:usb_serial.c  **** 		if (write_size > size) write_size = size;
 720               		.loc 1 536 3 is_stmt 1 view .LVU260
 536:usb_serial.c  **** 		if (write_size > size) write_size = size;
 721               		.loc 1 536 30 is_stmt 0 view .LVU261
 722 0074 E091 F200 		lds r30,242
 723               	.LVL48:
 536:usb_serial.c  **** 		if (write_size > size) write_size = size;
 724               		.loc 1 536 14 view .LVU262
 725 0078 B62F      		mov r27,r22
 726 007a BE1B      		sub r27,r30
 727               	.LVL49:
 537:usb_serial.c  **** 		size -= write_size;
 728               		.loc 1 537 3 is_stmt 1 view .LVU263
 537:usb_serial.c  **** 		size -= write_size;
 729               		.loc 1 537 6 is_stmt 0 view .LVU264
 730 007c B217      		cp r27,r18
 731 007e 1306      		cpc __zero_reg__,r19
 732 0080 01F0      		breq .L63
 733 0082 00F0      		brlo .L63
 537:usb_serial.c  **** 		size -= write_size;
 734               		.loc 1 537 26 is_stmt 1 discriminator 1 view .LVU265
 537:usb_serial.c  **** 		size -= write_size;
 735               		.loc 1 537 37 is_stmt 0 discriminator 1 view .LVU266
 736 0084 B22F      		mov r27,r18
 737               	.LVL50:
 738               	.L63:
 538:usb_serial.c  **** 
 739               		.loc 1 538 3 is_stmt 1 view .LVU267
 538:usb_serial.c  **** 
 740               		.loc 1 538 8 is_stmt 0 view .LVU268
 741 0086 EB2F      		mov r30,r27
 742 0088 F0E0      		ldi r31,0
 743 008a 2E1B      		sub r18,r30
 744 008c 3F0B      		sbc r19,r31
 745               	.LVL51:
 541:usb_serial.c  **** 			#if (CDC_TX_SIZE == 64)
 746               		.loc 1 541 3 is_stmt 1 view .LVU269
 747 008e B134      		cpi r27,lo8(65)
 748 0090 00F0      		brlo .+2
 749 0092 00C0      		rjmp .L64
 750 0094 E050      		subi r30,lo8(-(gs(.L66)))
 751 0096 F040      		sbci r31,hi8(-(gs(.L66)))
 752 0098 0C94 0000 		jmp __tablejump2__
 753               		.section	.jumptables.gcc.usb_serial_write,"a",@progbits
 754               		.p2align	1
 755               	.L66:
 756 0000 0000      		.word gs(.L129)
 757 0002 0000      		.word gs(.L64)
 758 0004 0000      		.word gs(.L128)
 759 0006 0000      		.word gs(.L127)
 760 0008 0000      		.word gs(.L126)
 761 000a 0000      		.word gs(.L125)
 762 000c 0000      		.word gs(.L124)
 763 000e 0000      		.word gs(.L123)
 764 0010 0000      		.word gs(.L122)
 765 0012 0000      		.word gs(.L121)
 766 0014 0000      		.word gs(.L120)
 767 0016 0000      		.word gs(.L119)
 768 0018 0000      		.word gs(.L118)
 769 001a 0000      		.word gs(.L117)
 770 001c 0000      		.word gs(.L116)
 771 001e 0000      		.word gs(.L115)
 772 0020 0000      		.word gs(.L114)
 773 0022 0000      		.word gs(.L113)
 774 0024 0000      		.word gs(.L112)
 775 0026 0000      		.word gs(.L111)
 776 0028 0000      		.word gs(.L110)
 777 002a 0000      		.word gs(.L109)
 778 002c 0000      		.word gs(.L108)
 779 002e 0000      		.word gs(.L107)
 780 0030 0000      		.word gs(.L106)
 781 0032 0000      		.word gs(.L105)
 782 0034 0000      		.word gs(.L104)
 783 0036 0000      		.word gs(.L103)
 784 0038 0000      		.word gs(.L102)
 785 003a 0000      		.word gs(.L101)
 786 003c 0000      		.word gs(.L100)
 787 003e 0000      		.word gs(.L99)
 788 0040 0000      		.word gs(.L98)
 789 0042 0000      		.word gs(.L97)
 790 0044 0000      		.word gs(.L96)
 791 0046 0000      		.word gs(.L95)
 792 0048 0000      		.word gs(.L94)
 793 004a 0000      		.word gs(.L93)
 794 004c 0000      		.word gs(.L92)
 795 004e 0000      		.word gs(.L91)
 796 0050 0000      		.word gs(.L90)
 797 0052 0000      		.word gs(.L89)
 798 0054 0000      		.word gs(.L88)
 799 0056 0000      		.word gs(.L87)
 800 0058 0000      		.word gs(.L86)
 801 005a 0000      		.word gs(.L85)
 802 005c 0000      		.word gs(.L84)
 803 005e 0000      		.word gs(.L83)
 804 0060 0000      		.word gs(.L82)
 805 0062 0000      		.word gs(.L81)
 806 0064 0000      		.word gs(.L80)
 807 0066 0000      		.word gs(.L79)
 808 0068 0000      		.word gs(.L78)
 809 006a 0000      		.word gs(.L77)
 810 006c 0000      		.word gs(.L76)
 811 006e 0000      		.word gs(.L75)
 812 0070 0000      		.word gs(.L74)
 813 0072 0000      		.word gs(.L73)
 814 0074 0000      		.word gs(.L72)
 815 0076 0000      		.word gs(.L71)
 816 0078 0000      		.word gs(.L70)
 817 007a 0000      		.word gs(.L69)
 818 007c 0000      		.word gs(.L68)
 819 007e 0000      		.word gs(.L67)
 820 0080 0000      		.word gs(.L65)
 821               		.section	.text.usb_serial_write
 822               	.L65:
 543:usb_serial.c  **** 			case 63: UEDATX = *buffer++;
 823               		.loc 1 543 13 view .LVU270
 543:usb_serial.c  **** 			case 63: UEDATX = *buffer++;
 824               		.loc 1 543 29 is_stmt 0 view .LVU271
 825 009c FC01      		movw r30,r24
 826               	.LVL52:
 543:usb_serial.c  **** 			case 63: UEDATX = *buffer++;
 827               		.loc 1 543 22 view .LVU272
 828 009e 8191      		ld r24,Z+
 829               	.LVL53:
 543:usb_serial.c  **** 			case 63: UEDATX = *buffer++;
 830               		.loc 1 543 20 view .LVU273
 831 00a0 8093 F100 		sts 241,r24
 543:usb_serial.c  **** 			case 63: UEDATX = *buffer++;
 832               		.loc 1 543 29 view .LVU274
 833 00a4 CF01      		movw r24,r30
 834               	.LVL54:
 835               	.L67:
 544:usb_serial.c  **** 			case 62: UEDATX = *buffer++;
 836               		.loc 1 544 13 is_stmt 1 view .LVU275
 544:usb_serial.c  **** 			case 62: UEDATX = *buffer++;
 837               		.loc 1 544 29 is_stmt 0 view .LVU276
 838 00a6 FC01      		movw r30,r24
 839               	.LVL55:
 544:usb_serial.c  **** 			case 62: UEDATX = *buffer++;
 840               		.loc 1 544 22 view .LVU277
 841 00a8 8191      		ld r24,Z+
 842               	.LVL56:
 544:usb_serial.c  **** 			case 62: UEDATX = *buffer++;
 843               		.loc 1 544 20 view .LVU278
 844 00aa 8093 F100 		sts 241,r24
 544:usb_serial.c  **** 			case 62: UEDATX = *buffer++;
 845               		.loc 1 544 29 view .LVU279
 846 00ae CF01      		movw r24,r30
 847               	.LVL57:
 848               	.L68:
 545:usb_serial.c  **** 			case 61: UEDATX = *buffer++;
 849               		.loc 1 545 13 is_stmt 1 view .LVU280
 545:usb_serial.c  **** 			case 61: UEDATX = *buffer++;
 850               		.loc 1 545 29 is_stmt 0 view .LVU281
 851 00b0 FC01      		movw r30,r24
 852               	.LVL58:
 545:usb_serial.c  **** 			case 61: UEDATX = *buffer++;
 853               		.loc 1 545 22 view .LVU282
 854 00b2 8191      		ld r24,Z+
 855               	.LVL59:
 545:usb_serial.c  **** 			case 61: UEDATX = *buffer++;
 856               		.loc 1 545 20 view .LVU283
 857 00b4 8093 F100 		sts 241,r24
 545:usb_serial.c  **** 			case 61: UEDATX = *buffer++;
 858               		.loc 1 545 29 view .LVU284
 859 00b8 CF01      		movw r24,r30
 860               	.LVL60:
 861               	.L69:
 546:usb_serial.c  **** 			case 60: UEDATX = *buffer++;
 862               		.loc 1 546 13 is_stmt 1 view .LVU285
 546:usb_serial.c  **** 			case 60: UEDATX = *buffer++;
 863               		.loc 1 546 29 is_stmt 0 view .LVU286
 864 00ba FC01      		movw r30,r24
 865               	.LVL61:
 546:usb_serial.c  **** 			case 60: UEDATX = *buffer++;
 866               		.loc 1 546 22 view .LVU287
 867 00bc 8191      		ld r24,Z+
 868               	.LVL62:
 546:usb_serial.c  **** 			case 60: UEDATX = *buffer++;
 869               		.loc 1 546 20 view .LVU288
 870 00be 8093 F100 		sts 241,r24
 546:usb_serial.c  **** 			case 60: UEDATX = *buffer++;
 871               		.loc 1 546 29 view .LVU289
 872 00c2 CF01      		movw r24,r30
 873               	.LVL63:
 874               	.L70:
 547:usb_serial.c  **** 			case 59: UEDATX = *buffer++;
 875               		.loc 1 547 13 is_stmt 1 view .LVU290
 547:usb_serial.c  **** 			case 59: UEDATX = *buffer++;
 876               		.loc 1 547 29 is_stmt 0 view .LVU291
 877 00c4 FC01      		movw r30,r24
 878               	.LVL64:
 547:usb_serial.c  **** 			case 59: UEDATX = *buffer++;
 879               		.loc 1 547 22 view .LVU292
 880 00c6 8191      		ld r24,Z+
 881               	.LVL65:
 547:usb_serial.c  **** 			case 59: UEDATX = *buffer++;
 882               		.loc 1 547 20 view .LVU293
 883 00c8 8093 F100 		sts 241,r24
 547:usb_serial.c  **** 			case 59: UEDATX = *buffer++;
 884               		.loc 1 547 29 view .LVU294
 885 00cc CF01      		movw r24,r30
 886               	.LVL66:
 887               	.L71:
 548:usb_serial.c  **** 			case 58: UEDATX = *buffer++;
 888               		.loc 1 548 13 is_stmt 1 view .LVU295
 548:usb_serial.c  **** 			case 58: UEDATX = *buffer++;
 889               		.loc 1 548 29 is_stmt 0 view .LVU296
 890 00ce FC01      		movw r30,r24
 891               	.LVL67:
 548:usb_serial.c  **** 			case 58: UEDATX = *buffer++;
 892               		.loc 1 548 22 view .LVU297
 893 00d0 8191      		ld r24,Z+
 894               	.LVL68:
 548:usb_serial.c  **** 			case 58: UEDATX = *buffer++;
 895               		.loc 1 548 20 view .LVU298
 896 00d2 8093 F100 		sts 241,r24
 548:usb_serial.c  **** 			case 58: UEDATX = *buffer++;
 897               		.loc 1 548 29 view .LVU299
 898 00d6 CF01      		movw r24,r30
 899               	.LVL69:
 900               	.L72:
 549:usb_serial.c  **** 			case 57: UEDATX = *buffer++;
 901               		.loc 1 549 13 is_stmt 1 view .LVU300
 549:usb_serial.c  **** 			case 57: UEDATX = *buffer++;
 902               		.loc 1 549 29 is_stmt 0 view .LVU301
 903 00d8 FC01      		movw r30,r24
 904               	.LVL70:
 549:usb_serial.c  **** 			case 57: UEDATX = *buffer++;
 905               		.loc 1 549 22 view .LVU302
 906 00da 8191      		ld r24,Z+
 907               	.LVL71:
 549:usb_serial.c  **** 			case 57: UEDATX = *buffer++;
 908               		.loc 1 549 20 view .LVU303
 909 00dc 8093 F100 		sts 241,r24
 549:usb_serial.c  **** 			case 57: UEDATX = *buffer++;
 910               		.loc 1 549 29 view .LVU304
 911 00e0 CF01      		movw r24,r30
 912               	.LVL72:
 913               	.L73:
 550:usb_serial.c  **** 			case 56: UEDATX = *buffer++;
 914               		.loc 1 550 13 is_stmt 1 view .LVU305
 550:usb_serial.c  **** 			case 56: UEDATX = *buffer++;
 915               		.loc 1 550 29 is_stmt 0 view .LVU306
 916 00e2 FC01      		movw r30,r24
 917               	.LVL73:
 550:usb_serial.c  **** 			case 56: UEDATX = *buffer++;
 918               		.loc 1 550 22 view .LVU307
 919 00e4 8191      		ld r24,Z+
 920               	.LVL74:
 550:usb_serial.c  **** 			case 56: UEDATX = *buffer++;
 921               		.loc 1 550 20 view .LVU308
 922 00e6 8093 F100 		sts 241,r24
 550:usb_serial.c  **** 			case 56: UEDATX = *buffer++;
 923               		.loc 1 550 29 view .LVU309
 924 00ea CF01      		movw r24,r30
 925               	.LVL75:
 926               	.L74:
 551:usb_serial.c  **** 			case 55: UEDATX = *buffer++;
 927               		.loc 1 551 13 is_stmt 1 view .LVU310
 551:usb_serial.c  **** 			case 55: UEDATX = *buffer++;
 928               		.loc 1 551 29 is_stmt 0 view .LVU311
 929 00ec FC01      		movw r30,r24
 930               	.LVL76:
 551:usb_serial.c  **** 			case 55: UEDATX = *buffer++;
 931               		.loc 1 551 22 view .LVU312
 932 00ee 8191      		ld r24,Z+
 933               	.LVL77:
 551:usb_serial.c  **** 			case 55: UEDATX = *buffer++;
 934               		.loc 1 551 20 view .LVU313
 935 00f0 8093 F100 		sts 241,r24
 551:usb_serial.c  **** 			case 55: UEDATX = *buffer++;
 936               		.loc 1 551 29 view .LVU314
 937 00f4 CF01      		movw r24,r30
 938               	.LVL78:
 939               	.L75:
 552:usb_serial.c  **** 			case 54: UEDATX = *buffer++;
 940               		.loc 1 552 13 is_stmt 1 view .LVU315
 552:usb_serial.c  **** 			case 54: UEDATX = *buffer++;
 941               		.loc 1 552 29 is_stmt 0 view .LVU316
 942 00f6 FC01      		movw r30,r24
 943               	.LVL79:
 552:usb_serial.c  **** 			case 54: UEDATX = *buffer++;
 944               		.loc 1 552 22 view .LVU317
 945 00f8 8191      		ld r24,Z+
 946               	.LVL80:
 552:usb_serial.c  **** 			case 54: UEDATX = *buffer++;
 947               		.loc 1 552 20 view .LVU318
 948 00fa 8093 F100 		sts 241,r24
 552:usb_serial.c  **** 			case 54: UEDATX = *buffer++;
 949               		.loc 1 552 29 view .LVU319
 950 00fe CF01      		movw r24,r30
 951               	.LVL81:
 952               	.L76:
 553:usb_serial.c  **** 			case 53: UEDATX = *buffer++;
 953               		.loc 1 553 13 is_stmt 1 view .LVU320
 553:usb_serial.c  **** 			case 53: UEDATX = *buffer++;
 954               		.loc 1 553 29 is_stmt 0 view .LVU321
 955 0100 FC01      		movw r30,r24
 956               	.LVL82:
 553:usb_serial.c  **** 			case 53: UEDATX = *buffer++;
 957               		.loc 1 553 22 view .LVU322
 958 0102 8191      		ld r24,Z+
 959               	.LVL83:
 553:usb_serial.c  **** 			case 53: UEDATX = *buffer++;
 960               		.loc 1 553 20 view .LVU323
 961 0104 8093 F100 		sts 241,r24
 553:usb_serial.c  **** 			case 53: UEDATX = *buffer++;
 962               		.loc 1 553 29 view .LVU324
 963 0108 CF01      		movw r24,r30
 964               	.LVL84:
 965               	.L77:
 554:usb_serial.c  **** 			case 52: UEDATX = *buffer++;
 966               		.loc 1 554 13 is_stmt 1 view .LVU325
 554:usb_serial.c  **** 			case 52: UEDATX = *buffer++;
 967               		.loc 1 554 29 is_stmt 0 view .LVU326
 968 010a FC01      		movw r30,r24
 969               	.LVL85:
 554:usb_serial.c  **** 			case 52: UEDATX = *buffer++;
 970               		.loc 1 554 22 view .LVU327
 971 010c 8191      		ld r24,Z+
 972               	.LVL86:
 554:usb_serial.c  **** 			case 52: UEDATX = *buffer++;
 973               		.loc 1 554 20 view .LVU328
 974 010e 8093 F100 		sts 241,r24
 554:usb_serial.c  **** 			case 52: UEDATX = *buffer++;
 975               		.loc 1 554 29 view .LVU329
 976 0112 CF01      		movw r24,r30
 977               	.LVL87:
 978               	.L78:
 555:usb_serial.c  **** 			case 51: UEDATX = *buffer++;
 979               		.loc 1 555 13 is_stmt 1 view .LVU330
 555:usb_serial.c  **** 			case 51: UEDATX = *buffer++;
 980               		.loc 1 555 29 is_stmt 0 view .LVU331
 981 0114 FC01      		movw r30,r24
 982               	.LVL88:
 555:usb_serial.c  **** 			case 51: UEDATX = *buffer++;
 983               		.loc 1 555 22 view .LVU332
 984 0116 8191      		ld r24,Z+
 985               	.LVL89:
 555:usb_serial.c  **** 			case 51: UEDATX = *buffer++;
 986               		.loc 1 555 20 view .LVU333
 987 0118 8093 F100 		sts 241,r24
 555:usb_serial.c  **** 			case 51: UEDATX = *buffer++;
 988               		.loc 1 555 29 view .LVU334
 989 011c CF01      		movw r24,r30
 990               	.LVL90:
 991               	.L79:
 556:usb_serial.c  **** 			case 50: UEDATX = *buffer++;
 992               		.loc 1 556 13 is_stmt 1 view .LVU335
 556:usb_serial.c  **** 			case 50: UEDATX = *buffer++;
 993               		.loc 1 556 29 is_stmt 0 view .LVU336
 994 011e FC01      		movw r30,r24
 995               	.LVL91:
 556:usb_serial.c  **** 			case 50: UEDATX = *buffer++;
 996               		.loc 1 556 22 view .LVU337
 997 0120 8191      		ld r24,Z+
 998               	.LVL92:
 556:usb_serial.c  **** 			case 50: UEDATX = *buffer++;
 999               		.loc 1 556 20 view .LVU338
 1000 0122 8093 F100 		sts 241,r24
 556:usb_serial.c  **** 			case 50: UEDATX = *buffer++;
 1001               		.loc 1 556 29 view .LVU339
 1002 0126 CF01      		movw r24,r30
 1003               	.LVL93:
 1004               	.L80:
 557:usb_serial.c  **** 			case 49: UEDATX = *buffer++;
 1005               		.loc 1 557 13 is_stmt 1 view .LVU340
 557:usb_serial.c  **** 			case 49: UEDATX = *buffer++;
 1006               		.loc 1 557 29 is_stmt 0 view .LVU341
 1007 0128 FC01      		movw r30,r24
 1008               	.LVL94:
 557:usb_serial.c  **** 			case 49: UEDATX = *buffer++;
 1009               		.loc 1 557 22 view .LVU342
 1010 012a 8191      		ld r24,Z+
 1011               	.LVL95:
 557:usb_serial.c  **** 			case 49: UEDATX = *buffer++;
 1012               		.loc 1 557 20 view .LVU343
 1013 012c 8093 F100 		sts 241,r24
 557:usb_serial.c  **** 			case 49: UEDATX = *buffer++;
 1014               		.loc 1 557 29 view .LVU344
 1015 0130 CF01      		movw r24,r30
 1016               	.LVL96:
 1017               	.L81:
 558:usb_serial.c  **** 			case 48: UEDATX = *buffer++;
 1018               		.loc 1 558 13 is_stmt 1 view .LVU345
 558:usb_serial.c  **** 			case 48: UEDATX = *buffer++;
 1019               		.loc 1 558 29 is_stmt 0 view .LVU346
 1020 0132 FC01      		movw r30,r24
 1021               	.LVL97:
 558:usb_serial.c  **** 			case 48: UEDATX = *buffer++;
 1022               		.loc 1 558 22 view .LVU347
 1023 0134 8191      		ld r24,Z+
 1024               	.LVL98:
 558:usb_serial.c  **** 			case 48: UEDATX = *buffer++;
 1025               		.loc 1 558 20 view .LVU348
 1026 0136 8093 F100 		sts 241,r24
 558:usb_serial.c  **** 			case 48: UEDATX = *buffer++;
 1027               		.loc 1 558 29 view .LVU349
 1028 013a CF01      		movw r24,r30
 1029               	.LVL99:
 1030               	.L82:
 559:usb_serial.c  **** 			case 47: UEDATX = *buffer++;
 1031               		.loc 1 559 13 is_stmt 1 view .LVU350
 559:usb_serial.c  **** 			case 47: UEDATX = *buffer++;
 1032               		.loc 1 559 29 is_stmt 0 view .LVU351
 1033 013c FC01      		movw r30,r24
 1034               	.LVL100:
 559:usb_serial.c  **** 			case 47: UEDATX = *buffer++;
 1035               		.loc 1 559 22 view .LVU352
 1036 013e 8191      		ld r24,Z+
 1037               	.LVL101:
 559:usb_serial.c  **** 			case 47: UEDATX = *buffer++;
 1038               		.loc 1 559 20 view .LVU353
 1039 0140 8093 F100 		sts 241,r24
 559:usb_serial.c  **** 			case 47: UEDATX = *buffer++;
 1040               		.loc 1 559 29 view .LVU354
 1041 0144 CF01      		movw r24,r30
 1042               	.LVL102:
 1043               	.L83:
 560:usb_serial.c  **** 			case 46: UEDATX = *buffer++;
 1044               		.loc 1 560 13 is_stmt 1 view .LVU355
 560:usb_serial.c  **** 			case 46: UEDATX = *buffer++;
 1045               		.loc 1 560 29 is_stmt 0 view .LVU356
 1046 0146 FC01      		movw r30,r24
 1047               	.LVL103:
 560:usb_serial.c  **** 			case 46: UEDATX = *buffer++;
 1048               		.loc 1 560 22 view .LVU357
 1049 0148 8191      		ld r24,Z+
 1050               	.LVL104:
 560:usb_serial.c  **** 			case 46: UEDATX = *buffer++;
 1051               		.loc 1 560 20 view .LVU358
 1052 014a 8093 F100 		sts 241,r24
 560:usb_serial.c  **** 			case 46: UEDATX = *buffer++;
 1053               		.loc 1 560 29 view .LVU359
 1054 014e CF01      		movw r24,r30
 1055               	.LVL105:
 1056               	.L84:
 561:usb_serial.c  **** 			case 45: UEDATX = *buffer++;
 1057               		.loc 1 561 13 is_stmt 1 view .LVU360
 561:usb_serial.c  **** 			case 45: UEDATX = *buffer++;
 1058               		.loc 1 561 29 is_stmt 0 view .LVU361
 1059 0150 FC01      		movw r30,r24
 1060               	.LVL106:
 561:usb_serial.c  **** 			case 45: UEDATX = *buffer++;
 1061               		.loc 1 561 22 view .LVU362
 1062 0152 8191      		ld r24,Z+
 1063               	.LVL107:
 561:usb_serial.c  **** 			case 45: UEDATX = *buffer++;
 1064               		.loc 1 561 20 view .LVU363
 1065 0154 8093 F100 		sts 241,r24
 561:usb_serial.c  **** 			case 45: UEDATX = *buffer++;
 1066               		.loc 1 561 29 view .LVU364
 1067 0158 CF01      		movw r24,r30
 1068               	.LVL108:
 1069               	.L85:
 562:usb_serial.c  **** 			case 44: UEDATX = *buffer++;
 1070               		.loc 1 562 13 is_stmt 1 view .LVU365
 562:usb_serial.c  **** 			case 44: UEDATX = *buffer++;
 1071               		.loc 1 562 29 is_stmt 0 view .LVU366
 1072 015a FC01      		movw r30,r24
 1073               	.LVL109:
 562:usb_serial.c  **** 			case 44: UEDATX = *buffer++;
 1074               		.loc 1 562 22 view .LVU367
 1075 015c 8191      		ld r24,Z+
 1076               	.LVL110:
 562:usb_serial.c  **** 			case 44: UEDATX = *buffer++;
 1077               		.loc 1 562 20 view .LVU368
 1078 015e 8093 F100 		sts 241,r24
 562:usb_serial.c  **** 			case 44: UEDATX = *buffer++;
 1079               		.loc 1 562 29 view .LVU369
 1080 0162 CF01      		movw r24,r30
 1081               	.LVL111:
 1082               	.L86:
 563:usb_serial.c  **** 			case 43: UEDATX = *buffer++;
 1083               		.loc 1 563 13 is_stmt 1 view .LVU370
 563:usb_serial.c  **** 			case 43: UEDATX = *buffer++;
 1084               		.loc 1 563 29 is_stmt 0 view .LVU371
 1085 0164 FC01      		movw r30,r24
 1086               	.LVL112:
 563:usb_serial.c  **** 			case 43: UEDATX = *buffer++;
 1087               		.loc 1 563 22 view .LVU372
 1088 0166 8191      		ld r24,Z+
 1089               	.LVL113:
 563:usb_serial.c  **** 			case 43: UEDATX = *buffer++;
 1090               		.loc 1 563 20 view .LVU373
 1091 0168 8093 F100 		sts 241,r24
 563:usb_serial.c  **** 			case 43: UEDATX = *buffer++;
 1092               		.loc 1 563 29 view .LVU374
 1093 016c CF01      		movw r24,r30
 1094               	.LVL114:
 1095               	.L87:
 564:usb_serial.c  **** 			case 42: UEDATX = *buffer++;
 1096               		.loc 1 564 13 is_stmt 1 view .LVU375
 564:usb_serial.c  **** 			case 42: UEDATX = *buffer++;
 1097               		.loc 1 564 29 is_stmt 0 view .LVU376
 1098 016e FC01      		movw r30,r24
 1099               	.LVL115:
 564:usb_serial.c  **** 			case 42: UEDATX = *buffer++;
 1100               		.loc 1 564 22 view .LVU377
 1101 0170 8191      		ld r24,Z+
 1102               	.LVL116:
 564:usb_serial.c  **** 			case 42: UEDATX = *buffer++;
 1103               		.loc 1 564 20 view .LVU378
 1104 0172 8093 F100 		sts 241,r24
 564:usb_serial.c  **** 			case 42: UEDATX = *buffer++;
 1105               		.loc 1 564 29 view .LVU379
 1106 0176 CF01      		movw r24,r30
 1107               	.LVL117:
 1108               	.L88:
 565:usb_serial.c  **** 			case 41: UEDATX = *buffer++;
 1109               		.loc 1 565 13 is_stmt 1 view .LVU380
 565:usb_serial.c  **** 			case 41: UEDATX = *buffer++;
 1110               		.loc 1 565 29 is_stmt 0 view .LVU381
 1111 0178 FC01      		movw r30,r24
 1112               	.LVL118:
 565:usb_serial.c  **** 			case 41: UEDATX = *buffer++;
 1113               		.loc 1 565 22 view .LVU382
 1114 017a 8191      		ld r24,Z+
 1115               	.LVL119:
 565:usb_serial.c  **** 			case 41: UEDATX = *buffer++;
 1116               		.loc 1 565 20 view .LVU383
 1117 017c 8093 F100 		sts 241,r24
 565:usb_serial.c  **** 			case 41: UEDATX = *buffer++;
 1118               		.loc 1 565 29 view .LVU384
 1119 0180 CF01      		movw r24,r30
 1120               	.LVL120:
 1121               	.L89:
 566:usb_serial.c  **** 			case 40: UEDATX = *buffer++;
 1122               		.loc 1 566 13 is_stmt 1 view .LVU385
 566:usb_serial.c  **** 			case 40: UEDATX = *buffer++;
 1123               		.loc 1 566 29 is_stmt 0 view .LVU386
 1124 0182 FC01      		movw r30,r24
 1125               	.LVL121:
 566:usb_serial.c  **** 			case 40: UEDATX = *buffer++;
 1126               		.loc 1 566 22 view .LVU387
 1127 0184 8191      		ld r24,Z+
 1128               	.LVL122:
 566:usb_serial.c  **** 			case 40: UEDATX = *buffer++;
 1129               		.loc 1 566 20 view .LVU388
 1130 0186 8093 F100 		sts 241,r24
 566:usb_serial.c  **** 			case 40: UEDATX = *buffer++;
 1131               		.loc 1 566 29 view .LVU389
 1132 018a CF01      		movw r24,r30
 1133               	.LVL123:
 1134               	.L90:
 567:usb_serial.c  **** 			case 39: UEDATX = *buffer++;
 1135               		.loc 1 567 13 is_stmt 1 view .LVU390
 567:usb_serial.c  **** 			case 39: UEDATX = *buffer++;
 1136               		.loc 1 567 29 is_stmt 0 view .LVU391
 1137 018c FC01      		movw r30,r24
 1138               	.LVL124:
 567:usb_serial.c  **** 			case 39: UEDATX = *buffer++;
 1139               		.loc 1 567 22 view .LVU392
 1140 018e 8191      		ld r24,Z+
 1141               	.LVL125:
 567:usb_serial.c  **** 			case 39: UEDATX = *buffer++;
 1142               		.loc 1 567 20 view .LVU393
 1143 0190 8093 F100 		sts 241,r24
 567:usb_serial.c  **** 			case 39: UEDATX = *buffer++;
 1144               		.loc 1 567 29 view .LVU394
 1145 0194 CF01      		movw r24,r30
 1146               	.LVL126:
 1147               	.L91:
 568:usb_serial.c  **** 			case 38: UEDATX = *buffer++;
 1148               		.loc 1 568 13 is_stmt 1 view .LVU395
 568:usb_serial.c  **** 			case 38: UEDATX = *buffer++;
 1149               		.loc 1 568 29 is_stmt 0 view .LVU396
 1150 0196 FC01      		movw r30,r24
 1151               	.LVL127:
 568:usb_serial.c  **** 			case 38: UEDATX = *buffer++;
 1152               		.loc 1 568 22 view .LVU397
 1153 0198 8191      		ld r24,Z+
 1154               	.LVL128:
 568:usb_serial.c  **** 			case 38: UEDATX = *buffer++;
 1155               		.loc 1 568 20 view .LVU398
 1156 019a 8093 F100 		sts 241,r24
 568:usb_serial.c  **** 			case 38: UEDATX = *buffer++;
 1157               		.loc 1 568 29 view .LVU399
 1158 019e CF01      		movw r24,r30
 1159               	.LVL129:
 1160               	.L92:
 569:usb_serial.c  **** 			case 37: UEDATX = *buffer++;
 1161               		.loc 1 569 13 is_stmt 1 view .LVU400
 569:usb_serial.c  **** 			case 37: UEDATX = *buffer++;
 1162               		.loc 1 569 29 is_stmt 0 view .LVU401
 1163 01a0 FC01      		movw r30,r24
 1164               	.LVL130:
 569:usb_serial.c  **** 			case 37: UEDATX = *buffer++;
 1165               		.loc 1 569 22 view .LVU402
 1166 01a2 8191      		ld r24,Z+
 1167               	.LVL131:
 569:usb_serial.c  **** 			case 37: UEDATX = *buffer++;
 1168               		.loc 1 569 20 view .LVU403
 1169 01a4 8093 F100 		sts 241,r24
 569:usb_serial.c  **** 			case 37: UEDATX = *buffer++;
 1170               		.loc 1 569 29 view .LVU404
 1171 01a8 CF01      		movw r24,r30
 1172               	.LVL132:
 1173               	.L93:
 570:usb_serial.c  **** 			case 36: UEDATX = *buffer++;
 1174               		.loc 1 570 13 is_stmt 1 view .LVU405
 570:usb_serial.c  **** 			case 36: UEDATX = *buffer++;
 1175               		.loc 1 570 29 is_stmt 0 view .LVU406
 1176 01aa FC01      		movw r30,r24
 1177               	.LVL133:
 570:usb_serial.c  **** 			case 36: UEDATX = *buffer++;
 1178               		.loc 1 570 22 view .LVU407
 1179 01ac 8191      		ld r24,Z+
 1180               	.LVL134:
 570:usb_serial.c  **** 			case 36: UEDATX = *buffer++;
 1181               		.loc 1 570 20 view .LVU408
 1182 01ae 8093 F100 		sts 241,r24
 570:usb_serial.c  **** 			case 36: UEDATX = *buffer++;
 1183               		.loc 1 570 29 view .LVU409
 1184 01b2 CF01      		movw r24,r30
 1185               	.LVL135:
 1186               	.L94:
 571:usb_serial.c  **** 			case 35: UEDATX = *buffer++;
 1187               		.loc 1 571 13 is_stmt 1 view .LVU410
 571:usb_serial.c  **** 			case 35: UEDATX = *buffer++;
 1188               		.loc 1 571 29 is_stmt 0 view .LVU411
 1189 01b4 FC01      		movw r30,r24
 1190               	.LVL136:
 571:usb_serial.c  **** 			case 35: UEDATX = *buffer++;
 1191               		.loc 1 571 22 view .LVU412
 1192 01b6 8191      		ld r24,Z+
 1193               	.LVL137:
 571:usb_serial.c  **** 			case 35: UEDATX = *buffer++;
 1194               		.loc 1 571 20 view .LVU413
 1195 01b8 8093 F100 		sts 241,r24
 571:usb_serial.c  **** 			case 35: UEDATX = *buffer++;
 1196               		.loc 1 571 29 view .LVU414
 1197 01bc CF01      		movw r24,r30
 1198               	.LVL138:
 1199               	.L95:
 572:usb_serial.c  **** 			case 34: UEDATX = *buffer++;
 1200               		.loc 1 572 13 is_stmt 1 view .LVU415
 572:usb_serial.c  **** 			case 34: UEDATX = *buffer++;
 1201               		.loc 1 572 29 is_stmt 0 view .LVU416
 1202 01be FC01      		movw r30,r24
 1203               	.LVL139:
 572:usb_serial.c  **** 			case 34: UEDATX = *buffer++;
 1204               		.loc 1 572 22 view .LVU417
 1205 01c0 8191      		ld r24,Z+
 1206               	.LVL140:
 572:usb_serial.c  **** 			case 34: UEDATX = *buffer++;
 1207               		.loc 1 572 20 view .LVU418
 1208 01c2 8093 F100 		sts 241,r24
 572:usb_serial.c  **** 			case 34: UEDATX = *buffer++;
 1209               		.loc 1 572 29 view .LVU419
 1210 01c6 CF01      		movw r24,r30
 1211               	.LVL141:
 1212               	.L96:
 573:usb_serial.c  **** 			case 33: UEDATX = *buffer++;
 1213               		.loc 1 573 13 is_stmt 1 view .LVU420
 573:usb_serial.c  **** 			case 33: UEDATX = *buffer++;
 1214               		.loc 1 573 29 is_stmt 0 view .LVU421
 1215 01c8 FC01      		movw r30,r24
 1216               	.LVL142:
 573:usb_serial.c  **** 			case 33: UEDATX = *buffer++;
 1217               		.loc 1 573 22 view .LVU422
 1218 01ca 8191      		ld r24,Z+
 1219               	.LVL143:
 573:usb_serial.c  **** 			case 33: UEDATX = *buffer++;
 1220               		.loc 1 573 20 view .LVU423
 1221 01cc 8093 F100 		sts 241,r24
 573:usb_serial.c  **** 			case 33: UEDATX = *buffer++;
 1222               		.loc 1 573 29 view .LVU424
 1223 01d0 CF01      		movw r24,r30
 1224               	.LVL144:
 1225               	.L97:
 574:usb_serial.c  **** 			#endif
 1226               		.loc 1 574 13 is_stmt 1 view .LVU425
 574:usb_serial.c  **** 			#endif
 1227               		.loc 1 574 29 is_stmt 0 view .LVU426
 1228 01d2 FC01      		movw r30,r24
 1229               	.LVL145:
 574:usb_serial.c  **** 			#endif
 1230               		.loc 1 574 22 view .LVU427
 1231 01d4 8191      		ld r24,Z+
 1232               	.LVL146:
 574:usb_serial.c  **** 			#endif
 1233               		.loc 1 574 20 view .LVU428
 1234 01d6 8093 F100 		sts 241,r24
 574:usb_serial.c  **** 			#endif
 1235               		.loc 1 574 29 view .LVU429
 1236 01da CF01      		movw r24,r30
 1237               	.LVL147:
 1238               	.L98:
 577:usb_serial.c  **** 			case 31: UEDATX = *buffer++;
 1239               		.loc 1 577 13 is_stmt 1 view .LVU430
 577:usb_serial.c  **** 			case 31: UEDATX = *buffer++;
 1240               		.loc 1 577 29 is_stmt 0 view .LVU431
 1241 01dc FC01      		movw r30,r24
 1242               	.LVL148:
 577:usb_serial.c  **** 			case 31: UEDATX = *buffer++;
 1243               		.loc 1 577 22 view .LVU432
 1244 01de 8191      		ld r24,Z+
 1245               	.LVL149:
 577:usb_serial.c  **** 			case 31: UEDATX = *buffer++;
 1246               		.loc 1 577 20 view .LVU433
 1247 01e0 8093 F100 		sts 241,r24
 577:usb_serial.c  **** 			case 31: UEDATX = *buffer++;
 1248               		.loc 1 577 29 view .LVU434
 1249 01e4 CF01      		movw r24,r30
 1250               	.LVL150:
 1251               	.L99:
 578:usb_serial.c  **** 			case 30: UEDATX = *buffer++;
 1252               		.loc 1 578 13 is_stmt 1 view .LVU435
 578:usb_serial.c  **** 			case 30: UEDATX = *buffer++;
 1253               		.loc 1 578 29 is_stmt 0 view .LVU436
 1254 01e6 FC01      		movw r30,r24
 1255               	.LVL151:
 578:usb_serial.c  **** 			case 30: UEDATX = *buffer++;
 1256               		.loc 1 578 22 view .LVU437
 1257 01e8 8191      		ld r24,Z+
 1258               	.LVL152:
 578:usb_serial.c  **** 			case 30: UEDATX = *buffer++;
 1259               		.loc 1 578 20 view .LVU438
 1260 01ea 8093 F100 		sts 241,r24
 578:usb_serial.c  **** 			case 30: UEDATX = *buffer++;
 1261               		.loc 1 578 29 view .LVU439
 1262 01ee CF01      		movw r24,r30
 1263               	.LVL153:
 1264               	.L100:
 579:usb_serial.c  **** 			case 29: UEDATX = *buffer++;
 1265               		.loc 1 579 13 is_stmt 1 view .LVU440
 579:usb_serial.c  **** 			case 29: UEDATX = *buffer++;
 1266               		.loc 1 579 29 is_stmt 0 view .LVU441
 1267 01f0 FC01      		movw r30,r24
 1268               	.LVL154:
 579:usb_serial.c  **** 			case 29: UEDATX = *buffer++;
 1269               		.loc 1 579 22 view .LVU442
 1270 01f2 8191      		ld r24,Z+
 1271               	.LVL155:
 579:usb_serial.c  **** 			case 29: UEDATX = *buffer++;
 1272               		.loc 1 579 20 view .LVU443
 1273 01f4 8093 F100 		sts 241,r24
 579:usb_serial.c  **** 			case 29: UEDATX = *buffer++;
 1274               		.loc 1 579 29 view .LVU444
 1275 01f8 CF01      		movw r24,r30
 1276               	.LVL156:
 1277               	.L101:
 580:usb_serial.c  **** 			case 28: UEDATX = *buffer++;
 1278               		.loc 1 580 13 is_stmt 1 view .LVU445
 580:usb_serial.c  **** 			case 28: UEDATX = *buffer++;
 1279               		.loc 1 580 29 is_stmt 0 view .LVU446
 1280 01fa FC01      		movw r30,r24
 1281               	.LVL157:
 580:usb_serial.c  **** 			case 28: UEDATX = *buffer++;
 1282               		.loc 1 580 22 view .LVU447
 1283 01fc 8191      		ld r24,Z+
 1284               	.LVL158:
 580:usb_serial.c  **** 			case 28: UEDATX = *buffer++;
 1285               		.loc 1 580 20 view .LVU448
 1286 01fe 8093 F100 		sts 241,r24
 580:usb_serial.c  **** 			case 28: UEDATX = *buffer++;
 1287               		.loc 1 580 29 view .LVU449
 1288 0202 CF01      		movw r24,r30
 1289               	.LVL159:
 1290               	.L102:
 581:usb_serial.c  **** 			case 27: UEDATX = *buffer++;
 1291               		.loc 1 581 13 is_stmt 1 view .LVU450
 581:usb_serial.c  **** 			case 27: UEDATX = *buffer++;
 1292               		.loc 1 581 29 is_stmt 0 view .LVU451
 1293 0204 FC01      		movw r30,r24
 1294               	.LVL160:
 581:usb_serial.c  **** 			case 27: UEDATX = *buffer++;
 1295               		.loc 1 581 22 view .LVU452
 1296 0206 8191      		ld r24,Z+
 1297               	.LVL161:
 581:usb_serial.c  **** 			case 27: UEDATX = *buffer++;
 1298               		.loc 1 581 20 view .LVU453
 1299 0208 8093 F100 		sts 241,r24
 581:usb_serial.c  **** 			case 27: UEDATX = *buffer++;
 1300               		.loc 1 581 29 view .LVU454
 1301 020c CF01      		movw r24,r30
 1302               	.LVL162:
 1303               	.L103:
 582:usb_serial.c  **** 			case 26: UEDATX = *buffer++;
 1304               		.loc 1 582 13 is_stmt 1 view .LVU455
 582:usb_serial.c  **** 			case 26: UEDATX = *buffer++;
 1305               		.loc 1 582 29 is_stmt 0 view .LVU456
 1306 020e FC01      		movw r30,r24
 1307               	.LVL163:
 582:usb_serial.c  **** 			case 26: UEDATX = *buffer++;
 1308               		.loc 1 582 22 view .LVU457
 1309 0210 8191      		ld r24,Z+
 1310               	.LVL164:
 582:usb_serial.c  **** 			case 26: UEDATX = *buffer++;
 1311               		.loc 1 582 20 view .LVU458
 1312 0212 8093 F100 		sts 241,r24
 582:usb_serial.c  **** 			case 26: UEDATX = *buffer++;
 1313               		.loc 1 582 29 view .LVU459
 1314 0216 CF01      		movw r24,r30
 1315               	.LVL165:
 1316               	.L104:
 583:usb_serial.c  **** 			case 25: UEDATX = *buffer++;
 1317               		.loc 1 583 13 is_stmt 1 view .LVU460
 583:usb_serial.c  **** 			case 25: UEDATX = *buffer++;
 1318               		.loc 1 583 29 is_stmt 0 view .LVU461
 1319 0218 FC01      		movw r30,r24
 1320               	.LVL166:
 583:usb_serial.c  **** 			case 25: UEDATX = *buffer++;
 1321               		.loc 1 583 22 view .LVU462
 1322 021a 8191      		ld r24,Z+
 1323               	.LVL167:
 583:usb_serial.c  **** 			case 25: UEDATX = *buffer++;
 1324               		.loc 1 583 20 view .LVU463
 1325 021c 8093 F100 		sts 241,r24
 583:usb_serial.c  **** 			case 25: UEDATX = *buffer++;
 1326               		.loc 1 583 29 view .LVU464
 1327 0220 CF01      		movw r24,r30
 1328               	.LVL168:
 1329               	.L105:
 584:usb_serial.c  **** 			case 24: UEDATX = *buffer++;
 1330               		.loc 1 584 13 is_stmt 1 view .LVU465
 584:usb_serial.c  **** 			case 24: UEDATX = *buffer++;
 1331               		.loc 1 584 29 is_stmt 0 view .LVU466
 1332 0222 FC01      		movw r30,r24
 1333               	.LVL169:
 584:usb_serial.c  **** 			case 24: UEDATX = *buffer++;
 1334               		.loc 1 584 22 view .LVU467
 1335 0224 8191      		ld r24,Z+
 1336               	.LVL170:
 584:usb_serial.c  **** 			case 24: UEDATX = *buffer++;
 1337               		.loc 1 584 20 view .LVU468
 1338 0226 8093 F100 		sts 241,r24
 584:usb_serial.c  **** 			case 24: UEDATX = *buffer++;
 1339               		.loc 1 584 29 view .LVU469
 1340 022a CF01      		movw r24,r30
 1341               	.LVL171:
 1342               	.L106:
 585:usb_serial.c  **** 			case 23: UEDATX = *buffer++;
 1343               		.loc 1 585 13 is_stmt 1 view .LVU470
 585:usb_serial.c  **** 			case 23: UEDATX = *buffer++;
 1344               		.loc 1 585 29 is_stmt 0 view .LVU471
 1345 022c FC01      		movw r30,r24
 1346               	.LVL172:
 585:usb_serial.c  **** 			case 23: UEDATX = *buffer++;
 1347               		.loc 1 585 22 view .LVU472
 1348 022e 8191      		ld r24,Z+
 1349               	.LVL173:
 585:usb_serial.c  **** 			case 23: UEDATX = *buffer++;
 1350               		.loc 1 585 20 view .LVU473
 1351 0230 8093 F100 		sts 241,r24
 585:usb_serial.c  **** 			case 23: UEDATX = *buffer++;
 1352               		.loc 1 585 29 view .LVU474
 1353 0234 CF01      		movw r24,r30
 1354               	.LVL174:
 1355               	.L107:
 586:usb_serial.c  **** 			case 22: UEDATX = *buffer++;
 1356               		.loc 1 586 13 is_stmt 1 view .LVU475
 586:usb_serial.c  **** 			case 22: UEDATX = *buffer++;
 1357               		.loc 1 586 29 is_stmt 0 view .LVU476
 1358 0236 FC01      		movw r30,r24
 1359               	.LVL175:
 586:usb_serial.c  **** 			case 22: UEDATX = *buffer++;
 1360               		.loc 1 586 22 view .LVU477
 1361 0238 8191      		ld r24,Z+
 1362               	.LVL176:
 586:usb_serial.c  **** 			case 22: UEDATX = *buffer++;
 1363               		.loc 1 586 20 view .LVU478
 1364 023a 8093 F100 		sts 241,r24
 586:usb_serial.c  **** 			case 22: UEDATX = *buffer++;
 1365               		.loc 1 586 29 view .LVU479
 1366 023e CF01      		movw r24,r30
 1367               	.LVL177:
 1368               	.L108:
 587:usb_serial.c  **** 			case 21: UEDATX = *buffer++;
 1369               		.loc 1 587 13 is_stmt 1 view .LVU480
 587:usb_serial.c  **** 			case 21: UEDATX = *buffer++;
 1370               		.loc 1 587 29 is_stmt 0 view .LVU481
 1371 0240 FC01      		movw r30,r24
 1372               	.LVL178:
 587:usb_serial.c  **** 			case 21: UEDATX = *buffer++;
 1373               		.loc 1 587 22 view .LVU482
 1374 0242 8191      		ld r24,Z+
 1375               	.LVL179:
 587:usb_serial.c  **** 			case 21: UEDATX = *buffer++;
 1376               		.loc 1 587 20 view .LVU483
 1377 0244 8093 F100 		sts 241,r24
 587:usb_serial.c  **** 			case 21: UEDATX = *buffer++;
 1378               		.loc 1 587 29 view .LVU484
 1379 0248 CF01      		movw r24,r30
 1380               	.LVL180:
 1381               	.L109:
 588:usb_serial.c  **** 			case 20: UEDATX = *buffer++;
 1382               		.loc 1 588 13 is_stmt 1 view .LVU485
 588:usb_serial.c  **** 			case 20: UEDATX = *buffer++;
 1383               		.loc 1 588 29 is_stmt 0 view .LVU486
 1384 024a FC01      		movw r30,r24
 1385               	.LVL181:
 588:usb_serial.c  **** 			case 20: UEDATX = *buffer++;
 1386               		.loc 1 588 22 view .LVU487
 1387 024c 8191      		ld r24,Z+
 1388               	.LVL182:
 588:usb_serial.c  **** 			case 20: UEDATX = *buffer++;
 1389               		.loc 1 588 20 view .LVU488
 1390 024e 8093 F100 		sts 241,r24
 588:usb_serial.c  **** 			case 20: UEDATX = *buffer++;
 1391               		.loc 1 588 29 view .LVU489
 1392 0252 CF01      		movw r24,r30
 1393               	.LVL183:
 1394               	.L110:
 589:usb_serial.c  **** 			case 19: UEDATX = *buffer++;
 1395               		.loc 1 589 13 is_stmt 1 view .LVU490
 589:usb_serial.c  **** 			case 19: UEDATX = *buffer++;
 1396               		.loc 1 589 29 is_stmt 0 view .LVU491
 1397 0254 FC01      		movw r30,r24
 1398               	.LVL184:
 589:usb_serial.c  **** 			case 19: UEDATX = *buffer++;
 1399               		.loc 1 589 22 view .LVU492
 1400 0256 8191      		ld r24,Z+
 1401               	.LVL185:
 589:usb_serial.c  **** 			case 19: UEDATX = *buffer++;
 1402               		.loc 1 589 20 view .LVU493
 1403 0258 8093 F100 		sts 241,r24
 589:usb_serial.c  **** 			case 19: UEDATX = *buffer++;
 1404               		.loc 1 589 29 view .LVU494
 1405 025c CF01      		movw r24,r30
 1406               	.LVL186:
 1407               	.L111:
 590:usb_serial.c  **** 			case 18: UEDATX = *buffer++;
 1408               		.loc 1 590 13 is_stmt 1 view .LVU495
 590:usb_serial.c  **** 			case 18: UEDATX = *buffer++;
 1409               		.loc 1 590 29 is_stmt 0 view .LVU496
 1410 025e FC01      		movw r30,r24
 1411               	.LVL187:
 590:usb_serial.c  **** 			case 18: UEDATX = *buffer++;
 1412               		.loc 1 590 22 view .LVU497
 1413 0260 8191      		ld r24,Z+
 1414               	.LVL188:
 590:usb_serial.c  **** 			case 18: UEDATX = *buffer++;
 1415               		.loc 1 590 20 view .LVU498
 1416 0262 8093 F100 		sts 241,r24
 590:usb_serial.c  **** 			case 18: UEDATX = *buffer++;
 1417               		.loc 1 590 29 view .LVU499
 1418 0266 CF01      		movw r24,r30
 1419               	.LVL189:
 1420               	.L112:
 591:usb_serial.c  **** 			case 17: UEDATX = *buffer++;
 1421               		.loc 1 591 13 is_stmt 1 view .LVU500
 591:usb_serial.c  **** 			case 17: UEDATX = *buffer++;
 1422               		.loc 1 591 29 is_stmt 0 view .LVU501
 1423 0268 FC01      		movw r30,r24
 1424               	.LVL190:
 591:usb_serial.c  **** 			case 17: UEDATX = *buffer++;
 1425               		.loc 1 591 22 view .LVU502
 1426 026a 8191      		ld r24,Z+
 1427               	.LVL191:
 591:usb_serial.c  **** 			case 17: UEDATX = *buffer++;
 1428               		.loc 1 591 20 view .LVU503
 1429 026c 8093 F100 		sts 241,r24
 591:usb_serial.c  **** 			case 17: UEDATX = *buffer++;
 1430               		.loc 1 591 29 view .LVU504
 1431 0270 CF01      		movw r24,r30
 1432               	.LVL192:
 1433               	.L113:
 592:usb_serial.c  **** 			#endif
 1434               		.loc 1 592 13 is_stmt 1 view .LVU505
 592:usb_serial.c  **** 			#endif
 1435               		.loc 1 592 29 is_stmt 0 view .LVU506
 1436 0272 FC01      		movw r30,r24
 1437               	.LVL193:
 592:usb_serial.c  **** 			#endif
 1438               		.loc 1 592 22 view .LVU507
 1439 0274 8191      		ld r24,Z+
 1440               	.LVL194:
 592:usb_serial.c  **** 			#endif
 1441               		.loc 1 592 20 view .LVU508
 1442 0276 8093 F100 		sts 241,r24
 592:usb_serial.c  **** 			#endif
 1443               		.loc 1 592 29 view .LVU509
 1444 027a CF01      		movw r24,r30
 1445               	.LVL195:
 1446               	.L114:
 595:usb_serial.c  **** 			case 15: UEDATX = *buffer++;
 1447               		.loc 1 595 13 is_stmt 1 view .LVU510
 595:usb_serial.c  **** 			case 15: UEDATX = *buffer++;
 1448               		.loc 1 595 29 is_stmt 0 view .LVU511
 1449 027c FC01      		movw r30,r24
 1450               	.LVL196:
 595:usb_serial.c  **** 			case 15: UEDATX = *buffer++;
 1451               		.loc 1 595 22 view .LVU512
 1452 027e 8191      		ld r24,Z+
 1453               	.LVL197:
 595:usb_serial.c  **** 			case 15: UEDATX = *buffer++;
 1454               		.loc 1 595 20 view .LVU513
 1455 0280 8093 F100 		sts 241,r24
 595:usb_serial.c  **** 			case 15: UEDATX = *buffer++;
 1456               		.loc 1 595 29 view .LVU514
 1457 0284 CF01      		movw r24,r30
 1458               	.LVL198:
 1459               	.L115:
 596:usb_serial.c  **** 			case 14: UEDATX = *buffer++;
 1460               		.loc 1 596 13 is_stmt 1 view .LVU515
 596:usb_serial.c  **** 			case 14: UEDATX = *buffer++;
 1461               		.loc 1 596 29 is_stmt 0 view .LVU516
 1462 0286 FC01      		movw r30,r24
 1463               	.LVL199:
 596:usb_serial.c  **** 			case 14: UEDATX = *buffer++;
 1464               		.loc 1 596 22 view .LVU517
 1465 0288 8191      		ld r24,Z+
 1466               	.LVL200:
 596:usb_serial.c  **** 			case 14: UEDATX = *buffer++;
 1467               		.loc 1 596 20 view .LVU518
 1468 028a 8093 F100 		sts 241,r24
 596:usb_serial.c  **** 			case 14: UEDATX = *buffer++;
 1469               		.loc 1 596 29 view .LVU519
 1470 028e CF01      		movw r24,r30
 1471               	.LVL201:
 1472               	.L116:
 597:usb_serial.c  **** 			case 13: UEDATX = *buffer++;
 1473               		.loc 1 597 13 is_stmt 1 view .LVU520
 597:usb_serial.c  **** 			case 13: UEDATX = *buffer++;
 1474               		.loc 1 597 29 is_stmt 0 view .LVU521
 1475 0290 FC01      		movw r30,r24
 1476               	.LVL202:
 597:usb_serial.c  **** 			case 13: UEDATX = *buffer++;
 1477               		.loc 1 597 22 view .LVU522
 1478 0292 8191      		ld r24,Z+
 1479               	.LVL203:
 597:usb_serial.c  **** 			case 13: UEDATX = *buffer++;
 1480               		.loc 1 597 20 view .LVU523
 1481 0294 8093 F100 		sts 241,r24
 597:usb_serial.c  **** 			case 13: UEDATX = *buffer++;
 1482               		.loc 1 597 29 view .LVU524
 1483 0298 CF01      		movw r24,r30
 1484               	.LVL204:
 1485               	.L117:
 598:usb_serial.c  **** 			case 12: UEDATX = *buffer++;
 1486               		.loc 1 598 13 is_stmt 1 view .LVU525
 598:usb_serial.c  **** 			case 12: UEDATX = *buffer++;
 1487               		.loc 1 598 29 is_stmt 0 view .LVU526
 1488 029a FC01      		movw r30,r24
 1489               	.LVL205:
 598:usb_serial.c  **** 			case 12: UEDATX = *buffer++;
 1490               		.loc 1 598 22 view .LVU527
 1491 029c 8191      		ld r24,Z+
 1492               	.LVL206:
 598:usb_serial.c  **** 			case 12: UEDATX = *buffer++;
 1493               		.loc 1 598 20 view .LVU528
 1494 029e 8093 F100 		sts 241,r24
 598:usb_serial.c  **** 			case 12: UEDATX = *buffer++;
 1495               		.loc 1 598 29 view .LVU529
 1496 02a2 CF01      		movw r24,r30
 1497               	.LVL207:
 1498               	.L118:
 599:usb_serial.c  **** 			case 11: UEDATX = *buffer++;
 1499               		.loc 1 599 13 is_stmt 1 view .LVU530
 599:usb_serial.c  **** 			case 11: UEDATX = *buffer++;
 1500               		.loc 1 599 29 is_stmt 0 view .LVU531
 1501 02a4 FC01      		movw r30,r24
 1502               	.LVL208:
 599:usb_serial.c  **** 			case 11: UEDATX = *buffer++;
 1503               		.loc 1 599 22 view .LVU532
 1504 02a6 8191      		ld r24,Z+
 1505               	.LVL209:
 599:usb_serial.c  **** 			case 11: UEDATX = *buffer++;
 1506               		.loc 1 599 20 view .LVU533
 1507 02a8 8093 F100 		sts 241,r24
 599:usb_serial.c  **** 			case 11: UEDATX = *buffer++;
 1508               		.loc 1 599 29 view .LVU534
 1509 02ac CF01      		movw r24,r30
 1510               	.LVL210:
 1511               	.L119:
 600:usb_serial.c  **** 			case 10: UEDATX = *buffer++;
 1512               		.loc 1 600 13 is_stmt 1 view .LVU535
 600:usb_serial.c  **** 			case 10: UEDATX = *buffer++;
 1513               		.loc 1 600 29 is_stmt 0 view .LVU536
 1514 02ae FC01      		movw r30,r24
 1515               	.LVL211:
 600:usb_serial.c  **** 			case 10: UEDATX = *buffer++;
 1516               		.loc 1 600 22 view .LVU537
 1517 02b0 8191      		ld r24,Z+
 1518               	.LVL212:
 600:usb_serial.c  **** 			case 10: UEDATX = *buffer++;
 1519               		.loc 1 600 20 view .LVU538
 1520 02b2 8093 F100 		sts 241,r24
 600:usb_serial.c  **** 			case 10: UEDATX = *buffer++;
 1521               		.loc 1 600 29 view .LVU539
 1522 02b6 CF01      		movw r24,r30
 1523               	.LVL213:
 1524               	.L120:
 601:usb_serial.c  **** 			case  9: UEDATX = *buffer++;
 1525               		.loc 1 601 13 is_stmt 1 view .LVU540
 601:usb_serial.c  **** 			case  9: UEDATX = *buffer++;
 1526               		.loc 1 601 29 is_stmt 0 view .LVU541
 1527 02b8 FC01      		movw r30,r24
 1528               	.LVL214:
 601:usb_serial.c  **** 			case  9: UEDATX = *buffer++;
 1529               		.loc 1 601 22 view .LVU542
 1530 02ba 8191      		ld r24,Z+
 1531               	.LVL215:
 601:usb_serial.c  **** 			case  9: UEDATX = *buffer++;
 1532               		.loc 1 601 20 view .LVU543
 1533 02bc 8093 F100 		sts 241,r24
 601:usb_serial.c  **** 			case  9: UEDATX = *buffer++;
 1534               		.loc 1 601 29 view .LVU544
 1535 02c0 CF01      		movw r24,r30
 1536               	.LVL216:
 1537               	.L121:
 602:usb_serial.c  **** 			#endif
 1538               		.loc 1 602 13 is_stmt 1 view .LVU545
 602:usb_serial.c  **** 			#endif
 1539               		.loc 1 602 29 is_stmt 0 view .LVU546
 1540 02c2 FC01      		movw r30,r24
 1541               	.LVL217:
 602:usb_serial.c  **** 			#endif
 1542               		.loc 1 602 22 view .LVU547
 1543 02c4 8191      		ld r24,Z+
 1544               	.LVL218:
 602:usb_serial.c  **** 			#endif
 1545               		.loc 1 602 20 view .LVU548
 1546 02c6 8093 F100 		sts 241,r24
 602:usb_serial.c  **** 			#endif
 1547               		.loc 1 602 29 view .LVU549
 1548 02ca CF01      		movw r24,r30
 1549               	.LVL219:
 1550               	.L122:
 604:usb_serial.c  **** 			case  7: UEDATX = *buffer++;
 1551               		.loc 1 604 13 is_stmt 1 view .LVU550
 604:usb_serial.c  **** 			case  7: UEDATX = *buffer++;
 1552               		.loc 1 604 29 is_stmt 0 view .LVU551
 1553 02cc FC01      		movw r30,r24
 1554               	.LVL220:
 604:usb_serial.c  **** 			case  7: UEDATX = *buffer++;
 1555               		.loc 1 604 22 view .LVU552
 1556 02ce 8191      		ld r24,Z+
 1557               	.LVL221:
 604:usb_serial.c  **** 			case  7: UEDATX = *buffer++;
 1558               		.loc 1 604 20 view .LVU553
 1559 02d0 8093 F100 		sts 241,r24
 604:usb_serial.c  **** 			case  7: UEDATX = *buffer++;
 1560               		.loc 1 604 29 view .LVU554
 1561 02d4 CF01      		movw r24,r30
 1562               	.LVL222:
 1563               	.L123:
 605:usb_serial.c  **** 			case  6: UEDATX = *buffer++;
 1564               		.loc 1 605 13 is_stmt 1 view .LVU555
 605:usb_serial.c  **** 			case  6: UEDATX = *buffer++;
 1565               		.loc 1 605 29 is_stmt 0 view .LVU556
 1566 02d6 FC01      		movw r30,r24
 1567               	.LVL223:
 605:usb_serial.c  **** 			case  6: UEDATX = *buffer++;
 1568               		.loc 1 605 22 view .LVU557
 1569 02d8 8191      		ld r24,Z+
 1570               	.LVL224:
 605:usb_serial.c  **** 			case  6: UEDATX = *buffer++;
 1571               		.loc 1 605 20 view .LVU558
 1572 02da 8093 F100 		sts 241,r24
 605:usb_serial.c  **** 			case  6: UEDATX = *buffer++;
 1573               		.loc 1 605 29 view .LVU559
 1574 02de CF01      		movw r24,r30
 1575               	.LVL225:
 1576               	.L124:
 606:usb_serial.c  **** 			case  5: UEDATX = *buffer++;
 1577               		.loc 1 606 13 is_stmt 1 view .LVU560
 606:usb_serial.c  **** 			case  5: UEDATX = *buffer++;
 1578               		.loc 1 606 29 is_stmt 0 view .LVU561
 1579 02e0 FC01      		movw r30,r24
 1580               	.LVL226:
 606:usb_serial.c  **** 			case  5: UEDATX = *buffer++;
 1581               		.loc 1 606 22 view .LVU562
 1582 02e2 8191      		ld r24,Z+
 1583               	.LVL227:
 606:usb_serial.c  **** 			case  5: UEDATX = *buffer++;
 1584               		.loc 1 606 20 view .LVU563
 1585 02e4 8093 F100 		sts 241,r24
 606:usb_serial.c  **** 			case  5: UEDATX = *buffer++;
 1586               		.loc 1 606 29 view .LVU564
 1587 02e8 CF01      		movw r24,r30
 1588               	.LVL228:
 1589               	.L125:
 607:usb_serial.c  **** 			case  4: UEDATX = *buffer++;
 1590               		.loc 1 607 13 is_stmt 1 view .LVU565
 607:usb_serial.c  **** 			case  4: UEDATX = *buffer++;
 1591               		.loc 1 607 29 is_stmt 0 view .LVU566
 1592 02ea FC01      		movw r30,r24
 1593               	.LVL229:
 607:usb_serial.c  **** 			case  4: UEDATX = *buffer++;
 1594               		.loc 1 607 22 view .LVU567
 1595 02ec 8191      		ld r24,Z+
 1596               	.LVL230:
 607:usb_serial.c  **** 			case  4: UEDATX = *buffer++;
 1597               		.loc 1 607 20 view .LVU568
 1598 02ee 8093 F100 		sts 241,r24
 607:usb_serial.c  **** 			case  4: UEDATX = *buffer++;
 1599               		.loc 1 607 29 view .LVU569
 1600 02f2 CF01      		movw r24,r30
 1601               	.LVL231:
 1602               	.L126:
 608:usb_serial.c  **** 			case  3: UEDATX = *buffer++;
 1603               		.loc 1 608 13 is_stmt 1 view .LVU570
 608:usb_serial.c  **** 			case  3: UEDATX = *buffer++;
 1604               		.loc 1 608 29 is_stmt 0 view .LVU571
 1605 02f4 FC01      		movw r30,r24
 1606               	.LVL232:
 608:usb_serial.c  **** 			case  3: UEDATX = *buffer++;
 1607               		.loc 1 608 22 view .LVU572
 1608 02f6 8191      		ld r24,Z+
 1609               	.LVL233:
 608:usb_serial.c  **** 			case  3: UEDATX = *buffer++;
 1610               		.loc 1 608 20 view .LVU573
 1611 02f8 8093 F100 		sts 241,r24
 608:usb_serial.c  **** 			case  3: UEDATX = *buffer++;
 1612               		.loc 1 608 29 view .LVU574
 1613 02fc CF01      		movw r24,r30
 1614               	.LVL234:
 1615               	.L127:
 609:usb_serial.c  **** 			case  2: UEDATX = *buffer++;
 1616               		.loc 1 609 13 is_stmt 1 view .LVU575
 609:usb_serial.c  **** 			case  2: UEDATX = *buffer++;
 1617               		.loc 1 609 29 is_stmt 0 view .LVU576
 1618 02fe FC01      		movw r30,r24
 1619               	.LVL235:
 609:usb_serial.c  **** 			case  2: UEDATX = *buffer++;
 1620               		.loc 1 609 22 view .LVU577
 1621 0300 8191      		ld r24,Z+
 1622               	.LVL236:
 609:usb_serial.c  **** 			case  2: UEDATX = *buffer++;
 1623               		.loc 1 609 20 view .LVU578
 1624 0302 8093 F100 		sts 241,r24
 609:usb_serial.c  **** 			case  2: UEDATX = *buffer++;
 1625               		.loc 1 609 29 view .LVU579
 1626 0306 CF01      		movw r24,r30
 1627               	.LVL237:
 1628               	.L128:
 610:usb_serial.c  **** 			default:
 1629               		.loc 1 610 13 is_stmt 1 view .LVU580
 610:usb_serial.c  **** 			default:
 1630               		.loc 1 610 29 is_stmt 0 view .LVU581
 1631 0308 FC01      		movw r30,r24
 1632               	.LVL238:
 610:usb_serial.c  **** 			default:
 1633               		.loc 1 610 22 view .LVU582
 1634 030a 8191      		ld r24,Z+
 1635               	.LVL239:
 610:usb_serial.c  **** 			default:
 1636               		.loc 1 610 20 view .LVU583
 1637 030c 8093 F100 		sts 241,r24
 610:usb_serial.c  **** 			default:
 1638               		.loc 1 610 29 view .LVU584
 1639 0310 CF01      		movw r24,r30
 1640               	.LVL240:
 1641               	.L64:
 612:usb_serial.c  **** 			case  0: break;
 1642               		.loc 1 612 13 is_stmt 1 view .LVU585
 612:usb_serial.c  **** 			case  0: break;
 1643               		.loc 1 612 29 is_stmt 0 view .LVU586
 1644 0312 FC01      		movw r30,r24
 1645               	.LVL241:
 612:usb_serial.c  **** 			case  0: break;
 1646               		.loc 1 612 22 view .LVU587
 1647 0314 8191      		ld r24,Z+
 1648               	.LVL242:
 612:usb_serial.c  **** 			case  0: break;
 1649               		.loc 1 612 20 view .LVU588
 1650 0316 8093 F100 		sts 241,r24
 612:usb_serial.c  **** 			case  0: break;
 1651               		.loc 1 612 29 view .LVU589
 1652 031a CF01      		movw r24,r30
 1653               	.LVL243:
 1654               	.L129:
 613:usb_serial.c  **** 		}
 1655               		.loc 1 613 13 is_stmt 1 view .LVU590
 616:usb_serial.c  **** 		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 1656               		.loc 1 616 3 view .LVU591
 616:usb_serial.c  **** 		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 1657               		.loc 1 616 9 is_stmt 0 view .LVU592
 1658 031c E091 E800 		lds r30,232
 616:usb_serial.c  **** 		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 1659               		.loc 1 616 6 view .LVU593
 1660 0320 E5FF      		sbrs r30,5
 616:usb_serial.c  **** 		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 1661               		.loc 1 616 30 is_stmt 1 discriminator 1 view .LVU594
 616:usb_serial.c  **** 		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 1662               		.loc 1 616 37 is_stmt 0 discriminator 1 view .LVU595
 1663 0322 7093 E800 		sts 232,r23
 1664               	.L130:
 617:usb_serial.c  **** 		SREG = intr_state;
 1665               		.loc 1 617 3 is_stmt 1 view .LVU596
 617:usb_serial.c  **** 		SREG = intr_state;
 1666               		.loc 1 617 24 is_stmt 0 view .LVU597
 1667 0326 A093 0000 		sts transmit_flush_timer,r26
 618:usb_serial.c  **** 	}
 1668               		.loc 1 618 3 is_stmt 1 view .LVU598
 618:usb_serial.c  **** 	}
 1669               		.loc 1 618 8 is_stmt 0 view .LVU599
 1670 032a 4FBF      		out __SREG__,r20
 1671 032c 00C0      		rjmp .L58
 1672               		.cfi_endproc
 1673               	.LFE8:
 1675               		.section	.text.usb_serial_flush_output,"ax",@progbits
 1676               	.global	usb_serial_flush_output
 1678               	usb_serial_flush_output:
 1679               	.LFB9:
 629:usb_serial.c  **** 	uint8_t intr_state;
 1680               		.loc 1 629 1 is_stmt 1 view -0
 1681               		.cfi_startproc
 1682               	/* prologue: function */
 1683               	/* frame size = 0 */
 1684               	/* stack size = 0 */
 1685               	.L__stack_usage = 0
 630:usb_serial.c  **** 
 1686               		.loc 1 630 2 view .LVU601
 632:usb_serial.c  **** 	cli();
 1687               		.loc 1 632 2 view .LVU602
 632:usb_serial.c  **** 	cli();
 1688               		.loc 1 632 13 is_stmt 0 view .LVU603
 1689 0000 8FB7      		in r24,__SREG__
 1690               	.LVL244:
 633:usb_serial.c  **** 	if (transmit_flush_timer) {
 1691               		.loc 1 633 2 is_stmt 1 view .LVU604
 1692               	/* #APP */
 1693               	 ;  633 "usb_serial.c" 1
 1694 0002 F894      		cli
 1695               	 ;  0 "" 2
 634:usb_serial.c  **** 		UENUM = CDC_TX_ENDPOINT;
 1696               		.loc 1 634 2 view .LVU605
 634:usb_serial.c  **** 		UENUM = CDC_TX_ENDPOINT;
 1697               		.loc 1 634 6 is_stmt 0 view .LVU606
 1698               	/* #NOAPP */
 1699 0004 9091 0000 		lds r25,transmit_flush_timer
 634:usb_serial.c  **** 		UENUM = CDC_TX_ENDPOINT;
 1700               		.loc 1 634 5 view .LVU607
 1701 0008 9923      		tst r25
 1702 000a 01F0      		breq .L140
 635:usb_serial.c  **** 		UEINTX = 0x3A;
 1703               		.loc 1 635 3 is_stmt 1 view .LVU608
 635:usb_serial.c  **** 		UEINTX = 0x3A;
 1704               		.loc 1 635 9 is_stmt 0 view .LVU609
 1705 000c 94E0      		ldi r25,lo8(4)
 1706 000e 9093 E900 		sts 233,r25
 636:usb_serial.c  **** 		transmit_flush_timer = 0;
 1707               		.loc 1 636 3 is_stmt 1 view .LVU610
 636:usb_serial.c  **** 		transmit_flush_timer = 0;
 1708               		.loc 1 636 10 is_stmt 0 view .LVU611
 1709 0012 9AE3      		ldi r25,lo8(58)
 1710 0014 9093 E800 		sts 232,r25
 637:usb_serial.c  **** 	}
 1711               		.loc 1 637 3 is_stmt 1 view .LVU612
 637:usb_serial.c  **** 	}
 1712               		.loc 1 637 24 is_stmt 0 view .LVU613
 1713 0018 1092 0000 		sts transmit_flush_timer,__zero_reg__
 1714               	.L140:
 639:usb_serial.c  **** }
 1715               		.loc 1 639 2 is_stmt 1 view .LVU614
 639:usb_serial.c  **** }
 1716               		.loc 1 639 7 is_stmt 0 view .LVU615
 1717 001c 8FBF      		out __SREG__,r24
 1718               	/* epilogue start */
 640:usb_serial.c  **** 
 1719               		.loc 1 640 1 view .LVU616
 1720 001e 0895      		ret
 1721               		.cfi_endproc
 1722               	.LFE9:
 1724               		.section	.text.usb_serial_get_baud,"ax",@progbits
 1725               	.global	usb_serial_get_baud
 1727               	usb_serial_get_baud:
 1728               	.LFB10:
 648:usb_serial.c  **** 	return *(uint32_t *)cdc_line_coding;
 1729               		.loc 1 648 1 is_stmt 1 view -0
 1730               		.cfi_startproc
 1731 0000 CF93      		push r28
 1732               	.LCFI0:
 1733               		.cfi_def_cfa_offset 3
 1734               		.cfi_offset 28, -2
 1735 0002 DF93      		push r29
 1736               	.LCFI1:
 1737               		.cfi_def_cfa_offset 4
 1738               		.cfi_offset 29, -3
 1739 0004 00D0      		rcall .
 1740 0006 00D0      		rcall .
 1741               	.LCFI2:
 1742               		.cfi_def_cfa_offset 8
 1743 0008 CDB7      		in r28,__SP_L__
 1744 000a DEB7      		in r29,__SP_H__
 1745               	.LCFI3:
 1746               		.cfi_def_cfa_register 28
 1747               	/* prologue: function */
 1748               	/* frame size = 4 */
 1749               	/* stack size = 6 */
 1750               	.L__stack_usage = 6
 649:usb_serial.c  **** }
 1751               		.loc 1 649 2 view .LVU618
 649:usb_serial.c  **** }
 1752               		.loc 1 649 9 is_stmt 0 view .LVU619
 1753 000c 8091 0000 		lds r24,cdc_line_coding
 1754 0010 9091 0000 		lds r25,cdc_line_coding+1
 1755 0014 A091 0000 		lds r26,cdc_line_coding+2
 1756 0018 B091 0000 		lds r27,cdc_line_coding+3
 650:usb_serial.c  **** uint8_t usb_serial_get_stopbits(void)
 1757               		.loc 1 650 1 view .LVU620
 1758 001c BC01      		movw r22,r24
 1759 001e CD01      		movw r24,r26
 1760               	/* epilogue start */
 1761 0020 0F90      		pop __tmp_reg__
 1762 0022 0F90      		pop __tmp_reg__
 1763 0024 0F90      		pop __tmp_reg__
 1764 0026 0F90      		pop __tmp_reg__
 1765 0028 DF91      		pop r29
 1766 002a CF91      		pop r28
 1767 002c 0895      		ret
 1768               		.cfi_endproc
 1769               	.LFE10:
 1771               		.section	.text.usb_serial_get_stopbits,"ax",@progbits
 1772               	.global	usb_serial_get_stopbits
 1774               	usb_serial_get_stopbits:
 1775               	.LFB11:
 652:usb_serial.c  **** 	return cdc_line_coding[4];
 1776               		.loc 1 652 1 is_stmt 1 view -0
 1777               		.cfi_startproc
 1778               	/* prologue: function */
 1779               	/* frame size = 0 */
 1780               	/* stack size = 0 */
 1781               	.L__stack_usage = 0
 653:usb_serial.c  **** }
 1782               		.loc 1 653 2 view .LVU622
 654:usb_serial.c  **** uint8_t usb_serial_get_paritytype(void)
 1783               		.loc 1 654 1 is_stmt 0 view .LVU623
 1784 0000 8091 0000 		lds r24,cdc_line_coding+4
 1785               	/* epilogue start */
 1786 0004 0895      		ret
 1787               		.cfi_endproc
 1788               	.LFE11:
 1790               		.section	.text.usb_serial_get_paritytype,"ax",@progbits
 1791               	.global	usb_serial_get_paritytype
 1793               	usb_serial_get_paritytype:
 1794               	.LFB12:
 656:usb_serial.c  **** 	return cdc_line_coding[5];
 1795               		.loc 1 656 1 is_stmt 1 view -0
 1796               		.cfi_startproc
 1797               	/* prologue: function */
 1798               	/* frame size = 0 */
 1799               	/* stack size = 0 */
 1800               	.L__stack_usage = 0
 657:usb_serial.c  **** }
 1801               		.loc 1 657 2 view .LVU625
 658:usb_serial.c  **** uint8_t usb_serial_get_numbits(void)
 1802               		.loc 1 658 1 is_stmt 0 view .LVU626
 1803 0000 8091 0000 		lds r24,cdc_line_coding+5
 1804               	/* epilogue start */
 1805 0004 0895      		ret
 1806               		.cfi_endproc
 1807               	.LFE12:
 1809               		.section	.text.usb_serial_get_numbits,"ax",@progbits
 1810               	.global	usb_serial_get_numbits
 1812               	usb_serial_get_numbits:
 1813               	.LFB13:
 660:usb_serial.c  **** 	return cdc_line_coding[6];
 1814               		.loc 1 660 1 is_stmt 1 view -0
 1815               		.cfi_startproc
 1816               	/* prologue: function */
 1817               	/* frame size = 0 */
 1818               	/* stack size = 0 */
 1819               	.L__stack_usage = 0
 661:usb_serial.c  **** }
 1820               		.loc 1 661 2 view .LVU628
 662:usb_serial.c  **** uint8_t usb_serial_get_control(void)
 1821               		.loc 1 662 1 is_stmt 0 view .LVU629
 1822 0000 8091 0000 		lds r24,cdc_line_coding+6
 1823               	/* epilogue start */
 1824 0004 0895      		ret
 1825               		.cfi_endproc
 1826               	.LFE13:
 1828               		.section	.text.usb_serial_get_control,"ax",@progbits
 1829               	.global	usb_serial_get_control
 1831               	usb_serial_get_control:
 1832               	.LFB14:
 664:usb_serial.c  **** 	return cdc_line_rtsdtr;
 1833               		.loc 1 664 1 is_stmt 1 view -0
 1834               		.cfi_startproc
 1835               	/* prologue: function */
 1836               	/* frame size = 0 */
 1837               	/* stack size = 0 */
 1838               	.L__stack_usage = 0
 665:usb_serial.c  **** }
 1839               		.loc 1 665 2 view .LVU631
 666:usb_serial.c  **** // write the control signals, DCD, DSR, RI, etc
 1840               		.loc 1 666 1 is_stmt 0 view .LVU632
 1841 0000 8091 0000 		lds r24,cdc_line_rtsdtr
 1842               	/* epilogue start */
 1843 0004 0895      		ret
 1844               		.cfi_endproc
 1845               	.LFE14:
 1847               		.section	.text.usb_serial_set_control,"ax",@progbits
 1848               	.global	usb_serial_set_control
 1850               	usb_serial_set_control:
 1851               	.LVL245:
 1852               	.LFB15:
 674:usb_serial.c  **** 	uint8_t intr_state;
 1853               		.loc 1 674 1 is_stmt 1 view -0
 1854               		.cfi_startproc
 1855               	/* prologue: function */
 1856               	/* frame size = 0 */
 1857               	/* stack size = 0 */
 1858               	.L__stack_usage = 0
 675:usb_serial.c  **** 
 1859               		.loc 1 675 2 view .LVU634
 677:usb_serial.c  **** 	cli();
 1860               		.loc 1 677 2 view .LVU635
 677:usb_serial.c  **** 	cli();
 1861               		.loc 1 677 13 is_stmt 0 view .LVU636
 1862 0000 9FB7      		in r25,__SREG__
 1863               	.LVL246:
 678:usb_serial.c  **** 	if (!usb_configuration) {
 1864               		.loc 1 678 2 is_stmt 1 view .LVU637
 1865               	/* #APP */
 1866               	 ;  678 "usb_serial.c" 1
 1867 0002 F894      		cli
 1868               	 ;  0 "" 2
 679:usb_serial.c  **** 		// we're not enumerated/configured
 1869               		.loc 1 679 2 view .LVU638
 679:usb_serial.c  **** 		// we're not enumerated/configured
 1870               		.loc 1 679 6 is_stmt 0 view .LVU639
 1871               	/* #NOAPP */
 1872 0004 2091 0000 		lds r18,usb_configuration
 679:usb_serial.c  **** 		// we're not enumerated/configured
 1873               		.loc 1 679 5 view .LVU640
 1874 0008 2111      		cpse r18,__zero_reg__
 1875 000a 00C0      		rjmp .L150
 1876               	.L153:
 690:usb_serial.c  **** 		return -1;
 1877               		.loc 1 690 3 is_stmt 1 view .LVU641
 690:usb_serial.c  **** 		return -1;
 1878               		.loc 1 690 8 is_stmt 0 view .LVU642
 1879 000c 9FBF      		out __SREG__,r25
 691:usb_serial.c  **** 	}
 1880               		.loc 1 691 3 is_stmt 1 view .LVU643
 691:usb_serial.c  **** 	}
 1881               		.loc 1 691 10 is_stmt 0 view .LVU644
 1882 000e 8FEF      		ldi r24,lo8(-1)
 1883               	.LVL247:
 691:usb_serial.c  **** 	}
 1884               		.loc 1 691 10 view .LVU645
 1885 0010 0895      		ret
 1886               	.LVL248:
 1887               	.L150:
 685:usb_serial.c  **** 	if (!(UEINTX & (1<<RWAL))) {
 1888               		.loc 1 685 2 is_stmt 1 view .LVU646
 685:usb_serial.c  **** 	if (!(UEINTX & (1<<RWAL))) {
 1889               		.loc 1 685 8 is_stmt 0 view .LVU647
 1890 0012 22E0      		ldi r18,lo8(2)
 1891 0014 2093 E900 		sts 233,r18
 686:usb_serial.c  **** 		// unable to write
 1892               		.loc 1 686 2 is_stmt 1 view .LVU648
 686:usb_serial.c  **** 		// unable to write
 1893               		.loc 1 686 8 is_stmt 0 view .LVU649
 1894 0018 2091 E800 		lds r18,232
 686:usb_serial.c  **** 		// unable to write
 1895               		.loc 1 686 5 view .LVU650
 1896 001c 25FF      		sbrs r18,5
 1897 001e 00C0      		rjmp .L153
 693:usb_serial.c  **** 	UEDATX = 0x20;
 1898               		.loc 1 693 2 is_stmt 1 view .LVU651
 693:usb_serial.c  **** 	UEDATX = 0x20;
 1899               		.loc 1 693 9 is_stmt 0 view .LVU652
 1900 0020 21EA      		ldi r18,lo8(-95)
 1901 0022 2093 F100 		sts 241,r18
 694:usb_serial.c  **** 	UEDATX = 0;
 1902               		.loc 1 694 2 is_stmt 1 view .LVU653
 694:usb_serial.c  **** 	UEDATX = 0;
 1903               		.loc 1 694 9 is_stmt 0 view .LVU654
 1904 0026 20E2      		ldi r18,lo8(32)
 1905 0028 2093 F100 		sts 241,r18
 695:usb_serial.c  **** 	UEDATX = 0;
 1906               		.loc 1 695 2 is_stmt 1 view .LVU655
 695:usb_serial.c  **** 	UEDATX = 0;
 1907               		.loc 1 695 9 is_stmt 0 view .LVU656
 1908 002c 1092 F100 		sts 241,__zero_reg__
 696:usb_serial.c  **** 	UEDATX = 0; // 0 seems to work nicely.  what if this is 1??
 1909               		.loc 1 696 2 is_stmt 1 view .LVU657
 696:usb_serial.c  **** 	UEDATX = 0; // 0 seems to work nicely.  what if this is 1??
 1910               		.loc 1 696 9 is_stmt 0 view .LVU658
 1911 0030 1092 F100 		sts 241,__zero_reg__
 697:usb_serial.c  **** 	UEDATX = 0;
 1912               		.loc 1 697 2 is_stmt 1 view .LVU659
 697:usb_serial.c  **** 	UEDATX = 0;
 1913               		.loc 1 697 9 is_stmt 0 view .LVU660
 1914 0034 1092 F100 		sts 241,__zero_reg__
 698:usb_serial.c  **** 	UEDATX = 1;
 1915               		.loc 1 698 2 is_stmt 1 view .LVU661
 698:usb_serial.c  **** 	UEDATX = 1;
 1916               		.loc 1 698 9 is_stmt 0 view .LVU662
 1917 0038 1092 F100 		sts 241,__zero_reg__
 699:usb_serial.c  **** 	UEDATX = 0;
 1918               		.loc 1 699 2 is_stmt 1 view .LVU663
 699:usb_serial.c  **** 	UEDATX = 0;
 1919               		.loc 1 699 9 is_stmt 0 view .LVU664
 1920 003c 21E0      		ldi r18,lo8(1)
 1921 003e 2093 F100 		sts 241,r18
 700:usb_serial.c  **** 	UEDATX = signals;
 1922               		.loc 1 700 2 is_stmt 1 view .LVU665
 700:usb_serial.c  **** 	UEDATX = signals;
 1923               		.loc 1 700 9 is_stmt 0 view .LVU666
 1924 0042 1092 F100 		sts 241,__zero_reg__
 701:usb_serial.c  **** 	UEINTX = 0x3A;
 1925               		.loc 1 701 2 is_stmt 1 view .LVU667
 701:usb_serial.c  **** 	UEINTX = 0x3A;
 1926               		.loc 1 701 9 is_stmt 0 view .LVU668
 1927 0046 8093 F100 		sts 241,r24
 702:usb_serial.c  **** 	SREG = intr_state;
 1928               		.loc 1 702 2 is_stmt 1 view .LVU669
 702:usb_serial.c  **** 	SREG = intr_state;
 1929               		.loc 1 702 9 is_stmt 0 view .LVU670
 1930 004a 8AE3      		ldi r24,lo8(58)
 1931               	.LVL249:
 702:usb_serial.c  **** 	SREG = intr_state;
 1932               		.loc 1 702 9 view .LVU671
 1933 004c 8093 E800 		sts 232,r24
 1934               	.LVL250:
 703:usb_serial.c  **** 	return 0;
 1935               		.loc 1 703 2 is_stmt 1 view .LVU672
 703:usb_serial.c  **** 	return 0;
 1936               		.loc 1 703 7 is_stmt 0 view .LVU673
 1937 0050 9FBF      		out __SREG__,r25
 704:usb_serial.c  **** }
 1938               		.loc 1 704 2 is_stmt 1 view .LVU674
 704:usb_serial.c  **** }
 1939               		.loc 1 704 9 is_stmt 0 view .LVU675
 1940 0052 80E0      		ldi r24,0
 1941               	/* epilogue start */
 705:usb_serial.c  **** 
 1942               		.loc 1 705 1 view .LVU676
 1943 0054 0895      		ret
 1944               		.cfi_endproc
 1945               	.LFE15:
 1947               		.section	.text.__vector_10,"ax",@progbits
 1948               	.global	__vector_10
 1950               	__vector_10:
 1951               	.LFB16:
 720:usb_serial.c  **** 	uint8_t intbits, t;
 1952               		.loc 1 720 1 is_stmt 1 view -0
 1953               		.cfi_startproc
 1954 0000 1F92 1FB6 		__gcc_isr 1
 1954      1F92 1124 
 1954      8F93 
 1955 000a 9F93      		push r25
 1956               	.LCFI4:
 1957               		.cfi_def_cfa_offset 3
 1958               		.cfi_offset 25, -2
 1959               	/* prologue: Signal */
 1960               	/* frame size = 0 */
 1961               	/* stack size = 1...5 */
 1962               	.L__stack_usage = 1 + __gcc_isr.n_pushed
 721:usb_serial.c  **** 
 1963               		.loc 1 721 2 view .LVU678
 723:usb_serial.c  ****         UDINT = 0;
 1964               		.loc 1 723 9 view .LVU679
 723:usb_serial.c  ****         UDINT = 0;
 1965               		.loc 1 723 17 is_stmt 0 view .LVU680
 1966 000c 8091 E100 		lds r24,225
 1967               	.LVL251:
 724:usb_serial.c  ****         if (intbits & (1<<EORSTI)) {
 1968               		.loc 1 724 9 is_stmt 1 view .LVU681
 724:usb_serial.c  ****         if (intbits & (1<<EORSTI)) {
 1969               		.loc 1 724 15 is_stmt 0 view .LVU682
 1970 0010 1092 E100 		sts 225,__zero_reg__
 725:usb_serial.c  **** 		UENUM = 0;
 1971               		.loc 1 725 9 is_stmt 1 view .LVU683
 725:usb_serial.c  **** 		UENUM = 0;
 1972               		.loc 1 725 12 is_stmt 0 view .LVU684
 1973 0014 83FF      		sbrs r24,3
 1974 0016 00C0      		rjmp .L155
 726:usb_serial.c  **** 		UECONX = 1;
 1975               		.loc 1 726 3 is_stmt 1 view .LVU685
 726:usb_serial.c  **** 		UECONX = 1;
 1976               		.loc 1 726 9 is_stmt 0 view .LVU686
 1977 0018 1092 E900 		sts 233,__zero_reg__
 727:usb_serial.c  **** 		UECFG0X = EP_TYPE_CONTROL;
 1978               		.loc 1 727 3 is_stmt 1 view .LVU687
 727:usb_serial.c  **** 		UECFG0X = EP_TYPE_CONTROL;
 1979               		.loc 1 727 10 is_stmt 0 view .LVU688
 1980 001c 91E0      		ldi r25,lo8(1)
 1981 001e 9093 EB00 		sts 235,r25
 728:usb_serial.c  **** 		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 1982               		.loc 1 728 3 is_stmt 1 view .LVU689
 728:usb_serial.c  **** 		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 1983               		.loc 1 728 11 is_stmt 0 view .LVU690
 1984 0022 1092 EC00 		sts 236,__zero_reg__
 729:usb_serial.c  **** 		UEIENX = (1<<RXSTPE);
 1985               		.loc 1 729 3 is_stmt 1 view .LVU691
 729:usb_serial.c  **** 		UEIENX = (1<<RXSTPE);
 1986               		.loc 1 729 11 is_stmt 0 view .LVU692
 1987 0026 92E1      		ldi r25,lo8(18)
 1988 0028 9093 ED00 		sts 237,r25
 730:usb_serial.c  **** 		usb_configuration = 0;
 1989               		.loc 1 730 3 is_stmt 1 view .LVU693
 730:usb_serial.c  **** 		usb_configuration = 0;
 1990               		.loc 1 730 10 is_stmt 0 view .LVU694
 1991 002c 98E0      		ldi r25,lo8(8)
 1992 002e 9093 F000 		sts 240,r25
 731:usb_serial.c  **** 		cdc_line_rtsdtr = 0;
 1993               		.loc 1 731 3 is_stmt 1 view .LVU695
 731:usb_serial.c  **** 		cdc_line_rtsdtr = 0;
 1994               		.loc 1 731 21 is_stmt 0 view .LVU696
 1995 0032 1092 0000 		sts usb_configuration,__zero_reg__
 732:usb_serial.c  ****         }
 1996               		.loc 1 732 3 is_stmt 1 view .LVU697
 732:usb_serial.c  ****         }
 1997               		.loc 1 732 19 is_stmt 0 view .LVU698
 1998 0036 1092 0000 		sts cdc_line_rtsdtr,__zero_reg__
 1999               	.L155:
 734:usb_serial.c  **** 		if (usb_configuration) {
 2000               		.loc 1 734 2 is_stmt 1 view .LVU699
 734:usb_serial.c  **** 		if (usb_configuration) {
 2001               		.loc 1 734 5 is_stmt 0 view .LVU700
 2002 003a 82FF      		sbrs r24,2
 2003 003c 00C0      		rjmp .L154
 735:usb_serial.c  **** 			t = transmit_flush_timer;
 2004               		.loc 1 735 3 is_stmt 1 view .LVU701
 735:usb_serial.c  **** 			t = transmit_flush_timer;
 2005               		.loc 1 735 7 is_stmt 0 view .LVU702
 2006 003e 8091 0000 		lds r24,usb_configuration
 2007               	.LVL252:
 735:usb_serial.c  **** 			t = transmit_flush_timer;
 2008               		.loc 1 735 6 view .LVU703
 2009 0042 8823      		tst r24
 2010 0044 01F0      		breq .L154
 736:usb_serial.c  **** 			if (t) {
 2011               		.loc 1 736 4 is_stmt 1 view .LVU704
 736:usb_serial.c  **** 			if (t) {
 2012               		.loc 1 736 6 is_stmt 0 view .LVU705
 2013 0046 8091 0000 		lds r24,transmit_flush_timer
 2014               	.LVL253:
 737:usb_serial.c  **** 				transmit_flush_timer = --t;
 2015               		.loc 1 737 4 is_stmt 1 view .LVU706
 737:usb_serial.c  **** 				transmit_flush_timer = --t;
 2016               		.loc 1 737 7 is_stmt 0 view .LVU707
 2017 004a 8823      		tst r24
 2018 004c 01F0      		breq .L154
 738:usb_serial.c  **** 				if (!t) {
 2019               		.loc 1 738 5 is_stmt 1 view .LVU708
 738:usb_serial.c  **** 				if (!t) {
 2020               		.loc 1 738 26 is_stmt 0 view .LVU709
 2021 004e 8150      		subi r24,lo8(-(-1))
 2022               	.LVL254:
 738:usb_serial.c  **** 				if (!t) {
 2023               		.loc 1 738 26 view .LVU710
 2024 0050 8093 0000 		sts transmit_flush_timer,r24
 739:usb_serial.c  **** 					UENUM = CDC_TX_ENDPOINT;
 2025               		.loc 1 739 5 is_stmt 1 view .LVU711
 739:usb_serial.c  **** 					UENUM = CDC_TX_ENDPOINT;
 2026               		.loc 1 739 8 is_stmt 0 view .LVU712
 2027 0054 8111      		cpse r24,__zero_reg__
 2028 0056 00C0      		rjmp .L154
 740:usb_serial.c  **** 					UEINTX = 0x3A;
 2029               		.loc 1 740 6 is_stmt 1 view .LVU713
 740:usb_serial.c  **** 					UEINTX = 0x3A;
 2030               		.loc 1 740 12 is_stmt 0 view .LVU714
 2031 0058 84E0      		ldi r24,lo8(4)
 2032               	.LVL255:
 740:usb_serial.c  **** 					UEINTX = 0x3A;
 2033               		.loc 1 740 12 view .LVU715
 2034 005a 8093 E900 		sts 233,r24
 2035               	.LVL256:
 741:usb_serial.c  **** 				}
 2036               		.loc 1 741 6 is_stmt 1 view .LVU716
 741:usb_serial.c  **** 				}
 2037               		.loc 1 741 13 is_stmt 0 view .LVU717
 2038 005e 8AE3      		ldi r24,lo8(58)
 2039 0060 8093 E800 		sts 232,r24
 2040               	.L154:
 2041               	/* epilogue start */
 746:usb_serial.c  **** 
 2042               		.loc 1 746 1 view .LVU718
 2043 0064 9F91      		pop r25
 2044 0066 8F91 1F90 		__gcc_isr 2
 2044      1FBE 1F90 
 2045 006e 1895      		reti
 2046               		__gcc_isr 0,r24
 2047               		.cfi_endproc
 2048               	.LFE16:
 2050               		.section	.text.__vector_11,"ax",@progbits
 2051               	.global	__vector_11
 2053               	__vector_11:
 2054               	.LFB21:
 754:usb_serial.c  **** static inline void usb_send_in(void)
 755:usb_serial.c  **** {
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 757:usb_serial.c  **** }
 758:usb_serial.c  **** static inline void usb_wait_receive_out(void)
 759:usb_serial.c  **** {
 760:usb_serial.c  **** 	while (!(UEINTX & (1<<RXOUTI))) ;
 761:usb_serial.c  **** }
 762:usb_serial.c  **** static inline void usb_ack_out(void)
 763:usb_serial.c  **** {
 764:usb_serial.c  **** 	UEINTX = ~(1<<RXOUTI);
 765:usb_serial.c  **** }
 766:usb_serial.c  **** 
 767:usb_serial.c  **** 
 768:usb_serial.c  **** 
 769:usb_serial.c  **** // USB Endpoint Interrupt - endpoint 0 is handled here.  The
 770:usb_serial.c  **** // other endpoints are manipulated by the user-callable
 771:usb_serial.c  **** // functions, and the start-of-frame interrupt.
 772:usb_serial.c  **** //
 773:usb_serial.c  **** ISR(USB_COM_vect)
 774:usb_serial.c  **** {
 2055               		.loc 1 774 1 is_stmt 1 view -0
 2056               		.cfi_startproc
 2057 0000 1F92      		push r1
 2058               	.LCFI5:
 2059               		.cfi_def_cfa_offset 3
 2060               		.cfi_offset 1, -2
 2061 0002 0F92      		push r0
 2062               	.LCFI6:
 2063               		.cfi_def_cfa_offset 4
 2064               		.cfi_offset 0, -3
 2065 0004 0FB6      		in r0,__SREG__
 2066 0006 0F92      		push r0
 2067 0008 1124      		clr __zero_reg__
 2068 000a EF92      		push r14
 2069               	.LCFI7:
 2070               		.cfi_def_cfa_offset 5
 2071               		.cfi_offset 14, -4
 2072 000c FF92      		push r15
 2073               	.LCFI8:
 2074               		.cfi_def_cfa_offset 6
 2075               		.cfi_offset 15, -5
 2076 000e 0F93      		push r16
 2077               	.LCFI9:
 2078               		.cfi_def_cfa_offset 7
 2079               		.cfi_offset 16, -6
 2080 0010 1F93      		push r17
 2081               	.LCFI10:
 2082               		.cfi_def_cfa_offset 8
 2083               		.cfi_offset 17, -7
 2084 0012 2F93      		push r18
 2085               	.LCFI11:
 2086               		.cfi_def_cfa_offset 9
 2087               		.cfi_offset 18, -8
 2088 0014 3F93      		push r19
 2089               	.LCFI12:
 2090               		.cfi_def_cfa_offset 10
 2091               		.cfi_offset 19, -9
 2092 0016 4F93      		push r20
 2093               	.LCFI13:
 2094               		.cfi_def_cfa_offset 11
 2095               		.cfi_offset 20, -10
 2096 0018 5F93      		push r21
 2097               	.LCFI14:
 2098               		.cfi_def_cfa_offset 12
 2099               		.cfi_offset 21, -11
 2100 001a 6F93      		push r22
 2101               	.LCFI15:
 2102               		.cfi_def_cfa_offset 13
 2103               		.cfi_offset 22, -12
 2104 001c 7F93      		push r23
 2105               	.LCFI16:
 2106               		.cfi_def_cfa_offset 14
 2107               		.cfi_offset 23, -13
 2108 001e 8F93      		push r24
 2109               	.LCFI17:
 2110               		.cfi_def_cfa_offset 15
 2111               		.cfi_offset 24, -14
 2112 0020 9F93      		push r25
 2113               	.LCFI18:
 2114               		.cfi_def_cfa_offset 16
 2115               		.cfi_offset 25, -15
 2116 0022 AF93      		push r26
 2117               	.LCFI19:
 2118               		.cfi_def_cfa_offset 17
 2119               		.cfi_offset 26, -16
 2120 0024 BF93      		push r27
 2121               	.LCFI20:
 2122               		.cfi_def_cfa_offset 18
 2123               		.cfi_offset 27, -17
 2124 0026 CF93      		push r28
 2125               	.LCFI21:
 2126               		.cfi_def_cfa_offset 19
 2127               		.cfi_offset 28, -18
 2128 0028 DF93      		push r29
 2129               	.LCFI22:
 2130               		.cfi_def_cfa_offset 20
 2131               		.cfi_offset 29, -19
 2132 002a EF93      		push r30
 2133               	.LCFI23:
 2134               		.cfi_def_cfa_offset 21
 2135               		.cfi_offset 30, -20
 2136 002c FF93      		push r31
 2137               	.LCFI24:
 2138               		.cfi_def_cfa_offset 22
 2139               		.cfi_offset 31, -21
 2140               	/* prologue: Signal */
 2141               	/* frame size = 0 */
 2142               	/* stack size = 21 */
 2143               	.L__stack_usage = 21
 775:usb_serial.c  ****         uint8_t intbits;
 2144               		.loc 1 775 9 view .LVU720
 776:usb_serial.c  **** 	const uint8_t *list;
 2145               		.loc 1 776 2 view .LVU721
 777:usb_serial.c  ****         const uint8_t *cfg;
 2146               		.loc 1 777 9 view .LVU722
 778:usb_serial.c  **** 	uint8_t i, n, len, en;
 2147               		.loc 1 778 2 view .LVU723
 779:usb_serial.c  **** 	uint8_t *p;
 2148               		.loc 1 779 2 view .LVU724
 780:usb_serial.c  **** 	uint8_t bmRequestType;
 2149               		.loc 1 780 2 view .LVU725
 781:usb_serial.c  **** 	uint8_t bRequest;
 2150               		.loc 1 781 2 view .LVU726
 782:usb_serial.c  **** 	uint16_t wValue;
 2151               		.loc 1 782 2 view .LVU727
 783:usb_serial.c  **** 	uint16_t wIndex;
 2152               		.loc 1 783 2 view .LVU728
 784:usb_serial.c  **** 	uint16_t wLength;
 2153               		.loc 1 784 2 view .LVU729
 785:usb_serial.c  **** 	uint16_t desc_val;
 2154               		.loc 1 785 2 view .LVU730
 786:usb_serial.c  **** 	const uint8_t *desc_addr;
 2155               		.loc 1 786 2 view .LVU731
 787:usb_serial.c  **** 	uint8_t	desc_length;
 2156               		.loc 1 787 2 view .LVU732
 788:usb_serial.c  **** 
 789:usb_serial.c  ****         UENUM = 0;
 2157               		.loc 1 789 9 view .LVU733
 2158               		.loc 1 789 15 is_stmt 0 view .LVU734
 2159 002e 1092 E900 		sts 233,__zero_reg__
 790:usb_serial.c  ****         intbits = UEINTX;
 2160               		.loc 1 790 9 is_stmt 1 view .LVU735
 2161               		.loc 1 790 17 is_stmt 0 view .LVU736
 2162 0032 8091 E800 		lds r24,232
 2163               	.LVL257:
 791:usb_serial.c  ****         if (intbits & (1<<RXSTPI)) {
 2164               		.loc 1 791 9 is_stmt 1 view .LVU737
 2165               		.loc 1 791 12 is_stmt 0 view .LVU738
 2166 0036 83FF      		sbrs r24,3
 2167 0038 00C0      		rjmp .L169
 792:usb_serial.c  ****                 bmRequestType = UEDATX;
 2168               		.loc 1 792 17 is_stmt 1 view .LVU739
 2169               		.loc 1 792 31 is_stmt 0 view .LVU740
 2170 003a D091 F100 		lds r29,241
 2171               	.LVL258:
 793:usb_serial.c  ****                 bRequest = UEDATX;
 2172               		.loc 1 793 17 is_stmt 1 view .LVU741
 2173               		.loc 1 793 26 is_stmt 0 view .LVU742
 2174 003e C091 F100 		lds r28,241
 2175               	.LVL259:
 794:usb_serial.c  ****                 wValue = UEDATX;
 2176               		.loc 1 794 17 is_stmt 1 view .LVU743
 2177               		.loc 1 794 26 is_stmt 0 view .LVU744
 2178 0042 E090 F100 		lds r14,241
 2179               	.LVL260:
 795:usb_serial.c  ****                 wValue |= (UEDATX << 8);
 2180               		.loc 1 795 17 is_stmt 1 view .LVU745
 2181               		.loc 1 795 28 is_stmt 0 view .LVU746
 2182 0046 8091 F100 		lds r24,241
 2183               	.LVL261:
 2184               		.loc 1 795 24 view .LVU747
 2185 004a F82E      		mov r15,r24
 2186               	.LVL262:
 796:usb_serial.c  ****                 wIndex = UEDATX;
 2187               		.loc 1 796 17 is_stmt 1 view .LVU748
 2188               		.loc 1 796 26 is_stmt 0 view .LVU749
 2189 004c 0091 F100 		lds r16,241
 2190               	.LVL263:
 797:usb_serial.c  ****                 wIndex |= (UEDATX << 8);
 2191               		.loc 1 797 17 is_stmt 1 view .LVU750
 2192               		.loc 1 797 28 is_stmt 0 view .LVU751
 2193 0050 8091 F100 		lds r24,241
 2194               		.loc 1 797 24 view .LVU752
 2195 0054 182F      		mov r17,r24
 2196               	.LVL264:
 798:usb_serial.c  ****                 wLength = UEDATX;
 2197               		.loc 1 798 17 is_stmt 1 view .LVU753
 2198               		.loc 1 798 27 is_stmt 0 view .LVU754
 2199 0056 2091 F100 		lds r18,241
 2200               	.LVL265:
 799:usb_serial.c  ****                 wLength |= (UEDATX << 8);
 2201               		.loc 1 799 17 is_stmt 1 view .LVU755
 2202               		.loc 1 799 29 is_stmt 0 view .LVU756
 2203 005a 3091 F100 		lds r19,241
 2204               	.LVL266:
 800:usb_serial.c  ****                 UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 2205               		.loc 1 800 17 is_stmt 1 view .LVU757
 2206               		.loc 1 800 24 is_stmt 0 view .LVU758
 2207 005e 82EF      		ldi r24,lo8(-14)
 2208 0060 8093 E800 		sts 232,r24
 801:usb_serial.c  ****                 if (bRequest == GET_DESCRIPTOR) {
 2209               		.loc 1 801 17 is_stmt 1 view .LVU759
 2210               		.loc 1 801 20 is_stmt 0 view .LVU760
 2211 0064 C630      		cpi r28,lo8(6)
 2212 0066 01F0      		breq .+2
 2213 0068 00C0      		rjmp .L211
 2214 006a 80E0      		ldi r24,lo8(descriptor_list)
 2215 006c 90E0      		ldi r25,hi8(descriptor_list)
 2216 006e 40E0      		ldi r20,lo8(descriptor_list+42)
 2217 0070 50E0      		ldi r21,hi8(descriptor_list+42)
 2218               	.L178:
 2219               	.LVL267:
 802:usb_serial.c  **** 			list = (const uint8_t *)descriptor_list;
 803:usb_serial.c  **** 			for (i=0; ; i++) {
 804:usb_serial.c  **** 				if (i >= NUM_DESC_LIST) {
 805:usb_serial.c  **** 					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 806:usb_serial.c  **** 					return;
 807:usb_serial.c  **** 				}
 808:usb_serial.c  **** 				desc_val = pgm_read_word(list);
 2220               		.loc 1 808 5 is_stmt 1 view .LVU761
 2221               	.LBB60:
 2222               		.loc 1 808 16 view .LVU762
 2223               		.loc 1 808 16 view .LVU763
 2224               		.loc 1 808 16 view .LVU764
 2225 0072 FC01      		movw r30,r24
 2226               	/* #APP */
 2227               	 ;  808 "usb_serial.c" 1
 2228 0074 6591      		lpm r22, Z+
 2229 0076 7491      		lpm r23, Z
 2230               		
 2231               	 ;  0 "" 2
 2232               	.LVL268:
 2233               		.loc 1 808 16 view .LVU765
 2234               		.loc 1 808 16 is_stmt 0 view .LVU766
 2235               	/* #NOAPP */
 2236               	.LBE60:
 809:usb_serial.c  **** 				if (desc_val != wValue) {
 2237               		.loc 1 809 5 is_stmt 1 view .LVU767
 2238               		.loc 1 809 8 is_stmt 0 view .LVU768
 2239 0078 E616      		cp r14,r22
 2240 007a F706      		cpc r15,r23
 2241 007c 01F0      		breq .+2
 2242 007e 00C0      		rjmp .L173
 810:usb_serial.c  **** 					list += sizeof(struct descriptor_list_struct);
 811:usb_serial.c  **** 					continue;
 812:usb_serial.c  **** 				}
 813:usb_serial.c  **** 				list += 2;
 2243               		.loc 1 813 5 is_stmt 1 view .LVU769
 2244               	.LVL269:
 814:usb_serial.c  **** 				desc_val = pgm_read_word(list);
 2245               		.loc 1 814 5 view .LVU770
 2246               	.LBB61:
 2247               		.loc 1 814 16 view .LVU771
 2248               		.loc 1 814 16 view .LVU772
 2249               		.loc 1 814 16 view .LVU773
 2250 0080 FC01      		movw r30,r24
 2251 0082 3296      		adiw r30,2
 2252               	.LVL270:
 2253               		.loc 1 814 16 is_stmt 0 view .LVU774
 2254               	/* #APP */
 2255               	 ;  814 "usb_serial.c" 1
 2256 0084 6591      		lpm r22, Z+
 2257 0086 7491      		lpm r23, Z
 2258               		
 2259               	 ;  0 "" 2
 2260               	.LVL271:
 2261               		.loc 1 814 16 is_stmt 1 view .LVU775
 2262               		.loc 1 814 16 is_stmt 0 view .LVU776
 2263               	/* #NOAPP */
 2264               	.LBE61:
 815:usb_serial.c  **** 				if (desc_val != wIndex) {
 2265               		.loc 1 815 5 is_stmt 1 view .LVU777
 2266               		.loc 1 815 8 is_stmt 0 view .LVU778
 2267 0088 0617      		cp r16,r22
 2268 008a 1707      		cpc r17,r23
 2269 008c 01F0      		breq .+2
 2270 008e 00C0      		rjmp .L173
 816:usb_serial.c  **** 					list += sizeof(struct descriptor_list_struct)-2;
 817:usb_serial.c  **** 					continue;
 818:usb_serial.c  **** 				}
 819:usb_serial.c  **** 				list += 2;
 2271               		.loc 1 819 5 is_stmt 1 view .LVU779
 2272               	.LVL272:
 820:usb_serial.c  **** 				desc_addr = (const uint8_t *)pgm_read_word(list);
 2273               		.loc 1 820 5 view .LVU780
 2274               	.LBB62:
 2275               		.loc 1 820 34 view .LVU781
 2276               	.LBE62:
 819:usb_serial.c  **** 				desc_addr = (const uint8_t *)pgm_read_word(list);
 2277               		.loc 1 819 10 is_stmt 0 view .LVU782
 2278 0090 FC01      		movw r30,r24
 2279 0092 3496      		adiw r30,4
 2280               	.LVL273:
 2281               	.LBB63:
 2282               		.loc 1 820 34 is_stmt 1 view .LVU783
 2283               		.loc 1 820 34 view .LVU784
 2284               	/* #APP */
 2285               	 ;  820 "usb_serial.c" 1
 2286 0094 4591      		lpm r20, Z+
 2287 0096 5491      		lpm r21, Z
 2288               		
 2289               	 ;  0 "" 2
 2290               	.LVL274:
 2291               		.loc 1 820 34 view .LVU785
 2292               		.loc 1 820 34 is_stmt 0 view .LVU786
 2293               	/* #NOAPP */
 2294               	.LBE63:
 821:usb_serial.c  **** 				list += 2;
 2295               		.loc 1 821 5 is_stmt 1 view .LVU787
 822:usb_serial.c  **** 				desc_length = pgm_read_byte(list);
 2296               		.loc 1 822 5 view .LVU788
 2297               	.LBB64:
 2298               		.loc 1 822 19 view .LVU789
 2299               		.loc 1 822 19 view .LVU790
 2300               		.loc 1 822 19 view .LVU791
 2301               	.LBE64:
 821:usb_serial.c  **** 				list += 2;
 2302               		.loc 1 821 10 is_stmt 0 view .LVU792
 2303 0098 0696      		adiw r24,6
 2304               	.LVL275:
 2305               	.LBB65:
 2306               		.loc 1 822 19 view .LVU793
 2307 009a FC01      		movw r30,r24
 2308               	/* #APP */
 2309               	 ;  822 "usb_serial.c" 1
 2310 009c 8491      		lpm r24, Z
 2311               		
 2312               	 ;  0 "" 2
 2313               	.LVL276:
 2314               		.loc 1 822 19 is_stmt 1 view .LVU794
 2315               		.loc 1 822 19 is_stmt 0 view .LVU795
 2316               	/* #NOAPP */
 2317               	.LBE65:
 823:usb_serial.c  **** 				break;
 2318               		.loc 1 823 5 is_stmt 1 view .LVU796
 824:usb_serial.c  **** 			}
 825:usb_serial.c  **** 			len = (wLength < 256) ? wLength : 255;
 2319               		.loc 1 825 4 view .LVU797
 2320               		.loc 1 825 36 is_stmt 0 view .LVU798
 2321 009e 2F3F      		cpi r18,-1
 2322 00a0 3105      		cpc r19,__zero_reg__
 2323 00a2 01F0      		breq .L174
 2324 00a4 00F0      		brlo .L174
 2325 00a6 2FEF      		ldi r18,lo8(-1)
 2326 00a8 30E0      		ldi r19,0
 2327               	.LVL277:
 2328               	.L174:
 826:usb_serial.c  **** 			if (len > desc_length) len = desc_length;
 2329               		.loc 1 826 4 is_stmt 1 view .LVU799
 2330 00aa 2817      		cp r18,r24
 2331 00ac 00F4      		brsh .L175
 2332 00ae 822F      		mov r24,r18
 2333               	.LVL278:
 2334               	.L175:
 2335               	.LBB66:
 2336               	.LBB67:
 756:usb_serial.c  **** }
 2337               		.loc 1 756 9 is_stmt 0 view .LVU800
 2338 00b0 3EEF      		ldi r19,lo8(-2)
 2339               	.LVL279:
 2340               	.L179:
 756:usb_serial.c  **** }
 2341               		.loc 1 756 9 view .LVU801
 2342               	.LBE67:
 2343               	.LBE66:
 827:usb_serial.c  **** 			do {
 2344               		.loc 1 827 4 is_stmt 1 discriminator 1 view .LVU802
 828:usb_serial.c  **** 				// wait for host ready for IN packet
 829:usb_serial.c  **** 				do {
 2345               		.loc 1 829 5 discriminator 1 view .LVU803
 830:usb_serial.c  **** 					i = UEINTX;
 2346               		.loc 1 830 6 discriminator 1 view .LVU804
 2347               		.loc 1 830 8 is_stmt 0 discriminator 1 view .LVU805
 2348 00b2 9091 E800 		lds r25,232
 2349               	.LVL280:
 831:usb_serial.c  **** 				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 2350               		.loc 1 831 13 is_stmt 1 discriminator 1 view .LVU806
 2351               		.loc 1 831 5 is_stmt 0 discriminator 1 view .LVU807
 2352 00b6 292F      		mov r18,r25
 2353 00b8 2570      		andi r18,lo8(5)
 2354 00ba 01F0      		breq .L179
 832:usb_serial.c  **** 				if (i & (1<<RXOUTI)) return;	// abort
 2355               		.loc 1 832 5 is_stmt 1 view .LVU808
 2356               		.loc 1 832 8 is_stmt 0 view .LVU809
 2357 00bc 92FD      		sbrc r25,2
 2358 00be 00C0      		rjmp .L168
 833:usb_serial.c  **** 				// send IN packet
 834:usb_serial.c  **** 				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 2359               		.loc 1 834 5 is_stmt 1 view .LVU810
 2360               		.loc 1 834 7 is_stmt 0 view .LVU811
 2361 00c0 982F      		mov r25,r24
 2362               	.LVL281:
 2363               		.loc 1 834 7 view .LVU812
 2364 00c2 8131      		cpi r24,lo8(17)
 2365 00c4 00F0      		brlo .L181
 2366 00c6 90E1      		ldi r25,lo8(16)
 2367               	.L181:
 2368               	.LVL282:
 835:usb_serial.c  **** 				for (i = n; i; i--) {
 2369               		.loc 1 835 5 is_stmt 1 view .LVU813
 2370               		.loc 1 835 5 is_stmt 0 view .LVU814
 2371 00c8 FA01      		movw r30,r20
 2372               		.loc 1 835 12 view .LVU815
 2373 00ca 292F      		mov r18,r25
 2374               	.LVL283:
 2375               	.L182:
 2376               		.loc 1 835 17 is_stmt 1 discriminator 1 view .LVU816
 2377               		.loc 1 835 5 is_stmt 0 discriminator 1 view .LVU817
 2378 00cc 2111      		cpse r18,__zero_reg__
 2379 00ce 00C0      		rjmp .L183
 2380               		.loc 1 835 5 discriminator 1 view .LVU818
 2381 00d0 490F      		add r20,r25
 2382 00d2 511D      		adc r21,__zero_reg__
 836:usb_serial.c  **** 					UEDATX = pgm_read_byte(desc_addr++);
 837:usb_serial.c  **** 				}
 838:usb_serial.c  **** 				len -= n;
 2383               		.loc 1 838 5 is_stmt 1 view .LVU819
 2384               		.loc 1 838 9 is_stmt 0 view .LVU820
 2385 00d4 282F      		mov r18,r24
 2386               	.LVL284:
 2387               		.loc 1 838 9 view .LVU821
 2388 00d6 291B      		sub r18,r25
 2389               	.LVL285:
 839:usb_serial.c  **** 				usb_send_in();
 2390               		.loc 1 839 5 is_stmt 1 view .LVU822
 2391               	.LBB69:
 2392               	.LBI66:
 754:usb_serial.c  **** {
 2393               		.loc 1 754 20 view .LVU823
 2394               	.LBB68:
 756:usb_serial.c  **** }
 2395               		.loc 1 756 2 view .LVU824
 756:usb_serial.c  **** }
 2396               		.loc 1 756 9 is_stmt 0 view .LVU825
 2397 00d8 3093 E800 		sts 232,r19
 2398               	.LBE68:
 2399               	.LBE69:
 840:usb_serial.c  **** 			} while (len || n == ENDPOINT0_SIZE);
 2400               		.loc 1 840 12 is_stmt 1 view .LVU826
 2401               		.loc 1 840 4 is_stmt 0 view .LVU827
 2402 00dc 8913      		cpse r24,r25
 2403 00de 00C0      		rjmp .L184
 2404               		.loc 1 840 17 discriminator 1 view .LVU828
 2405 00e0 8031      		cpi r24,lo8(16)
 2406 00e2 00F4      		brsh .L184
 2407               	.LVL286:
 2408               	.L168:
 2409               	/* epilogue start */
 841:usb_serial.c  **** 			return;
 842:usb_serial.c  ****                 }
 843:usb_serial.c  **** 		if (bRequest == SET_ADDRESS) {
 844:usb_serial.c  **** 			usb_send_in();
 845:usb_serial.c  **** 			usb_wait_in_ready();
 846:usb_serial.c  **** 			UDADDR = wValue | (1<<ADDEN);
 847:usb_serial.c  **** 			return;
 848:usb_serial.c  **** 		}
 849:usb_serial.c  **** 		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 850:usb_serial.c  **** 			usb_configuration = wValue;
 851:usb_serial.c  **** 			cdc_line_rtsdtr = 0;
 852:usb_serial.c  **** 			transmit_flush_timer = 0;
 853:usb_serial.c  **** 			usb_send_in();
 854:usb_serial.c  **** 			cfg = endpoint_config_table;
 855:usb_serial.c  **** 			for (i=1; i<5; i++) {
 856:usb_serial.c  **** 				UENUM = i;
 857:usb_serial.c  **** 				en = pgm_read_byte(cfg++);
 858:usb_serial.c  **** 				UECONX = en;
 859:usb_serial.c  **** 				if (en) {
 860:usb_serial.c  **** 					UECFG0X = pgm_read_byte(cfg++);
 861:usb_serial.c  **** 					UECFG1X = pgm_read_byte(cfg++);
 862:usb_serial.c  **** 				}
 863:usb_serial.c  **** 			}
 864:usb_serial.c  ****         		UERST = 0x1E;
 865:usb_serial.c  ****         		UERST = 0;
 866:usb_serial.c  **** 			return;
 867:usb_serial.c  **** 		}
 868:usb_serial.c  **** 		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 869:usb_serial.c  **** 			usb_wait_in_ready();
 870:usb_serial.c  **** 			UEDATX = usb_configuration;
 871:usb_serial.c  **** 			usb_send_in();
 872:usb_serial.c  **** 			return;
 873:usb_serial.c  **** 		}
 874:usb_serial.c  **** 		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 875:usb_serial.c  **** 			usb_wait_in_ready();
 876:usb_serial.c  **** 			p = cdc_line_coding;
 877:usb_serial.c  **** 			for (i=0; i<7; i++) {
 878:usb_serial.c  **** 				UEDATX = *p++;
 879:usb_serial.c  **** 			}
 880:usb_serial.c  **** 			usb_send_in();
 881:usb_serial.c  **** 			return;
 882:usb_serial.c  **** 		}
 883:usb_serial.c  **** 		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 884:usb_serial.c  **** 			usb_wait_receive_out();
 885:usb_serial.c  **** 			p = cdc_line_coding;
 886:usb_serial.c  **** 			for (i=0; i<7; i++) {
 887:usb_serial.c  **** 				*p++ = UEDATX;
 888:usb_serial.c  **** 			}
 889:usb_serial.c  **** 			usb_ack_out();
 890:usb_serial.c  **** 			usb_send_in();
 891:usb_serial.c  **** 			return;
 892:usb_serial.c  **** 		}
 893:usb_serial.c  **** 		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 894:usb_serial.c  **** 			cdc_line_rtsdtr = wValue;
 895:usb_serial.c  **** 			usb_wait_in_ready();
 896:usb_serial.c  **** 			usb_send_in();
 897:usb_serial.c  **** 			return;
 898:usb_serial.c  **** 		}
 899:usb_serial.c  **** 		if (bRequest == GET_STATUS) {
 900:usb_serial.c  **** 			usb_wait_in_ready();
 901:usb_serial.c  **** 			i = 0;
 902:usb_serial.c  **** 			#ifdef SUPPORT_ENDPOINT_HALT
 903:usb_serial.c  **** 			if (bmRequestType == 0x82) {
 904:usb_serial.c  **** 				UENUM = wIndex;
 905:usb_serial.c  **** 				if (UECONX & (1<<STALLRQ)) i = 1;
 906:usb_serial.c  **** 				UENUM = 0;
 907:usb_serial.c  **** 			}
 908:usb_serial.c  **** 			#endif
 909:usb_serial.c  **** 			UEDATX = i;
 910:usb_serial.c  **** 			UEDATX = 0;
 911:usb_serial.c  **** 			usb_send_in();
 912:usb_serial.c  **** 			return;
 913:usb_serial.c  **** 		}
 914:usb_serial.c  **** 		#ifdef SUPPORT_ENDPOINT_HALT
 915:usb_serial.c  **** 		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 916:usb_serial.c  **** 		  && bmRequestType == 0x02 && wValue == 0) {
 917:usb_serial.c  **** 			i = wIndex & 0x7F;
 918:usb_serial.c  **** 			if (i >= 1 && i <= MAX_ENDPOINT) {
 919:usb_serial.c  **** 				usb_send_in();
 920:usb_serial.c  **** 				UENUM = i;
 921:usb_serial.c  **** 				if (bRequest == SET_FEATURE) {
 922:usb_serial.c  **** 					UECONX = (1<<STALLRQ)|(1<<EPEN);
 923:usb_serial.c  **** 				} else {
 924:usb_serial.c  **** 					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 925:usb_serial.c  **** 					UERST = (1 << i);
 926:usb_serial.c  **** 					UERST = 0;
 927:usb_serial.c  **** 				}
 928:usb_serial.c  **** 				return;
 929:usb_serial.c  **** 			}
 930:usb_serial.c  **** 		}
 931:usb_serial.c  **** 		#endif
 932:usb_serial.c  ****         }
 933:usb_serial.c  **** 	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 934:usb_serial.c  **** }
 2410               		.loc 1 934 1 view .LVU829
 2411 00e4 FF91      		pop r31
 2412 00e6 EF91      		pop r30
 2413 00e8 DF91      		pop r29
 2414 00ea CF91      		pop r28
 2415 00ec BF91      		pop r27
 2416 00ee AF91      		pop r26
 2417 00f0 9F91      		pop r25
 2418 00f2 8F91      		pop r24
 2419 00f4 7F91      		pop r23
 2420 00f6 6F91      		pop r22
 2421 00f8 5F91      		pop r21
 2422 00fa 4F91      		pop r20
 2423 00fc 3F91      		pop r19
 2424 00fe 2F91      		pop r18
 2425 0100 1F91      		pop r17
 2426 0102 0F91      		pop r16
 2427 0104 FF90      		pop r15
 2428 0106 EF90      		pop r14
 2429 0108 0F90      		pop r0
 2430 010a 0FBE      		out __SREG__,r0
 2431 010c 0F90      		pop r0
 2432 010e 1F90      		pop r1
 2433 0110 1895      		reti
 2434               	.LVL287:
 2435               	.L173:
 803:usb_serial.c  **** 				if (i >= NUM_DESC_LIST) {
 2436               		.loc 1 803 16 is_stmt 1 view .LVU830
 803:usb_serial.c  **** 				if (i >= NUM_DESC_LIST) {
 2437               		.loc 1 803 14 view .LVU831
 804:usb_serial.c  **** 					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 2438               		.loc 1 804 5 view .LVU832
 2439 0112 0796      		adiw r24,7
 804:usb_serial.c  **** 					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 2440               		.loc 1 804 8 is_stmt 0 view .LVU833
 2441 0114 4817      		cp r20,r24
 2442 0116 5907      		cpc r21,r25
 2443 0118 01F0      		breq .+2
 2444 011a 00C0      		rjmp .L178
 2445               	.LVL288:
 2446               	.L169:
 933:usb_serial.c  **** }
 2447               		.loc 1 933 2 is_stmt 1 view .LVU834
 933:usb_serial.c  **** }
 2448               		.loc 1 933 9 is_stmt 0 view .LVU835
 2449 011c 81E2      		ldi r24,lo8(33)
 2450 011e 8093 EB00 		sts 235,r24
 2451 0122 00C0      		rjmp .L168
 2452               	.LVL289:
 2453               	.L184:
 774:usb_serial.c  ****         uint8_t intbits;
 2454               		.loc 1 774 1 discriminator 1 view .LVU836
 2455 0124 822F      		mov r24,r18
 2456 0126 00C0      		rjmp .L179
 2457               	.LVL290:
 2458               	.L183:
 836:usb_serial.c  **** 				}
 2459               		.loc 1 836 6 is_stmt 1 discriminator 3 view .LVU837
 2460               	.LBB70:
 836:usb_serial.c  **** 				}
 2461               		.loc 1 836 15 discriminator 3 view .LVU838
 836:usb_serial.c  **** 				}
 2462               		.loc 1 836 15 discriminator 3 view .LVU839
 836:usb_serial.c  **** 				}
 2463               		.loc 1 836 15 discriminator 3 view .LVU840
 2464               	/* #APP */
 2465               	 ;  836 "usb_serial.c" 1
 2466 0128 6491      		lpm r22, Z
 2467               		
 2468               	 ;  0 "" 2
 2469               	.LVL291:
 836:usb_serial.c  **** 				}
 2470               		.loc 1 836 15 discriminator 3 view .LVU841
 2471               	/* #NOAPP */
 2472               	.LBE70:
 836:usb_serial.c  **** 				}
 2473               		.loc 1 836 13 is_stmt 0 discriminator 3 view .LVU842
 2474 012a 6093 F100 		sts 241,r22
 835:usb_serial.c  **** 					UEDATX = pgm_read_byte(desc_addr++);
 2475               		.loc 1 835 20 is_stmt 1 discriminator 3 view .LVU843
 835:usb_serial.c  **** 					UEDATX = pgm_read_byte(desc_addr++);
 2476               		.loc 1 835 21 is_stmt 0 discriminator 3 view .LVU844
 2477 012e 2150      		subi r18,lo8(-(-1))
 2478               	.LVL292:
 835:usb_serial.c  **** 					UEDATX = pgm_read_byte(desc_addr++);
 2479               		.loc 1 835 21 discriminator 3 view .LVU845
 2480 0130 3196      		adiw r30,1
 2481               	.LVL293:
 835:usb_serial.c  **** 					UEDATX = pgm_read_byte(desc_addr++);
 2482               		.loc 1 835 21 discriminator 3 view .LVU846
 2483 0132 00C0      		rjmp .L182
 2484               	.LVL294:
 2485               	.L211:
 843:usb_serial.c  **** 			usb_send_in();
 2486               		.loc 1 843 3 is_stmt 1 view .LVU847
 843:usb_serial.c  **** 			usb_send_in();
 2487               		.loc 1 843 6 is_stmt 0 view .LVU848
 2488 0134 C530      		cpi r28,lo8(5)
 2489 0136 01F4      		brne .L186
 844:usb_serial.c  **** 			usb_wait_in_ready();
 2490               		.loc 1 844 4 is_stmt 1 view .LVU849
 2491               	.LBB71:
 2492               	.LBI71:
 754:usb_serial.c  **** {
 2493               		.loc 1 754 20 view .LVU850
 2494               	.LBB72:
 756:usb_serial.c  **** }
 2495               		.loc 1 756 2 view .LVU851
 756:usb_serial.c  **** }
 2496               		.loc 1 756 9 is_stmt 0 view .LVU852
 2497 0138 8EEF      		ldi r24,lo8(-2)
 2498 013a 8093 E800 		sts 232,r24
 2499               	.LBE72:
 2500               	.LBE71:
 845:usb_serial.c  **** 			UDADDR = wValue | (1<<ADDEN);
 2501               		.loc 1 845 4 is_stmt 1 view .LVU853
 2502 013e 0E94 0000 		call usb_wait_in_ready
 2503               	.LVL295:
 846:usb_serial.c  **** 			return;
 2504               		.loc 1 846 4 view .LVU854
 846:usb_serial.c  **** 			return;
 2505               		.loc 1 846 20 is_stmt 0 view .LVU855
 2506 0142 8E2D      		mov r24,r14
 2507 0144 8068      		ori r24,lo8(-128)
 846:usb_serial.c  **** 			return;
 2508               		.loc 1 846 11 view .LVU856
 2509 0146 8093 E300 		sts 227,r24
 847:usb_serial.c  **** 		}
 2510               		.loc 1 847 4 is_stmt 1 view .LVU857
 2511 014a 00C0      		rjmp .L168
 2512               	.LVL296:
 2513               	.L186:
 849:usb_serial.c  **** 			usb_configuration = wValue;
 2514               		.loc 1 849 3 view .LVU858
 849:usb_serial.c  **** 			usb_configuration = wValue;
 2515               		.loc 1 849 6 is_stmt 0 view .LVU859
 2516 014c C930      		cpi r28,lo8(9)
 2517 014e 01F4      		brne .L187
 849:usb_serial.c  **** 			usb_configuration = wValue;
 2518               		.loc 1 849 37 discriminator 1 view .LVU860
 2519 0150 D111      		cpse r29,__zero_reg__
 2520 0152 00C0      		rjmp .L169
 850:usb_serial.c  **** 			cdc_line_rtsdtr = 0;
 2521               		.loc 1 850 4 is_stmt 1 view .LVU861
 850:usb_serial.c  **** 			cdc_line_rtsdtr = 0;
 2522               		.loc 1 850 22 is_stmt 0 view .LVU862
 2523 0154 E092 0000 		sts usb_configuration,r14
 851:usb_serial.c  **** 			transmit_flush_timer = 0;
 2524               		.loc 1 851 4 is_stmt 1 view .LVU863
 851:usb_serial.c  **** 			transmit_flush_timer = 0;
 2525               		.loc 1 851 20 is_stmt 0 view .LVU864
 2526 0158 1092 0000 		sts cdc_line_rtsdtr,__zero_reg__
 852:usb_serial.c  **** 			usb_send_in();
 2527               		.loc 1 852 4 is_stmt 1 view .LVU865
 852:usb_serial.c  **** 			usb_send_in();
 2528               		.loc 1 852 25 is_stmt 0 view .LVU866
 2529 015c 1092 0000 		sts transmit_flush_timer,__zero_reg__
 853:usb_serial.c  **** 			cfg = endpoint_config_table;
 2530               		.loc 1 853 4 is_stmt 1 view .LVU867
 2531               	.LBB73:
 2532               	.LBI73:
 754:usb_serial.c  **** {
 2533               		.loc 1 754 20 view .LVU868
 2534               	.LBB74:
 756:usb_serial.c  **** }
 2535               		.loc 1 756 2 view .LVU869
 756:usb_serial.c  **** }
 2536               		.loc 1 756 9 is_stmt 0 view .LVU870
 2537 0160 8EEF      		ldi r24,lo8(-2)
 2538 0162 8093 E800 		sts 232,r24
 2539               	.LBE74:
 2540               	.LBE73:
 854:usb_serial.c  **** 			for (i=1; i<5; i++) {
 2541               		.loc 1 854 4 is_stmt 1 view .LVU871
 855:usb_serial.c  **** 				UENUM = i;
 2542               		.loc 1 855 4 view .LVU872
 2543               	.LVL297:
 855:usb_serial.c  **** 				UENUM = i;
 2544               		.loc 1 855 14 view .LVU873
 855:usb_serial.c  **** 				UENUM = i;
 2545               		.loc 1 855 10 is_stmt 0 view .LVU874
 2546 0166 21E0      		ldi r18,lo8(1)
 2547               	.LVL298:
 854:usb_serial.c  **** 			for (i=1; i<5; i++) {
 2548               		.loc 1 854 8 view .LVU875
 2549 0168 80E0      		ldi r24,lo8(endpoint_config_table)
 2550 016a 90E0      		ldi r25,hi8(endpoint_config_table)
 2551               	.LVL299:
 2552               	.L189:
 856:usb_serial.c  **** 				en = pgm_read_byte(cfg++);
 2553               		.loc 1 856 5 is_stmt 1 view .LVU876
 856:usb_serial.c  **** 				en = pgm_read_byte(cfg++);
 2554               		.loc 1 856 11 is_stmt 0 view .LVU877
 2555 016c 2093 E900 		sts 233,r18
 857:usb_serial.c  **** 				UECONX = en;
 2556               		.loc 1 857 5 is_stmt 1 view .LVU878
 2557               	.LBB75:
 857:usb_serial.c  **** 				UECONX = en;
 2558               		.loc 1 857 10 view .LVU879
 2559 0170 AC01      		movw r20,r24
 2560 0172 4F5F      		subi r20,-1
 2561 0174 5F4F      		sbci r21,-1
 2562               	.LVL300:
 857:usb_serial.c  **** 				UECONX = en;
 2563               		.loc 1 857 10 view .LVU880
 857:usb_serial.c  **** 				UECONX = en;
 2564               		.loc 1 857 10 view .LVU881
 2565 0176 FC01      		movw r30,r24
 2566               	/* #APP */
 2567               	 ;  857 "usb_serial.c" 1
 2568 0178 3491      		lpm r19, Z
 2569               		
 2570               	 ;  0 "" 2
 2571               	.LVL301:
 857:usb_serial.c  **** 				UECONX = en;
 2572               		.loc 1 857 10 view .LVU882
 857:usb_serial.c  **** 				UECONX = en;
 2573               		.loc 1 857 10 is_stmt 0 view .LVU883
 2574               	/* #NOAPP */
 2575               	.LBE75:
 858:usb_serial.c  **** 				if (en) {
 2576               		.loc 1 858 5 is_stmt 1 view .LVU884
 858:usb_serial.c  **** 				if (en) {
 2577               		.loc 1 858 12 is_stmt 0 view .LVU885
 2578 017a 3093 EB00 		sts 235,r19
 859:usb_serial.c  **** 					UECFG0X = pgm_read_byte(cfg++);
 2579               		.loc 1 859 5 is_stmt 1 view .LVU886
 859:usb_serial.c  **** 					UECFG0X = pgm_read_byte(cfg++);
 2580               		.loc 1 859 8 is_stmt 0 view .LVU887
 2581 017e 3323      		tst r19
 2582 0180 01F0      		breq .L200
 860:usb_serial.c  **** 					UECFG1X = pgm_read_byte(cfg++);
 2583               		.loc 1 860 6 is_stmt 1 view .LVU888
 2584               	.LBB76:
 860:usb_serial.c  **** 					UECFG1X = pgm_read_byte(cfg++);
 2585               		.loc 1 860 16 view .LVU889
 2586               	.LVL302:
 860:usb_serial.c  **** 					UECFG1X = pgm_read_byte(cfg++);
 2587               		.loc 1 860 16 view .LVU890
 860:usb_serial.c  **** 					UECFG1X = pgm_read_byte(cfg++);
 2588               		.loc 1 860 16 view .LVU891
 2589 0182 FA01      		movw r30,r20
 2590               	/* #APP */
 2591               	 ;  860 "usb_serial.c" 1
 2592 0184 4491      		lpm r20, Z
 2593               		
 2594               	 ;  0 "" 2
 2595               	.LVL303:
 860:usb_serial.c  **** 					UECFG1X = pgm_read_byte(cfg++);
 2596               		.loc 1 860 16 view .LVU892
 2597               	/* #NOAPP */
 2598               	.LBE76:
 860:usb_serial.c  **** 					UECFG1X = pgm_read_byte(cfg++);
 2599               		.loc 1 860 14 is_stmt 0 view .LVU893
 2600 0186 4093 EC00 		sts 236,r20
 861:usb_serial.c  **** 				}
 2601               		.loc 1 861 6 is_stmt 1 view .LVU894
 2602               	.LBB77:
 861:usb_serial.c  **** 				}
 2603               		.loc 1 861 16 view .LVU895
 2604               	.LVL304:
 861:usb_serial.c  **** 				}
 2605               		.loc 1 861 16 view .LVU896
 861:usb_serial.c  **** 				}
 2606               		.loc 1 861 16 view .LVU897
 2607 018a 3196      		adiw r30,1
 2608               	.LVL305:
 861:usb_serial.c  **** 				}
 2609               		.loc 1 861 16 is_stmt 0 view .LVU898
 2610               	/* #APP */
 2611               	 ;  861 "usb_serial.c" 1
 2612 018c E491      		lpm r30, Z
 2613               		
 2614               	 ;  0 "" 2
 2615               	.LVL306:
 861:usb_serial.c  **** 				}
 2616               		.loc 1 861 16 view .LVU899
 2617               	/* #NOAPP */
 2618 018e 0396      		adiw r24,3
 2619               	.LVL307:
 861:usb_serial.c  **** 				}
 2620               		.loc 1 861 16 is_stmt 1 view .LVU900
 2621               	.LBE77:
 861:usb_serial.c  **** 				}
 2622               		.loc 1 861 14 is_stmt 0 view .LVU901
 2623 0190 E093 ED00 		sts 237,r30
 2624               	.LVL308:
 2625               	.L188:
 855:usb_serial.c  **** 				UENUM = i;
 2626               		.loc 1 855 19 is_stmt 1 discriminator 2 view .LVU902
 855:usb_serial.c  **** 				UENUM = i;
 2627               		.loc 1 855 20 is_stmt 0 discriminator 2 view .LVU903
 2628 0194 2F5F      		subi r18,lo8(-(1))
 2629               	.LVL309:
 855:usb_serial.c  **** 				UENUM = i;
 2630               		.loc 1 855 14 is_stmt 1 discriminator 2 view .LVU904
 855:usb_serial.c  **** 				UENUM = i;
 2631               		.loc 1 855 4 is_stmt 0 discriminator 2 view .LVU905
 2632 0196 2530      		cpi r18,lo8(5)
 2633 0198 01F4      		brne .L189
 864:usb_serial.c  ****         		UERST = 0;
 2634               		.loc 1 864 11 is_stmt 1 view .LVU906
 864:usb_serial.c  ****         		UERST = 0;
 2635               		.loc 1 864 17 is_stmt 0 view .LVU907
 2636 019a 8EE1      		ldi r24,lo8(30)
 2637               	.LVL310:
 2638               	.L212:
 925:usb_serial.c  **** 					UERST = 0;
 2639               		.loc 1 925 12 view .LVU908
 2640 019c 8093 EA00 		sts 234,r24
 926:usb_serial.c  **** 				}
 2641               		.loc 1 926 6 is_stmt 1 view .LVU909
 926:usb_serial.c  **** 				}
 2642               		.loc 1 926 12 is_stmt 0 view .LVU910
 2643 01a0 1092 EA00 		sts 234,__zero_reg__
 2644 01a4 00C0      		rjmp .L168
 2645               	.LVL311:
 2646               	.L200:
 2647               	.LBB78:
 857:usb_serial.c  **** 				UECONX = en;
 2648               		.loc 1 857 10 view .LVU911
 2649 01a6 CA01      		movw r24,r20
 2650               	.LVL312:
 857:usb_serial.c  **** 				UECONX = en;
 2651               		.loc 1 857 10 view .LVU912
 2652 01a8 00C0      		rjmp .L188
 2653               	.LVL313:
 2654               	.L187:
 857:usb_serial.c  **** 				UECONX = en;
 2655               		.loc 1 857 10 view .LVU913
 2656               	.LBE78:
 868:usb_serial.c  **** 			usb_wait_in_ready();
 2657               		.loc 1 868 3 is_stmt 1 view .LVU914
 868:usb_serial.c  **** 			usb_wait_in_ready();
 2658               		.loc 1 868 6 is_stmt 0 view .LVU915
 2659 01aa C830      		cpi r28,lo8(8)
 2660 01ac 01F4      		brne .L190
 868:usb_serial.c  **** 			usb_wait_in_ready();
 2661               		.loc 1 868 37 discriminator 1 view .LVU916
 2662 01ae D038      		cpi r29,lo8(-128)
 2663 01b0 01F0      		breq .+2
 2664 01b2 00C0      		rjmp .L169
 869:usb_serial.c  **** 			UEDATX = usb_configuration;
 2665               		.loc 1 869 4 is_stmt 1 view .LVU917
 2666 01b4 0E94 0000 		call usb_wait_in_ready
 2667               	.LVL314:
 870:usb_serial.c  **** 			usb_send_in();
 2668               		.loc 1 870 4 view .LVU918
 870:usb_serial.c  **** 			usb_send_in();
 2669               		.loc 1 870 11 is_stmt 0 view .LVU919
 2670 01b8 8091 0000 		lds r24,usb_configuration
 2671 01bc 8093 F100 		sts 241,r24
 871:usb_serial.c  **** 			return;
 2672               		.loc 1 871 4 is_stmt 1 view .LVU920
 2673               	.LBB79:
 2674               	.LBI79:
 754:usb_serial.c  **** {
 2675               		.loc 1 754 20 view .LVU921
 2676               	.LBB80:
 756:usb_serial.c  **** }
 2677               		.loc 1 756 2 view .LVU922
 2678               	.LVL315:
 2679               	.L213:
 756:usb_serial.c  **** }
 2680               		.loc 1 756 2 is_stmt 0 view .LVU923
 2681               	.LBE80:
 2682               	.LBE79:
 911:usb_serial.c  **** 			return;
 2683               		.loc 1 911 4 is_stmt 1 view .LVU924
 2684               	.LBB81:
 2685               	.LBI81:
 754:usb_serial.c  **** {
 2686               		.loc 1 754 20 view .LVU925
 2687               	.LBB82:
 756:usb_serial.c  **** }
 2688               		.loc 1 756 2 view .LVU926
 756:usb_serial.c  **** }
 2689               		.loc 1 756 9 is_stmt 0 view .LVU927
 2690 01c0 8EEF      		ldi r24,lo8(-2)
 2691 01c2 8093 E800 		sts 232,r24
 2692               	.LBE82:
 2693               	.LBE81:
 912:usb_serial.c  **** 		}
 2694               		.loc 1 912 4 is_stmt 1 view .LVU928
 2695 01c6 00C0      		rjmp .L168
 2696               	.LVL316:
 2697               	.L190:
 874:usb_serial.c  **** 			usb_wait_in_ready();
 2698               		.loc 1 874 3 view .LVU929
 874:usb_serial.c  **** 			usb_wait_in_ready();
 2699               		.loc 1 874 6 is_stmt 0 view .LVU930
 2700 01c8 C132      		cpi r28,lo8(33)
 2701 01ca 01F4      		brne .L191
 874:usb_serial.c  **** 			usb_wait_in_ready();
 2702               		.loc 1 874 39 discriminator 1 view .LVU931
 2703 01cc D13A      		cpi r29,lo8(-95)
 2704 01ce 01F0      		breq .+2
 2705 01d0 00C0      		rjmp .L169
 875:usb_serial.c  **** 			p = cdc_line_coding;
 2706               		.loc 1 875 4 is_stmt 1 view .LVU932
 2707 01d2 0E94 0000 		call usb_wait_in_ready
 2708               	.LVL317:
 876:usb_serial.c  **** 			for (i=0; i<7; i++) {
 2709               		.loc 1 876 4 view .LVU933
 877:usb_serial.c  **** 				UEDATX = *p++;
 2710               		.loc 1 877 4 view .LVU934
 877:usb_serial.c  **** 				UEDATX = *p++;
 2711               		.loc 1 877 14 view .LVU935
 876:usb_serial.c  **** 			for (i=0; i<7; i++) {
 2712               		.loc 1 876 6 is_stmt 0 view .LVU936
 2713 01d6 80E0      		ldi r24,lo8(cdc_line_coding)
 2714 01d8 90E0      		ldi r25,hi8(cdc_line_coding)
 2715               	.LVL318:
 2716               	.L192:
 878:usb_serial.c  **** 			}
 2717               		.loc 1 878 5 is_stmt 1 discriminator 3 view .LVU937
 2718 01da FC01      		movw r30,r24
 878:usb_serial.c  **** 			}
 2719               		.loc 1 878 16 is_stmt 0 discriminator 3 view .LVU938
 2720 01dc 0196      		adiw r24,1
 2721               	.LVL319:
 878:usb_serial.c  **** 			}
 2722               		.loc 1 878 14 discriminator 3 view .LVU939
 2723 01de 2081      		ld r18,Z
 878:usb_serial.c  **** 			}
 2724               		.loc 1 878 12 discriminator 3 view .LVU940
 2725 01e0 2093 F100 		sts 241,r18
 877:usb_serial.c  **** 				UEDATX = *p++;
 2726               		.loc 1 877 19 is_stmt 1 discriminator 3 view .LVU941
 2727               	.LVL320:
 877:usb_serial.c  **** 				UEDATX = *p++;
 2728               		.loc 1 877 14 discriminator 3 view .LVU942
 877:usb_serial.c  **** 				UEDATX = *p++;
 2729               		.loc 1 877 4 is_stmt 0 discriminator 3 view .LVU943
 2730 01e4 F0E0      		ldi r31,hi8(cdc_line_coding+7)
 2731 01e6 8030      		cpi r24,lo8(cdc_line_coding+7)
 2732 01e8 9F07      		cpc r25,r31
 2733 01ea 01F4      		brne .L192
 2734 01ec 00C0      		rjmp .L213
 2735               	.LVL321:
 2736               	.L191:
 883:usb_serial.c  **** 			usb_wait_receive_out();
 2737               		.loc 1 883 3 is_stmt 1 view .LVU944
 883:usb_serial.c  **** 			usb_wait_receive_out();
 2738               		.loc 1 883 6 is_stmt 0 view .LVU945
 2739 01ee C032      		cpi r28,lo8(32)
 2740 01f0 01F4      		brne .L193
 883:usb_serial.c  **** 			usb_wait_receive_out();
 2741               		.loc 1 883 39 discriminator 1 view .LVU946
 2742 01f2 D132      		cpi r29,lo8(33)
 2743 01f4 01F0      		breq .+2
 2744 01f6 00C0      		rjmp .L169
 2745               	.L194:
 2746               	.LBB83:
 2747               	.LBB84:
 760:usb_serial.c  **** }
 2748               		.loc 1 760 34 is_stmt 1 view .LVU947
 760:usb_serial.c  **** }
 2749               		.loc 1 760 8 view .LVU948
 760:usb_serial.c  **** }
 2750               		.loc 1 760 11 is_stmt 0 view .LVU949
 2751 01f8 8091 E800 		lds r24,232
 760:usb_serial.c  **** }
 2752               		.loc 1 760 8 view .LVU950
 2753 01fc 82FF      		sbrs r24,2
 2754 01fe 00C0      		rjmp .L194
 2755               	.LBE84:
 2756               	.LBE83:
 885:usb_serial.c  **** 			for (i=0; i<7; i++) {
 2757               		.loc 1 885 6 view .LVU951
 2758 0200 80E0      		ldi r24,lo8(cdc_line_coding)
 2759 0202 90E0      		ldi r25,hi8(cdc_line_coding)
 2760               	.LVL322:
 2761               	.L195:
 887:usb_serial.c  **** 			}
 2762               		.loc 1 887 5 is_stmt 1 discriminator 3 view .LVU952
 2763 0204 FC01      		movw r30,r24
 887:usb_serial.c  **** 			}
 2764               		.loc 1 887 7 is_stmt 0 discriminator 3 view .LVU953
 2765 0206 0196      		adiw r24,1
 2766               	.LVL323:
 887:usb_serial.c  **** 			}
 2767               		.loc 1 887 12 discriminator 3 view .LVU954
 2768 0208 2091 F100 		lds r18,241
 887:usb_serial.c  **** 			}
 2769               		.loc 1 887 10 discriminator 3 view .LVU955
 2770 020c 2083      		st Z,r18
 886:usb_serial.c  **** 				*p++ = UEDATX;
 2771               		.loc 1 886 19 is_stmt 1 discriminator 3 view .LVU956
 2772               	.LVL324:
 886:usb_serial.c  **** 				*p++ = UEDATX;
 2773               		.loc 1 886 14 discriminator 3 view .LVU957
 886:usb_serial.c  **** 				*p++ = UEDATX;
 2774               		.loc 1 886 4 is_stmt 0 discriminator 3 view .LVU958
 2775 020e 20E0      		ldi r18,hi8(cdc_line_coding+7)
 2776 0210 8030      		cpi r24,lo8(cdc_line_coding+7)
 2777 0212 9207      		cpc r25,r18
 2778 0214 01F4      		brne .L195
 889:usb_serial.c  **** 			usb_send_in();
 2779               		.loc 1 889 4 is_stmt 1 view .LVU959
 2780               	.LBB85:
 2781               	.LBI85:
 762:usb_serial.c  **** {
 2782               		.loc 1 762 20 view .LVU960
 2783               	.LBB86:
 764:usb_serial.c  **** }
 2784               		.loc 1 764 2 view .LVU961
 764:usb_serial.c  **** }
 2785               		.loc 1 764 9 is_stmt 0 view .LVU962
 2786 0216 8BEF      		ldi r24,lo8(-5)
 2787               	.LVL325:
 764:usb_serial.c  **** }
 2788               		.loc 1 764 9 view .LVU963
 2789 0218 8093 E800 		sts 232,r24
 2790               	.LBE86:
 2791               	.LBE85:
 890:usb_serial.c  **** 			return;
 2792               		.loc 1 890 4 is_stmt 1 view .LVU964
 2793               	.LBB87:
 2794               	.LBI87:
 754:usb_serial.c  **** {
 2795               		.loc 1 754 20 view .LVU965
 2796               	.LBB88:
 756:usb_serial.c  **** }
 2797               		.loc 1 756 2 view .LVU966
 2798 021c 00C0      		rjmp .L213
 2799               	.LVL326:
 2800               	.L193:
 756:usb_serial.c  **** }
 2801               		.loc 1 756 2 is_stmt 0 view .LVU967
 2802               	.LBE88:
 2803               	.LBE87:
 893:usb_serial.c  **** 			cdc_line_rtsdtr = wValue;
 2804               		.loc 1 893 3 is_stmt 1 view .LVU968
 893:usb_serial.c  **** 			cdc_line_rtsdtr = wValue;
 2805               		.loc 1 893 6 is_stmt 0 view .LVU969
 2806 021e C232      		cpi r28,lo8(34)
 2807 0220 01F4      		brne .L196
 893:usb_serial.c  **** 			cdc_line_rtsdtr = wValue;
 2808               		.loc 1 893 46 discriminator 1 view .LVU970
 2809 0222 D132      		cpi r29,lo8(33)
 2810 0224 01F0      		breq .+2
 2811 0226 00C0      		rjmp .L169
 894:usb_serial.c  **** 			usb_wait_in_ready();
 2812               		.loc 1 894 4 is_stmt 1 view .LVU971
 894:usb_serial.c  **** 			usb_wait_in_ready();
 2813               		.loc 1 894 20 is_stmt 0 view .LVU972
 2814 0228 E092 0000 		sts cdc_line_rtsdtr,r14
 895:usb_serial.c  **** 			usb_send_in();
 2815               		.loc 1 895 4 is_stmt 1 view .LVU973
 2816 022c 0E94 0000 		call usb_wait_in_ready
 2817               	.LVL327:
 896:usb_serial.c  **** 			return;
 2818               		.loc 1 896 4 view .LVU974
 2819               	.LBB89:
 2820               	.LBI89:
 754:usb_serial.c  **** {
 2821               		.loc 1 754 20 view .LVU975
 2822               	.LBB90:
 756:usb_serial.c  **** }
 2823               		.loc 1 756 2 view .LVU976
 2824 0230 00C0      		rjmp .L213
 2825               	.LVL328:
 2826               	.L196:
 756:usb_serial.c  **** }
 2827               		.loc 1 756 2 is_stmt 0 view .LVU977
 2828               	.LBE90:
 2829               	.LBE89:
 899:usb_serial.c  **** 			usb_wait_in_ready();
 2830               		.loc 1 899 3 is_stmt 1 view .LVU978
 899:usb_serial.c  **** 			usb_wait_in_ready();
 2831               		.loc 1 899 6 is_stmt 0 view .LVU979
 2832 0232 C111      		cpse r28,__zero_reg__
 2833 0234 00C0      		rjmp .L197
 900:usb_serial.c  **** 			i = 0;
 2834               		.loc 1 900 4 is_stmt 1 view .LVU980
 2835 0236 0E94 0000 		call usb_wait_in_ready
 2836               	.LVL329:
 901:usb_serial.c  **** 			#ifdef SUPPORT_ENDPOINT_HALT
 2837               		.loc 1 901 4 view .LVU981
 903:usb_serial.c  **** 				UENUM = wIndex;
 2838               		.loc 1 903 4 view .LVU982
 903:usb_serial.c  **** 				UENUM = wIndex;
 2839               		.loc 1 903 7 is_stmt 0 view .LVU983
 2840 023a D238      		cpi r29,lo8(-126)
 2841 023c 01F4      		brne .L198
 904:usb_serial.c  **** 				if (UECONX & (1<<STALLRQ)) i = 1;
 2842               		.loc 1 904 5 is_stmt 1 view .LVU984
 904:usb_serial.c  **** 				if (UECONX & (1<<STALLRQ)) i = 1;
 2843               		.loc 1 904 11 is_stmt 0 view .LVU985
 2844 023e 0093 E900 		sts 233,r16
 905:usb_serial.c  **** 				UENUM = 0;
 2845               		.loc 1 905 5 is_stmt 1 view .LVU986
 905:usb_serial.c  **** 				UENUM = 0;
 2846               		.loc 1 905 9 is_stmt 0 view .LVU987
 2847 0242 C091 EB00 		lds r28,235
 2848               	.LVL330:
 905:usb_serial.c  **** 				UENUM = 0;
 2849               		.loc 1 905 8 view .LVU988
 2850 0246 C5FB      		bst r28,5
 2851 0248 CC27      		clr r28
 2852 024a C0F9      		bld r28,0
 2853               	.LVL331:
 906:usb_serial.c  **** 			}
 2854               		.loc 1 906 5 is_stmt 1 view .LVU989
 906:usb_serial.c  **** 			}
 2855               		.loc 1 906 11 is_stmt 0 view .LVU990
 2856 024c 1092 E900 		sts 233,__zero_reg__
 2857               	.LVL332:
 2858               	.L198:
 909:usb_serial.c  **** 			UEDATX = 0;
 2859               		.loc 1 909 4 is_stmt 1 view .LVU991
 909:usb_serial.c  **** 			UEDATX = 0;
 2860               		.loc 1 909 11 is_stmt 0 view .LVU992
 2861 0250 C093 F100 		sts 241,r28
 910:usb_serial.c  **** 			usb_send_in();
 2862               		.loc 1 910 4 is_stmt 1 view .LVU993
 910:usb_serial.c  **** 			usb_send_in();
 2863               		.loc 1 910 11 is_stmt 0 view .LVU994
 2864 0254 1092 F100 		sts 241,__zero_reg__
 2865 0258 00C0      		rjmp .L213
 2866               	.LVL333:
 2867               	.L197:
 915:usb_serial.c  **** 		  && bmRequestType == 0x02 && wValue == 0) {
 2868               		.loc 1 915 3 is_stmt 1 view .LVU995
 915:usb_serial.c  **** 		  && bmRequestType == 0x02 && wValue == 0) {
 2869               		.loc 1 915 6 is_stmt 0 view .LVU996
 2870 025a 8C2F      		mov r24,r28
 2871 025c 8D7F      		andi r24,lo8(-3)
 2872 025e 8130      		cpi r24,lo8(1)
 2873 0260 01F0      		breq .+2
 2874 0262 00C0      		rjmp .L169
 916:usb_serial.c  **** 			i = wIndex & 0x7F;
 2875               		.loc 1 916 5 view .LVU997
 2876 0264 D230      		cpi r29,lo8(2)
 2877 0266 01F0      		breq .+2
 2878 0268 00C0      		rjmp .L169
 916:usb_serial.c  **** 			i = wIndex & 0x7F;
 2879               		.loc 1 916 30 discriminator 1 view .LVU998
 2880 026a EF28      		or r14,r15
 2881 026c 01F0      		breq .+2
 2882 026e 00C0      		rjmp .L169
 917:usb_serial.c  **** 			if (i >= 1 && i <= MAX_ENDPOINT) {
 2883               		.loc 1 917 4 is_stmt 1 view .LVU999
 917:usb_serial.c  **** 			if (i >= 1 && i <= MAX_ENDPOINT) {
 2884               		.loc 1 917 6 is_stmt 0 view .LVU1000
 2885 0270 0F77      		andi r16,lo8(127)
 2886               	.LVL334:
 918:usb_serial.c  **** 				usb_send_in();
 2887               		.loc 1 918 4 is_stmt 1 view .LVU1001
 918:usb_serial.c  **** 				usb_send_in();
 2888               		.loc 1 918 15 is_stmt 0 view .LVU1002
 2889 0272 8FEF      		ldi r24,lo8(-1)
 2890 0274 800F      		add r24,r16
 918:usb_serial.c  **** 				usb_send_in();
 2891               		.loc 1 918 7 view .LVU1003
 2892 0276 8430      		cpi r24,lo8(4)
 2893 0278 00F0      		brlo .+2
 2894 027a 00C0      		rjmp .L169
 919:usb_serial.c  **** 				UENUM = i;
 2895               		.loc 1 919 5 is_stmt 1 view .LVU1004
 2896               	.LBB91:
 2897               	.LBI91:
 754:usb_serial.c  **** {
 2898               		.loc 1 754 20 view .LVU1005
 2899               	.LBB92:
 756:usb_serial.c  **** }
 2900               		.loc 1 756 2 view .LVU1006
 756:usb_serial.c  **** }
 2901               		.loc 1 756 9 is_stmt 0 view .LVU1007
 2902 027c 8EEF      		ldi r24,lo8(-2)
 2903 027e 8093 E800 		sts 232,r24
 2904               	.LBE92:
 2905               	.LBE91:
 920:usb_serial.c  **** 				if (bRequest == SET_FEATURE) {
 2906               		.loc 1 920 5 is_stmt 1 view .LVU1008
 920:usb_serial.c  **** 				if (bRequest == SET_FEATURE) {
 2907               		.loc 1 920 11 is_stmt 0 view .LVU1009
 2908 0282 0093 E900 		sts 233,r16
 921:usb_serial.c  **** 					UECONX = (1<<STALLRQ)|(1<<EPEN);
 2909               		.loc 1 921 5 is_stmt 1 view .LVU1010
 921:usb_serial.c  **** 					UECONX = (1<<STALLRQ)|(1<<EPEN);
 2910               		.loc 1 921 8 is_stmt 0 view .LVU1011
 2911 0286 C330      		cpi r28,lo8(3)
 2912 0288 01F4      		brne .+2
 2913 028a 00C0      		rjmp .L169
 924:usb_serial.c  **** 					UERST = (1 << i);
 2914               		.loc 1 924 6 is_stmt 1 view .LVU1012
 924:usb_serial.c  **** 					UERST = (1 << i);
 2915               		.loc 1 924 13 is_stmt 0 view .LVU1013
 2916 028c 89E1      		ldi r24,lo8(25)
 2917 028e 8093 EB00 		sts 235,r24
 925:usb_serial.c  **** 					UERST = 0;
 2918               		.loc 1 925 6 is_stmt 1 view .LVU1014
 925:usb_serial.c  **** 					UERST = 0;
 2919               		.loc 1 925 17 is_stmt 0 view .LVU1015
 2920 0292 81E0      		ldi r24,lo8(1)
 2921 0294 90E0      		ldi r25,0
 2922 0296 00C0      		rjmp 2f
 2923               		1:
 2924 0298 880F      		lsl r24
 2925               		2:
 2926 029a 0A95      		dec r16
 2927 029c 02F4      		brpl 1b
 2928 029e 00C0      		rjmp .L212
 2929               		.cfi_endproc
 2930               	.LFE21:
 2932               		.local	cdc_line_rtsdtr
 2933               		.comm	cdc_line_rtsdtr,1,1
 2934               		.data
 2937               	cdc_line_coding:
 2938 0000 00        		.string	""
 2939 0001 E100      		.string	"\341"
 2940 0003 00        		.string	""
 2941 0004 00        		.string	""
 2942 0005 00        		.string	""
 2943 0006 08        		.ascii	"\b"
 2944               		.local	transmit_previous_timeout
 2945               		.comm	transmit_previous_timeout,1,1
 2946               		.local	transmit_flush_timer
 2947               		.comm	transmit_flush_timer,1,1
 2948               		.local	usb_configuration
 2949               		.comm	usb_configuration,1,1
 2950               		.section	.progmem.data,"a",@progbits
 2953               	descriptor_list:
 2954 0000 0001      		.word	256
 2955 0002 0000      		.word	0
 2956 0004 0000      		.word	device_descriptor
 2957 0006 12        		.byte	18
 2958 0007 0002      		.word	512
 2959 0009 0000      		.word	0
 2960 000b 0000      		.word	config1_descriptor
 2961 000d 43        		.byte	67
 2962 000e 0003      		.word	768
 2963 0010 0000      		.word	0
 2964 0012 0000      		.word	string0
 2965 0014 04        		.byte	4
 2966 0015 0103      		.word	769
 2967 0017 0904      		.word	1033
 2968 0019 0000      		.word	string1
 2969 001b 14        		.byte	20
 2970 001c 0203      		.word	770
 2971 001e 0904      		.word	1033
 2972 0020 0000      		.word	string2
 2973 0022 16        		.byte	22
 2974 0023 0303      		.word	771
 2975 0025 0904      		.word	1033
 2976 0027 0000      		.word	string3
 2977 0029 0C        		.byte	12
 2980               	string3:
 2981 002a 0C        		.byte	12
 2982 002b 03        		.byte	3
 2983 002c 3100      		.string	"1"
 2984 002e 3200      		.string	"2"
 2985 0030 3300      		.string	"3"
 2986 0032 3400      		.string	"4"
 2987 0034 3500      		.string	"5"
 2988 0036 00        		.string	""
 2989 0037 00        		.string	""
 2992               	string2:
 2993 0038 16        		.byte	22
 2994 0039 03        		.byte	3
 2995 003a 5500      		.string	"U"
 2996 003c 5300      		.string	"S"
 2997 003e 4200      		.string	"B"
 2998 0040 2000      		.string	" "
 2999 0042 5300      		.string	"S"
 3000 0044 6500      		.string	"e"
 3001 0046 7200      		.string	"r"
 3002 0048 6900      		.string	"i"
 3003 004a 6100      		.string	"a"
 3004 004c 6C00      		.string	"l"
 3005 004e 00        		.string	""
 3006 004f 00        		.string	""
 3009               	string1:
 3010 0050 14        		.byte	20
 3011 0051 03        		.byte	3
 3012 0052 5900      		.string	"Y"
 3013 0054 6F00      		.string	"o"
 3014 0056 7500      		.string	"u"
 3015 0058 7200      		.string	"r"
 3016 005a 2000      		.string	" "
 3017 005c 4E00      		.string	"N"
 3018 005e 6100      		.string	"a"
 3019 0060 6D00      		.string	"m"
 3020 0062 6500      		.string	"e"
 3021 0064 00        		.string	""
 3022 0065 00        		.string	""
 3025               	string0:
 3026 0066 04        		.byte	4
 3027 0067 03        		.byte	3
 3028 0068 0904      		.word	1033
 3031               	config1_descriptor:
 3032 006a 0902 4300 		.string	"\t\002C"
 3033 006e 0201 00   		.string	"\002\001"
 3034 0071 C032 0904 		.string	"\3002\t\004"
 3034      00
 3035 0076 00        		.string	""
 3036 0077 0102 0201 		.string	"\001\002\002\001"
 3036      00
 3037 007c 0524 00   		.string	"\005$"
 3038 007f 1001 0524 		.string	"\020\001\005$\001\001\001\004$\002\006\005$\006"
 3038      0101 0104 
 3038      2402 0605 
 3038      2406 00
 3039 008e 0107 0582 		.string	"\001\007\005\202\003\020"
 3039      0310 00
 3040 0095 4009 0401 		.string	"@\t\004\001"
 3040      00
 3041 009a 020A 00   		.string	"\002\n"
 3042 009d 00        		.string	""
 3043 009e 00        		.string	""
 3044 009f 0705 0302 		.string	"\007\005\003\002@"
 3044      4000 
 3045 00a5 00        		.string	""
 3046 00a6 0705 8402 		.string	"\007\005\204\002@"
 3046      4000 
 3047 00ac 00        		.string	""
 3050               	device_descriptor:
 3051 00ad 1201 00   		.string	"\022\001"
 3052 00b0 0202 00   		.string	"\002\002"
 3053 00b3 00        		.string	""
 3054 00b4 10C0 167A 		.string	"\020\300\026z\004"
 3054      0400 
 3055 00ba 0101 0203 		.ascii	"\001\001\002\003\001"
 3055      01
 3058               	endpoint_config_table:
 3059 00bf 00        		.string	""
 3060 00c0 01C1 1201 		.ascii	"\001\301\022\001\2006\001\2016"
 3060      8036 0181 
 3060      36
 3061               		.text
 3062               	.Letext0:
 3063               		.file 2 "/usr/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_serial.c
     /tmp/ccbgDsIj.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccbgDsIj.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccbgDsIj.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccbgDsIj.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccbgDsIj.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccbgDsIj.s:12     .text.usb_wait_in_ready:0000000000000000 usb_wait_in_ready
     /tmp/ccbgDsIj.s:38     .text.usb_init:0000000000000000 usb_init
     /tmp/ccbgDsIj.s:2947   .bss:0000000000000003 usb_configuration
                             .bss:0000000000000000 cdc_line_rtsdtr
     /tmp/ccbgDsIj.s:93     .text.usb_configured:0000000000000000 usb_configured
     /tmp/ccbgDsIj.s:113    .text.usb_serial_getchar:0000000000000000 usb_serial_getchar
     /tmp/ccbgDsIj.s:204    .text.usb_serial_available:0000000000000000 usb_serial_available
     /tmp/ccbgDsIj.s:285    .text.usb_serial_flush_input:0000000000000000 usb_serial_flush_input
     /tmp/ccbgDsIj.s:344    .text.usb_serial_putchar:0000000000000000 usb_serial_putchar
     /tmp/ccbgDsIj.s:2933   .bss:0000000000000001 transmit_previous_timeout
     /tmp/ccbgDsIj.s:2945   .bss:0000000000000002 transmit_flush_timer
     /tmp/ccbgDsIj.s:497    .text.usb_serial_putchar_nowait:0000000000000000 usb_serial_putchar_nowait
     /tmp/ccbgDsIj.s:580    .text.usb_serial_write:0000000000000000 usb_serial_write
     /tmp/ccbgDsIj.s:1678   .text.usb_serial_flush_output:0000000000000000 usb_serial_flush_output
     /tmp/ccbgDsIj.s:1727   .text.usb_serial_get_baud:0000000000000000 usb_serial_get_baud
     /tmp/ccbgDsIj.s:2937   .data:0000000000000000 cdc_line_coding
     /tmp/ccbgDsIj.s:1774   .text.usb_serial_get_stopbits:0000000000000000 usb_serial_get_stopbits
     /tmp/ccbgDsIj.s:1793   .text.usb_serial_get_paritytype:0000000000000000 usb_serial_get_paritytype
     /tmp/ccbgDsIj.s:1812   .text.usb_serial_get_numbits:0000000000000000 usb_serial_get_numbits
     /tmp/ccbgDsIj.s:1831   .text.usb_serial_get_control:0000000000000000 usb_serial_get_control
     /tmp/ccbgDsIj.s:1850   .text.usb_serial_set_control:0000000000000000 usb_serial_set_control
     /tmp/ccbgDsIj.s:1950   .text.__vector_10:0000000000000000 __vector_10
                            *ABS*:0000000000000003 __gcc_isr.n_pushed.001
     /tmp/ccbgDsIj.s:2053   .text.__vector_11:0000000000000000 __vector_11
     /tmp/ccbgDsIj.s:2953   .progmem.data:0000000000000000 descriptor_list
     /tmp/ccbgDsIj.s:3058   .progmem.data:00000000000000bf endpoint_config_table
     /tmp/ccbgDsIj.s:3050   .progmem.data:00000000000000ad device_descriptor
     /tmp/ccbgDsIj.s:3031   .progmem.data:000000000000006a config1_descriptor
     /tmp/ccbgDsIj.s:3025   .progmem.data:0000000000000066 string0
     /tmp/ccbgDsIj.s:3009   .progmem.data:0000000000000050 string1
     /tmp/ccbgDsIj.s:2992   .progmem.data:0000000000000038 string2
     /tmp/ccbgDsIj.s:2980   .progmem.data:000000000000002a string3

UNDEFINED SYMBOLS
__tablejump2__
__do_copy_data
__do_clear_bss
